!function(){"use strict";angular.module("app",["ngImgCrop","toastService","textAngular","luegg.directives","appRxDrag","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),function(){"use strict";function e(e){function t(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:2e3})}var o={message:"",errorMessage:t};return o}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,t){var o=this;o.message=t.message,o.closeToast=function(){e.hide()}}]).factory("toastApp",e),e.$inject=["$mdToast"]}(),function(){"use strict";function e(e,t){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("profile",{url:"/profile",templateUrl:"views/pages/profile.html",controller:"profileController as vm"}).state("dscreport",{url:"/dscreport",templateUrl:"views/pages/problemreport.html",controller:"problemReportController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.stakeholders",{url:"/stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"/evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"/semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"/carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}).state("problem.vif",{url:"/vif",views:{"dsc-artifact":{templateUrl:"views/pages/vif.html",controller:"valueIdentificationFrameController as vm"}}}).state("problem.onion",{url:"/onion",views:{"dsc-artifact":{templateUrl:"views/pages/onion.html",controller:"onion3LayerController as vm"}}}),t.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function t(e){function t(t){e.use(t)}var o=this;o.setLang=t}function o(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",t).directive("changeLanguage",o),e.$inject=["$translateProvider"],t.$inject=["$translate"]}(),function(){"use strict";function e(e,t,o,n){function r(){d.idProblem=e.localStorage.getItem("problemid"),o.getcarf(d.idProblem).success(function(e){e.success&&(d.localStakeholders=e.stakeholders,d.stakeholderList=d.localStakeholders,d.carfList=e.carf,d.carfPriorityList=d.localPriorityList)}),d.inProcessing=!1}function a(){d.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},d.valueList=[]}function i(e){""===e.pms?n.errorMessage("Select PMS"):e.values.length<1?n.errorMessage("Select one or more Value"):e.stakeholders.length<1?n.errorMessage("Select one or more Stakeholder(s)"):""===e.priority?n.errorMessage("Select priority [Low, Medium or High]"):(t.emit("broadcastCARFadd",e),d.stakeholderList=[],d.carfPriorityList=[])}function s(e,o){var n={index:e,carf:o};t.emit("broadcastCARFremove",n)}function l(e){void 0!==e&&angular.forEach(d.carfPMSValue,function(t){return t.pms==e?(d.carf.values=[],void(d.valueList=t.values)):void 0})}function c(e){d.carf.priority=e}function u(e){if(0===d.carf.values.length)d.carf.values.push(e);else{for(var t=0;t<d.carf.values.length;t++)if(e==d.carf.values[t])return void d.carf.values.splice(t,1);d.carf.values.push(e)}}function m(e){if(0===d.carf.stakeholders.length)d.carf.stakeholders.push(e);else{for(var t=0;t<d.carf.stakeholders.length;t++)if(e==d.carf.stakeholders[t])return void d.carf.stakeholders.splice(t,1);d.carf.stakeholders.push(e)}}var d=this;d.idProblem="",d.inProcessing=!0,d.valueList=[],d.stakeholderList=[],d.localStakeholders=[],d.addpmsvalue=i,d.removeCARF=s,d.selectPMSValue=l,d.setPriotity=c,d.addListValue=u,d.addStakeholder=m,d.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},d.initCarf=r,d.carfList=[],d.carfPriorityList=[],t.on("onBroadcastCARFadd",function(e){d.carfList.push(e),a(),d.stakeholderList=d.localStakeholders,d.carfPriorityList=d.localPriorityList}),t.on("onBroadcastCARFremove",function(e){d.carfList.splice(e,1)}),d.localPriorityList=["Low","Medium","High"],d.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,n){function r(){u.isOpenChat=!u.isOpenChat,document.getElementById("message").focus()}function a(){u.idProblem=n.localStorage.getItem("problemid"),u.nickname=n.localStorage.getItem("nickname"),u.photo=n.localStorage.getItem("photo"),o.gethistorychat(u.idProblem).success(function(e){if(e.success)for(var t=0;t<e.historychat.length;t++){var o=new Date(e.historychat[t].time),n={nickname:e.historychat[t].nickname,msg:e.historychat[t].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "};u.messages.push(n)}}),t.emit("checkUsers")}function i(){u.replay?u.replay=!1:u.replay=!0}function s(e){void 0===e||e.length<2||(t.emit("broadcastChat",e),u.newmsg="",u.contador=0)}function l(){u.contador=0}function c(t,o){13==t.keyCode&&(u.contador++,1==u.contador&&e(l,2e3),u.contador>1&&s(o))}var u=this;u.newmsg="",u.messages=[],u.replay=!1,u.nickname="",u.userList=[],u.initHistoryChat=a,u.showReplay=i,u.sendMessage=s,u.photo="",u.openChat=r,u.isOpenChat=!1,u.keypressChat=c,u.contador=0,t.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);u.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})}),t.on("onCheckUsers",function(e){u.userList=e})}angular.module("app").controller("chatDSC",e),e.$inject=["$timeout","Socket","problemService","$window"]}(),function(){"use strict";function e(){function e(e){var t=document.getElementById("projectResport"),o=new jsPDF("l","px");o.addHTML(t,0,0,{pagesplit:!0},function(e){o.save("test.pdf")})}var t=this;t.idproblem="ajflajfljalfjaljf",t.buidReport=e}angular.module("app").controller("dscReportController",e)}(),function(){"use strict";function e(e,t,o,n){function r(){s.idproblem=e.localStorage.getItem("problemid"),t.getevaluation(s.idproblem).success(function(e){e.success?s.evaluationframeworkList=e.evaluationframework:n.errorMessage(e.message)})}function a(e){o.emit("broadcastFrameSave",e)}function i(e){e.openEdit=!0}var s=this;s.evaluationframeworkList=[],s.initEvaluation=r,s.setOpenEditDiscution=i,s.saveFrame=a,o.on("onBroadcastFrameEdit",function(e){angular.forEach(s.evaluationframeworkList,function(t){t.onionlayer==e.onionlayer&&angular.forEach(t.stakeholders,function(t){t._id==e._id&&(t.name=e.name,t.onionlayer=e.onionlayer,t.description=e.description,t.openEdit=e.openEdit,t.problems=e.problems,t.solutions=e.solutions)})})}),o.on("onUpdateStakeholder",function(e){})}angular.module("app").controller("evaluationframeworkController",e),e.$inject=["$window","problemService","Socket","toastApp"]}(),function(){"use strict";function e(e,t,o,n,r,a,i,s,l){function c(e){e.localcode=w,l.emit("atualizarProblema",e)}function u(e){t.show({controller:m,templateUrl:"views/pages/problemdescription.html",parent:angular.element(document.body),targetEvent:e})}function m(e,t,o,n){function r(){o.nickname=a.localStorage.getItem("nickname"),o.idProblem=a.localStorage.getItem("problemid"),i.getproblem(k.idProblem).success(function(e){e.success?o.problem=e.problem:s.errorMessage(e.message)})}function l(){d=!0}function u(e){var o={update:d,description:e};c(o),d&&(d=!1,t(l,2e3))}function m(e){var t={update:!0,description:e};c(t)}var d=!0;o.problem="",o.problemUpdate=u,o.getProblemEdit=r,o.saveDescription=m,o.nickname="",o.hide=function(){n.hide()},o.cancel=function(){n.cancel()}}function d(e){t.show({controller:p,templateUrl:"views/pages/collaborators.html",parent:angular.element(document.body),targetEvent:e})}function p(e,t){function o(){e.idProblem=a.localStorage.getItem("problemid"),e.useremail=a.localStorage.getItem("useremail"),i.getcollaborators(e.idProblem).success(function(t){t.success?(console.log(t.collaborators),e.collaborators=t.collaborators):s.errorMessage(t.message)})}function n(t){for(var o=0;o<e.collaborators.length;o++)if(t==e.collaborators[o].email)return!0;return!1}function r(t){if(e.useremail==t)s.errorMessage(e.useremail+" is email of owner.");else if(n(t))s.errorMessage("Usuario Cadastrado.");else{var o={idproblem:e.idProblem,email:t};i.invite(o).success(function(t){t.success?e.collaborators=t.collaborators:s.errorMessage(t.message)})}}function l(t){var o={idproblem:e.idProblem,email:t.email};i.removecollaborators(o).success(function(t){t.success?(s.errorMessage("Colaborador foi removido do projeto."),e.collaborators=t.collaborators):s.errorMessage(t.message)})}e.idProblem="",e.collaborators=[],e.useremail="",e.initCollaborators=o,e.addCollaborator=r,e.removeCollaborator=l,e.hide=function(){t.hide()},e.cancel=function(){t.cancel()}}function g(){k.nickname=a.localStorage.getItem("nickname"),k.idProblem=a.localStorage.getItem("problemid"),w=a.localStorage.getItem("localcode"),i.getproblem(k.idProblem).success(function(e){e.success?(k.problem=e.problem,angular.forEach(e.problem.artifacts,function(e){var t=e.split("_");k.dsc_artifacts.push({name:"problem."+t[2].toLowerCase(),label:n("translate")(e)})})):s.errorMessage(e.message)});var e={idproblem:k.idProblem,nickname:k.nickname};l.emit("initProblem",e)}function f(){r.go("startproblem")}function h(){r.go("problem.collaborators")}function b(){r.go("dscreport")}function v(){r.go("problem.description")}function y(){e.logout(),r.go("init.login")}var k=this;k.formAddCollaborators=h,k.editDescriptionProblem=v,k.doLogout=y,k.systemReturn=f,k.formProblemReport=b,k.getCurrentProblem=g,k.nickname,k.dsc_artifacts=[],k.formEditProblem=u,k.formInviteCollaborator=d;var w="";l.on("onAtualizarProblema",function(e){w!==e.localcode&&setDescrition(e.description)}),m.$inject=["Socket","$timeout","$scope","$mdDialog"],p.$inject=["$scope","$mdDialog"],k.selectedIndex=0;var S=null,A=null;o.$watch("selectedIndex",function(e){A=S,S=k.dsc_artifacts[e],k.selectedIndex=e})}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$mdDialog","$scope","$filter","$state","$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,t,o,n,r){var a=this;a.idproblem="",a.intiMytOnion=intiMytOnion,a.savePostItOnion=savePostItOnion,a.editPostItOnion=editPostItOnion,a.delPostItOnion=delPostItOnion,a.addPostItOnion=addPostItOnion,a.onOnion=onOnion,a.offOnion=offOnion}angular.module("app").controller("onionController",e),e.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(),function(e){"use strict";function t(e,t,o,n,r){function a(){p.idproblem=t.localStorage.getItem("problemid"),p.localcode=t.localStorage.getItem("localcode"),p.inProcessing=!1}function i(t){e.emit("broadcastOnion3LayerSave",t)}function s(t){e.emit("broadcastOnion3LayerEdit",t)}function l(t,o){var n={index:t,postit:o};e.emit("broadcastOnion3LayerRemove",n)}function c(e,t,o){var r=n.confirm().parent(angular.element(document.body)).title("Detete Postit?").content("Title: "+onion.title).ariaLabel("Remove postit").ok("Yes!").cancel("Cancel").targetEvent(e);n.show(r).then(function(){l(t,o)})}function u(t,o){var n={onionlayer:o,title:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px",zindex:9999};e.emit("broadcastOnion3LayerAdd",n)}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline; fill: #8FBC8F;"),document.getElementById(e).setAttribute("style","fill: #8FBC8F;"),document.getElementById("legend"+e).setAttribute("opacity","0.7"),document.getElementById(e).setAttribute("opacity","0.7")}function d(e,t){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById(e).setAttribute("style","fill: "+t+";"),document.getElementById("legend"+e).setAttribute("opacity","1.0"),document.getElementById(e).setAttribute("opacity","1.0")}var p=this;p.idproblem="",p.initOnion3Layer=a,p.move=!1,p.onion3LayerList=[],p.inProcessing=!0,p.saveOnion3Layer=i,p.setOpenEdit=s,p.delPostIt=c,p.addPostIt=u,p.acende=m,p.apaga=d,p.localcode="",e.on("onBroadcastOnion3LayerSave",function(e){angular.forEach(p.onion3LayerList,function(t){t._id==e._id&&(t.title=e.title,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.zindex=9999)})}),e.on("onBroadcastOnion3LayerEdit",function(e){angular.forEach(p.onion3LayerList,function(t){t._id===e&&(t.openEdit=!0,t.zindex=9999)})}),e.on("onBroadcastOnion3LayerRemove",function(e){document.getElementById("postit"+p.onion3LayerList[e]._id);onion3Layer.style.display="none",p.onion3LayerList.splice(e,1)}),e.on("onBroadcastOnion3LayerMove",function(e){p.localcode!==e.localcode&&(document.getElementById("postit"+e._id).style.left=e.x,document.getElementById("postit"+e._id).style.top=e.y)}),e.on("onBroadcastOnion3LayerAdd",function(e){p.onion3LayerList.push(e)})}angular.module("app").controller("onion3LayerController",t),t.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,t,o,n){function r(){i.idProblem=e.localStorage.getItem("problemid"),t.getproblemreport(i.idProblem).success(function(e){e.success?(angular.forEach(e.problem.stakeholders,function(e){e.x=parseInt(e.x.substring(0,e.x.length-2))-100+"px",e.y=parseInt(e.y.substring(0,e.y.length-2))+400+"px"}),i.problem=e.problem):o.errorMessage(e.message)})}function a(){n.go("problem.stakeholders")}var i=this;i.idProblem,i.problem,i.initProblemPeport=r,i.systemReturn=a}angular.module("app").controller("problemReportController",e),e.$inject=["$window","problemService","toastApp","$state"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(v,t)}function n(t){return e.get(k+"?idproblem="+t)}function r(t){return e.get(y+"?idproblem="+t)}function a(t){return e.get(h+"?email="+t)}function i(t){return e.get(w+"?idproblem="+t)}function s(t){return e.post(S,t)}function l(t){return e.get(A+"?idproblem="+t)}function c(t){return e.get(L+"?idproblem="+t)}function u(t){return e.get(P+"?idproblem="+t)}function m(t){return e.get(E+"?idproblem="+t)}function d(t){return e.get(I+"?idproblem="+t)}function p(t){return e.get(b+"?email="+t)}function g(t){return e.get(C+"?idproblem="+t.idproblem+"&email="+t.email)}function f(t){return e.get($+"?idproblem="+t)}var h="/api/problem/getproblems",b="/api/problem/getproblemscollaborator",v="/api/problem/newproblem",y="/api/problem/getproblem",k="/api/problem/getproblemreport",w="/api/problem/getcollaborators",S="/api/problem/invite",A="/api/problem/getonion",L="/api/problem/getevaluation",P="/api/problem/getsemiotic",E="/api/problem/getcarf",I="/api/problem/removeproblem",C="/api/problem/removecollaborator",$="/api/problem/historychat",M={newproblem:o,getuserproblems:a,getproblem:r,getcollaborators:i,invite:s,getonion:l,getevaluation:c,getsemiotic:u,getcarf:m,removeproblem:d,getproblemscollaborator:p,removecollaborators:g,gethistorychat:f,getproblemreport:n};return M}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t,o,n){function r(){m.idproblem=t.localStorage.getItem("problemid"),o.getsemiotic(m.idproblem).success(function(e){e.success?m.semioticframework=e.semioticframework:n.errorMessage(e.message)})}function a(t,o){var n={text:t,update:o};e.emit("updateSocialWorld",n)}function i(t,o){var n={text:t,update:o};e.emit("updatePragmatic",n)}function s(t,o){var n={text:t,update:o};e.emit("updateSemantic",n)}function l(t,o){var n={text:t,update:o};e.emit("updateSyntatic",n)}function c(t,o){var n={text:t,update:o};e.emit("updateEmpirical",n)}function u(t,o){var n={text:t,update:o};e.emit("updatePhysical",n)}var m=this;m.idproblem="",m.saveSocialWorld=a,m.savePragmatic=i,m.saveSemantic=s,m.saveSyntatic=l,m.saveEmpirical=c,m.savePhysical=u,m.semioticframework="",m.initSemioticFramework=r,e.on("onUpdateSocialWorld",function(e){m.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){m.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){m.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,t){m.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){m.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){m.semioticframework.physical=e})}angular.module("app").controller("semioticframeworkController",e),e.$inject=["Socket","$window","problemService","toastApp"]}(),function(e){"use strict";function t(e,t,o,n,r){function a(){p.idproblem=t.localStorage.getItem("problemid"),p.localcode=t.localStorage.getItem("localcode"),o.getonion(p.idproblem).success(function(e){e.success?p.stakeholderList=e.stakeholders:r.errorMessage(e.message)}),p.inProcessing=!1}function i(t){e.emit("broadcastOnionSave",t)}function s(t){e.emit("broadcastOnionEdit",t)}function l(t,o){var n={index:t,stakeholder:o};e.emit("broadcastOnionRemove",n)}function c(e,t,o){var r=n.confirm().parent(angular.element(document.body)).title("Detete Stakeholder?").content("Title: "+o.name).ariaLabel("Remove Stakeholder").ok("Yes!").cancel("Cancel").targetEvent(e);n.show(r).then(function(){l(t,o)})}function u(t,o){var n={onionlayer:o,name:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px",zindex:9999};e.emit("broadcastOnionAdd",n)}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline;"),document.getElementById("legend"+e).setAttribute("opacity","0.7"),document.getElementById(e).setAttribute("opacity","0.7")}function d(e){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById("legend"+e).setAttribute("opacity","1.0"),document.getElementById(e).setAttribute("opacity","1.0")}var p=this;p.idproblem="",p.stakeholderList=[],p.stakeholder="",p.intitOnion=a,p.move=!1,p.inProcessing=!0,p.saveStakeholder=i,p.setOpenEdit=s,p.delPostIt=c,p.addPostIt=u,p.acende=m,p.apaga=d,p.localcode="",e.on("onBroadcastOnionSave",function(e){angular.forEach(p.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.zindex=9999)})}),e.on("onBroadcastOnionEdit",function(e){angular.forEach(p.stakeholderList,function(t){t._id===e&&(t.openEdit=!0,t.zindex=9999)})}),e.on("onBroadcastOnionRemove",function(e){var t=document.getElementById("stakeholder"+p.stakeholderList[e]._id);t.style.display="none",p.stakeholderList.splice(e,1)}),e.on("onBroadcastMove",function(e){p.localcode!==e.localcode&&(document.getElementById("stakeholder"+e._id).style.left=e.x,document.getElementById("stakeholder"+e._id).style.top=e.y)}),e.on("onBroadcastOnionAdd",function(e){p.stakeholderList.push(e)})}angular.module("app").controller("stakeholderController",t),t.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,t,o,n,r,a,i){function s(){h.userid=r.localStorage.getItem("userid"),h.nickname=r.localStorage.getItem("nickname"),h.useremail=r.localStorage.getItem("useremail"),h.photo=r.localStorage.getItem("photo"),a.getuserproblems(h.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description.length>300?e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,280):e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"");h.problemList=e.problems,a.getproblemscollaborator(h.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)null!==e.problems[t].description&&(e.problems[t].description.length>300?e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,280):e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,""));h.problemCollaboratorList=e.problems}else i.errorMessage(e.message)})}else i.errorMessage(e.message)}),h.loginInProgress=!1}function l(e){a.removeproblem(e).success(function(t){if(t.success){for(var o=0;o<h.problemList.length;o++)if(h.problemList[o]._id==e){h.problemList.splice(o,1);break}}else i.errorMessage(t.message)})}function c(t,o){var n=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+o.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(t);e.show(n).then(function(){l(o._id)})}function u(e){e.userid=h.userid,a.newproblem(e).success(function(e){e.success?h.editProblem(e.problem):i.errorMessage(e.message)})}function m(e){r.localStorage.setItem("problemid",e._id);var o={idproblem:e._id,nickname:h.nickname};n.emit("initProblem",o),t.go("problem.stakeholders")}function d(){o.logout(),t.go("init.login")}function p(){t.go("profile")}function g(t){e.show({controller:f,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:t})}function f(e,t,o){e.items=["LABEL_ARTIFACT_STAKEHOLDERS","LABEL_ARTIFACT_EVALUATIONFRAMEWORK","LABEL_ARTIFACT_SEMIOTICFRAMEWORK","LABEL_ARTIFACT_VIF","LABEL_ARTIFACT_CARF"],e.selected=[],e.toggle=function(e,o){var n=o.indexOf(e);n>-1?"LABEL_ARTIFACT_STAKEHOLDERS"!==e?o.splice(n,1):1==o.length?o.splice(n,1):i.errorMessage(t("translate")("LABEL_ARTIFACT_STAKEHOLDERS_NECESSARY")):(o.push(e),"LABEL_ARTIFACT_SEMIOTICFRAMEWORK"!=e&&(n=o.indexOf("LABEL_ARTIFACT_STAKEHOLDERS"),-1===n&&o.push("LABEL_ARTIFACT_STAKEHOLDERS")))},e.exists=function(e,t){return t.indexOf(e)>-1},e.isIndeterminate=function(){return 0!==e.selected.length&&e.selected.length!==e.items.length},e.isChecked=function(){return e.selected.length===e.items.length},e.toggleAll=function(){e.selected.length===e.items.length?e.selected=[]:(0===e.selected.length||e.selected.length>0)&&(e.selected=e.items.slice(0))},e.artifactList=[],e.hide=function(){o.hide()},e.cancel=function(){o.cancel()},e.addNewProblem=function(n){return e.selected.length<1?void i.errorMessage(t("translate")("LABEL_CHOICE_ARTIFACTS")):(n.artifacts=e.selected,h.startNewProblem(n),void o.cancel())}}var h=this;h.nickname="",h.userid="",h.useremail="",h.problemList=[],h.problemCollaboratorList=[],h.loginInProgress=!0,h.getProblems=s,h.revomveProblem=c,h.startNewProblem=u,h.editProblem=m,h.doLogout=d,h.newProblem=g,h.editProfile=p,h.photo,f.$inject=["$scope","$filter","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,n){function r(){u.idproblem=e.localStorage.getItem("problemid"),t.getonion(u.idproblem).success(function(e){if(e.success){if(e.stakeholders.length>0){for(var t=1;t<u.sugestionValuesArray.length;t++)u.sugestionValues+=u.sugestionValuesArray[t]+", ";u.sugestionValues[u.sugestionValuesArray[u.sugestionValuesArray.length-1]]+".";for(var n=0;n<e.stakeholders.length;n++)for(var r=0;r<u.stakeholderList.length;r++){var a={_id:e.stakeholders[n]._id,onionlayer:e.stakeholders[n].onionlayer,values:e.stakeholders[n].values,name:e.stakeholders[n].name,description:e.stakeholders[n].description,openEdit:e.stakeholders[n].openEdit,x:e.stakeholders[n].x,y:e.stakeholders[n].y,newValues:[]};e.stakeholders[n].onionlayer!=u.stakeholderList[r].onionlayer||u.stakeholderList[r].stakeholders.push(a)}}u.inProcessing=!1}else o.errorMessage(e.message)})}function a(e){e.openEdit=!0}function i(e){e.openEdit=!1}function s(e,t){for(var o=[],r=0;r<t.values.length;r++)t.values[r]!=e&&o.push(t.values[r]);t.values=o,n.emit("broadcastOnionSave",t)}function l(e){if(""===e.newValues||void 0===e.newValues)o.errorMessage("Valor não especificado.");else{for(var t=e.newValues.split(","),r=0;r<t.length;r++)c(e.values,t[r])?o.errorMessage("Duplicate value: "+t[r]):e.values.push(t[r]);e.newValues="",e.openEdit=!1,n.emit("broadcastOnionSave",e)}}function c(e,t){for(var o=0;o<e.length;o++)if(t===e[o])return!0;return!1}var u=this;u.inProcessing=!0,u.idProblem="",u.useremail="",u.newvalues="",u.initValueIdentificationFrame=r,u.setSuggestionShow=a,u.leaveSuggestionShow=i,u.removeValueIdentication=s,u.setValueIdentication=l,u.sugestionValues="",u.stakeholderList=[{onionlayer:"Community",stakeholders:[]},{onionlayer:"Market",stakeholders:[]},{onionlayer:"Source",stakeholders:[]},{onionlayer:"Contribution",stakeholders:[]},{onionlayer:"Technico",stakeholders:[]}],u.sugestionValuesArray=["Acessibilidade","Adaptabilidade","Estética","Autonomia","Disponibilidade","Consciência","Colaboração","Conversação","Emoção e Afeto","Grupos","Identidade","Consentimento informado","Meta-comunicação","Normas","Objeto","Portabilidade","Presença","Privacidade","Propriedade","Reciprocidade, Relacionamento, Reputação","Escalabilidade","Segurança","Compartilhamento","Confiança","Usabilidade","Visibilidade"],n.on("onBroadcastOnionSave",function(e){angular.forEach(u.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.newValues=[])})})}angular.module("app").controller("valueIdentificationFrameController",e),e.$inject=["$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,t,o,n){function r(){t.go("startproblem")}function a(){s.userid=e.localStorage.getItem("userid"),void 0!==s.userid}function i(t){var o={userid:e.localStorage.getItem("userid"),photo:t};n.uploadPhoto(o).success(function(o){o.success?e.localStorage.setItem("photo",t):toastApp.errorMessage("-----")})}var s=this;s.startProfile=a,s.uploadInProgress=!0,s.uploadProgress=0,s.userid,s.savePhoto=i,s.systemReturn=r,s.myImage="",s.myCroppedImage="";var l=function(e){var t=e.currentTarget.files[0],n=new FileReader;n.onload=function(e){o.$apply(function(t){t.myImage=e.target.result})},n.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",l)}angular.module("app").controller("profileController",e),e.$inject=["$window","$state","$scope","signupService"]}(),function(){"use strict";function e(e,t,o,n,r,a,i,s,l){function c(e){o.create(e).success(function(t){t.success?(r.errorMessage(s("translate")("WELCOME_SYSTEM")+e.nickname),n.go("init.login")):r.errorMessage("Email Já cadastrado")})}function u(t){e.use(t)}function m(e){o.rescuePassword(e).success(function(t){t.success?(r.errorMessage("Email com instruções enviado para "+e.email),n.go("init.login")):r.errorMessage("Error")})}function d(e){o.changePassword(e).success(function(e){e.success?(r.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),n.go("init.login")):r.errorMessage("Error")})}var p=this;p.message="",p.saveUser=c,p.rescuePassword=m,p.changePassword=d,p.setLang=u,p.loginInProgress=!1}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(i,t)}function n(t){return e.post(s,t)}function r(o){var n=t.search();return e.get(l+"?mytoken="+n.mytoken+"&password="+o.password)}function a(t){return e.post(c,t)}var i="/api/signup/",s="/api/rescuepasswd/",l="/api/rescuepasswd/newpasswd/",c="/api/profile/photo/",u={create:o,rescuePassword:n,changePassword:r,uploadPhoto:a};return u}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e){var t=e.extendPalette("teal",{50:"E0F2F1",100:"B2DFDB",200:"80CBC4",300:"4DB6AC",400:"26A69A",500:"009688",600:"00897B",700:"00796B",800:"00695C",900:"004D40",A100:"A7FFEB",A200:"64FFDA",A400:"1DE9B6",A700:"00BFA5",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0});e.definePalette("teal",t),e.theme("default").primaryPalette("teal").accentPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,t,o){var n={};return n.login=function(t,n){return e.post("/api/login",{email:t,password:n}).success(function(e){return o.setToken(e.token),e})},n.logout=function(){o.setToken()},n.isLoggedIn=function(){return o.getToken()?!0:!1},n.getUser=function(n){return o.getToken()?e.get("/api/me/?userid="+n):t.reject({message:"User has no token"})},n}]).factory("AuthToken",["$window",function(e){var t={};return t.getToken=function(){return e.localStorage.getItem("token")},t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token")},t}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,t,o){var n={};return n.request=function(e){var t=o.getToken();return t&&(e.headers["x-access-token"]=t),e},n}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket","$window",function(e,t,o){return{restrict:"A",replace:!0,link:function(n,r,a){function i(e){var t=e.target.id;"svg"==t&&(t=""),n.stakeholder.onionlayer=t,y=e.pageY,x=e.pageX,r.css({top:y+"px",left:x+"px"}),n.stakeholder.x=x+"px",n.stakeholder.y=y+"px"}function s(){e.unbind("mousemove",i),e.unbind("mouseup",s),t.emit("broadcastMove",n.stakeholder)}r.on("mousedown",function(t){"stakeholder"==t.target.id.substring(0,11)&&(n.stakeholder.localcode=o.localStorage.getItem("localcode"),t.preventDefault(),e.bind("mousemove",i),e.bind("mouseup",s))})}}}]),function(e){angular.module("appRxDrag",["rx"]).directive("rxdraggable",["$document","$window","rx","Socket",function(e,t,o,n){return function(r,a,i){var s=t.localStorage.getItem("localcode"),l=o.Observable.fromEvent(a,"mouseup"),c=o.Observable.fromEvent(e,"mousemove"),u=o.Observable.fromEvent(a,"mousedown").map(function(e){return e.preventDefault(),{left:e.clientX-a[0].getBoundingClientRect().left,top:e.clientY-a[0].getBoundingClientRect().top}}),m=u.selectMany(function(e){return c.map(function(t){return{left:t.clientX-e.left,top:t.clientY-e.top};
}).takeUntil(l)});m.subscribe(function(e){a.css({top:e.top+"px",left:e.left+"px"}),e.localcode=s,n.emit("broadcastMove",e)})}}])}.call(this),function(){"use strict";function e(e,t,o,n,r,a,i){function s(t){e.use(t)}function l(){return Math.random()+Math.floor(10*Math.random())}function c(e){m.inProcessing=!0,m.error="",n.login(e.email,e.password).success(function(e){r.localStorage.setItem("useremail",e.email),r.localStorage.setItem("userid",e.id),r.localStorage.setItem("localcode",e.id+"-"+l()),r.localStorage.setItem("nickname",e.nickname),m.setLang(e.language),m.inProcessing=!1,n.getUser(e.id).then(function(t){i.errorMessage(a("translate")("WELCOME_SYSTEM")+": "+e.nickname),e.success?(r.localStorage.setItem("photo",t.data.photo),o.go("startproblem")):i.errorMessage("Usuário e senha não conferem.")})})}function u(){n.logout(),o("init")}var m=this;m.inProcessing=!1,m.setLang=s,m.doLogout=u,m.doLogin=c,m.loggedIn=n.isLoggedIn(),t.$on("$routeChangeStart",function(){m.loggedIn=n.isLoggedIn(),n.getUser().then(function(e){m.user=e.data})})}angular.module("app").controller("loginController",e),e.$inject=["$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),function(){"use strict";angular.module("app").service("Socket",["$location","$timeout",function(e,t){this.socket=io(),this.on=function(e,o){this.socket&&this.socket.on(e,function(e){t(function(){o(e)})})},this.emit=function(e,t){this.socket&&this.socket.emit(e,t)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRzYy5hcHAuanMiLCJ0b2FzdC5zZXJ2aWNlLmpzIiwicm91dGVyLmFwcC5qcyIsImFwcC5kc2MubWluLmpzIiwibGFuZ3VhZ2UvdHJhbnNsYXRlLmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL2NhcmYuY29udHJvbGxlci5qcyIsInByb2JsZW0vY2hhdC5jb250cm9sbGVyLmpzIiwicHJvYmxlbS9kc2NyZXNwb3J0LmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL2V2YWx1YXRpb25mcmFtZXdvcmsuY29udHJvbGxlci5qcyIsInByb2JsZW0vbWVudS5wcm9ibGVtLmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL29uaW9uLmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL29uaW9uLmVkaXQuY29udHJvbGxlci5qcyIsInByb2JsZW0vcHJvYmxlbS5yZXBvcnQuY29udHJvbGxlci5qcyIsInByb2JsZW0vcHJvYmxlbS5zZXJ2aWNlLmpzIiwicHJvYmxlbS9zZW1pb3RpY2ZyYW1ld29yay5lZGl0LmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL3N0YWtlaG9sZGVyLmVkaXQuY29udHJvbGxlci5qcyIsInByb2JsZW0vc3RhcnQucHJvYmxlbS5jb250cm9sbGVyLmpzIiwicHJvYmxlbS92YWx1ZWRlbnRpZmljYXRpb25mcmFtZS5jb250cm9sbGVyLmpzIiwidXNlci9wcm9maWxlLmNvbnRyb2xsZXIuanMiLCJ1c2VyL3NpZ251cC5jb250cm9sbGVyLmpzIiwidXNlci9zaWdudXAuc2VydmljZS5qcyIsImFwcC5jb25maWcuanMiLCJhdXRoLnNlcnZpY2UuanMiLCJkcmFnLmRzYy5qcyIsImRyYWdyeC5kc2MuanMiLCJsb2dpbi5jb250cm9sbGVyLmpzIiwic29ja2V0LnNlcnZpY2UuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRodHRwUHJvdmlkZXIiLCJpbnRlcmNlcHRvcnMiLCJwdXNoIiwidG9hc3RBcHAiLCIkbWRUb2FzdCIsImVycm9yTWVzc2FnZSIsInRoaXMiLCJtZXNzYWdlIiwic2hvdyIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJ0ZW1wbGF0ZVVybCIsImFjdGlvbiIsImhpZ2hsaWdodEFjdGlvbiIsInBvc2l0aW9uIiwiaGlkZURlbGF5Iiwic2VydmljZSIsInNlbGYiLCJjbG9zZVRvYXN0IiwiaGlkZSIsImZhY3RvcnkiLCIkaW5qZWN0Iiwicm91dGVzIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJzdGF0ZSIsInVybCIsInZpZXdzIiwiY29udGVudC10YWIiLCJkc2MtYXJ0aWZhY3QiLCJvdGhlcndpc2UiLCJpbml0TGFuZ3VhZ2UiLCIkdHJhbnNsYXRlUHJvdmlkZXIiLCJ1c2VTdGF0aWNGaWxlc0xvYWRlciIsInByZWZpeCIsInN1ZmZpeCIsInByZWZlcnJlZExhbmd1YWdlIiwidXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5IiwidXNlTG9jYWxTdG9yYWdlIiwibGFuZ3VhZ2VDb250cm9sbGVyIiwiJHRyYW5zbGF0ZSIsInNldExhbmciLCJsYW5nS2V5IiwidXNlIiwiY2hhbmdlTGFuZ3VhZ2UiLCJyZXN0cmljdCIsImRpcmVjdGl2ZSIsImNhcmZDb250cm9sbGVyIiwiJHdpbmRvdyIsIlNvY2tldCIsInByb2JsZW1TZXJ2aWNlIiwiaW5pdENhcmYiLCJpZFByb2JsZW0iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiZ2V0Y2FyZiIsInN1Y2Nlc3MiLCJkYXRhIiwibG9jYWxTdGFrZWhvbGRlcnMiLCJzdGFrZWhvbGRlcnMiLCJzdGFrZWhvbGRlckxpc3QiLCJjYXJmTGlzdCIsImNhcmYiLCJjYXJmUHJpb3JpdHlMaXN0IiwibG9jYWxQcmlvcml0eUxpc3QiLCJpblByb2Nlc3NpbmciLCJyZXNldENhcmYiLCJfaWQiLCJwbXMiLCJ2YWx1ZXMiLCJwcmlvcml0eSIsInJlcXVpcmVtZW50IiwidmFsdWVMaXN0IiwiYWRkcG1zdmFsdWUiLCJsZW5ndGgiLCJlbWl0IiwicmVtb3ZlQ0FSRiIsImluZGV4Iiwib2JqIiwic2VsZWN0UE1TVmFsdWUiLCJ1bmRlZmluZWQiLCJmb3JFYWNoIiwiY2FyZlBNU1ZhbHVlIiwicG1zX3ZhbHVlIiwic2V0UHJpb3RpdHkiLCJhZGRMaXN0VmFsdWUiLCJuZXd2YWx1ZSIsImkiLCJzcGxpY2UiLCJhZGRTdGFrZWhvbGRlciIsIm5ld1N0YWtlaG9sZGVyIiwib24iLCJpZCIsImNoYXREU0MiLCIkdGltZW91dCIsIm9wZW5DaGF0IiwiaXNPcGVuQ2hhdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJmb2N1cyIsImluaXRIaXN0b3J5Q2hhdCIsIm5pY2tuYW1lIiwicGhvdG8iLCJnZXRoaXN0b3J5Y2hhdCIsImhpc3RvcnljaGF0IiwidG1wIiwiRGF0ZSIsInRpbWUiLCJtc24iLCJtc2ciLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsIm1lc3NhZ2VzIiwic2hvd1JlcGxheSIsInJlcGxheSIsInNlbmRNZXNzYWdlIiwiY2hhdG1zZyIsIm5ld21zZyIsImNvbnRhZG9yIiwiemVyYXJDb250YWRvciIsImtleXByZXNzQ2hhdCIsImV2ZW50Iiwia2V5Q29kZSIsInVzZXJMaXN0IiwiZHNjUmVwb3J0Q29udHJvbGxlciIsImJ1aWRSZXBvcnQiLCJlbGVtZW50IiwiaHRtbCIsInBkZiIsImpzUERGIiwiYWRkSFRNTCIsInBhZ2VzcGxpdCIsImRpc3Bvc2UiLCJzYXZlIiwiaWRwcm9ibGVtIiwiZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXIiLCJpbml0RXZhbHVhdGlvbiIsImdldGV2YWx1YXRpb24iLCJldmFsdWF0aW9uZnJhbWV3b3JrTGlzdCIsImV2YWx1YXRpb25mcmFtZXdvcmsiLCJzYXZlRnJhbWUiLCJzdGFrZWhvbGRlciIsInNldE9wZW5FZGl0RGlzY3V0aW9uIiwiY3VycmVudFN0YWtlaG9sZGVyIiwib3BlbkVkaXQiLCJvbmlvbmxheWVyIiwibmFtZSIsImRlc2NyaXB0aW9uIiwicHJvYmxlbXMiLCJzb2x1dGlvbnMiLCJzdGFrZWhvbGRlck9uaW9uIiwibWVudVByb2JsZW1hQ29udHJvbGxlciIsIkF1dGgiLCIkbWREaWFsb2ciLCIkc2NvcGUiLCIkZmlsdGVyIiwiJHN0YXRlIiwic2F2ZVByb2JsZW0iLCJwcm9ibGVtIiwibG9jYWxjb2RlIiwiZm9ybUVkaXRQcm9ibGVtIiwiZXYiLCJEaWFsb2dFZGl0UHJvYmxlbUNvbnRyb2xsZXIiLCJwYXJlbnQiLCJib2R5IiwidGFyZ2V0RXZlbnQiLCJnZXRQcm9ibGVtRWRpdCIsImdldHByb2JsZW0iLCJzZXRVcGRhdGUiLCJ1cGRhdGVUcnVlIiwicHJvYmxlbVVwZGF0ZSIsInVwZGF0ZSIsInNhdmVEZXNjcmlwdGlvbiIsImNhbmNlbCIsImZvcm1JbnZpdGVDb2xsYWJvcmF0b3IiLCJEaWFsb2dJbnZpdGVDb2xsYWJvcmF0b3JDb250cm9sbGVyIiwiaW5pdENvbGxhYm9yYXRvcnMiLCJ1c2VyZW1haWwiLCJnZXRjb2xsYWJvcmF0b3JzIiwiY29uc29sZSIsImxvZyIsImNvbGxhYm9yYXRvcnMiLCJzZWFyY2hDYWxsYWJvcmF0aW9uIiwiZW1haWwiLCJhZGRDb2xsYWJvcmF0b3IiLCJpbnZpdGUiLCJyZW1vdmVDb2xsYWJvcmF0b3IiLCJwZW9wbGUiLCJyZW1vdmVjb2xsYWJvcmF0b3JzIiwiZ2V0Q3VycmVudFByb2JsZW0iLCJhcnRpZmFjdHMiLCJhcnRpZmFjdCIsInNwbGl0IiwiZHNjX2FydGlmYWN0cyIsInRvTG93ZXJDYXNlIiwibGFiZWwiLCJpbml0c29ja2V0cHJvYmxlbSIsInN5c3RlbVJldHVybiIsImdvIiwiZm9ybUFkZENvbGxhYm9yYXRvcnMiLCJmb3JtUHJvYmxlbVJlcG9ydCIsImVkaXREZXNjcmlwdGlvblByb2JsZW0iLCJkb0xvZ291dCIsImxvZ291dCIsInJldG9ybm8iLCJzZXREZXNjcml0aW9uIiwic2VsZWN0ZWRJbmRleCIsInNlbGVjdGVkIiwicHJldmlvdXMiLCIkd2F0Y2giLCJjdXJyZW50Iiwib25pb25Db250cm9sbGVyIiwiaW50aU15dE9uaW9uIiwic2F2ZVBvc3RJdE9uaW9uIiwiZWRpdFBvc3RJdE9uaW9uIiwiZGVsUG9zdEl0T25pb24iLCJhZGRQb3N0SXRPbmlvbiIsIm9uT25pb24iLCJvZmZPbmlvbiIsIm9uaW9uM0xheWVyQ29udHJvbGxlciIsImluaXRPbmlvbjNMYXllciIsInNhdmVPbmlvbjNMYXllciIsInBvc3RpdCIsInNldE9wZW5FZGl0IiwicmVtb3ZlUG9zdEl0IiwiZGVsUG9zdEl0IiwiY29uZmlybSIsInRpdGxlIiwiY29udGVudCIsIm9uaW9uIiwiYXJpYUxhYmVsIiwib2siLCJ0aGVuIiwiYWRkUG9zdEl0IiwiZSIsImNhbWFkYSIsIngiLCJwYWdlWCIsInkiLCJ6aW5kZXgiLCJhY2VuZGUiLCJzZXRBdHRyaWJ1dGUiLCJhcGFnYSIsImNvbG9yIiwibW92ZSIsIm9uaW9uM0xheWVyTGlzdCIsIm9uaW9uM0xheWVyIiwic3R5bGUiLCJkaXNwbGF5IiwibGVmdCIsInRvcCIsInByb2JsZW1SZXBvcnRDb250cm9sbGVyIiwiaW5pdFByb2JsZW1QZXBvcnQiLCJnZXRwcm9ibGVtcmVwb3J0IiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCIkaHR0cCIsIiRsb2NhdGlvbiIsIm5ld3Byb2JsZW0iLCJwb3N0IiwiQVBJX1JPVVRFX05FV1BST0JMRU0iLCJnZXQiLCJBUElfUk9VVEVfR0VUUFJPQkxFTVJFUE9SVCIsIkFQSV9ST1VURV9HRVRQUk9CTEVNIiwiZ2V0dXNlcnByb2JsZW1zIiwiQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNUyIsIkFQSV9ST1VURV9HRVRDT0xMQUJPUkFUT1JTIiwiQVBJX1JPVVRFX0lOVklURSIsImdldG9uaW9uIiwiQVBJX1JPVVRFX0dFVE9OSU9OIiwiQVBJX1JPVVRFX0dFVEVWQUxVQVRJT04iLCJnZXRzZW1pb3RpYyIsIkFQSV9ST1VURV9HRVRTRU1JT1RJQ0ZSQU1FV09SSyIsIkFQSV9ST1VURV9HRVRDQVJGIiwicmVtb3ZlcHJvYmxlbSIsIkFQSV9ST1VURV9SRU1PVkVQUk9CTEVNIiwiZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3IiLCJBUElfUk9VVEVfR0VUVVNFUlBST0JMRU1TQ09MTEFCT1JBVE9SIiwiQVBJX1JPVVRFX1JFTU9WRUNPTExBQk9SQVRPUiIsIkFQSV9ST1VURV9HRVRISVNUT1JZQ0hBVCIsInNlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlciIsImluaXRTZW1pb3RpY0ZyYW1ld29yayIsInNlbWlvdGljZnJhbWV3b3JrIiwic2F2ZVNvY2lhbFdvcmxkIiwidGV4dCIsImZsYWdTYXZlIiwic2F2ZVByYWdtYXRpYyIsInNhdmVTZW1hbnRpYyIsInNhdmVTeW50YXRpYyIsInNhdmVFbXBpcmljYWwiLCJzYXZlUGh5c2ljYWwiLCJzb2NpYWx3b3JsZCIsInByYWdtYXRpYyIsInNlbWlvdGljcmFtZXdvcmsiLCJzeW50YXRpYyIsImVtcGlyaWNhbCIsInBoeXNpY2FsIiwic3Rha2Vob2xkZXJDb250cm9sbGVyIiwiaW50aXRPbmlvbiIsInNhdmVTdGFrZWhvbGRlciIsInN0YXJ0UHJvYmxlbUNvbnRyb2xsZXIiLCJnZXRQcm9ibGVtcyIsInVzZXJpZCIsInJlcGxhY2UiLCJwcm9ibGVtTGlzdCIsInByb2JsZW1Db2xsYWJvcmF0b3JMaXN0IiwibG9naW5JblByb2dyZXNzIiwiZGVsZXRlUHJvYmxlbSIsInByb2JsZW1pZCIsInJldm9tdmVQcm9ibGVtIiwic3RhcnROZXdQcm9ibGVtIiwiZWRpdFByb2JsZW0iLCJzZXRJdGVtIiwiZWRpdFByb2ZpbGUiLCJuZXdQcm9ibGVtIiwiRGlhbG9nQ29udHJvbGxlciIsIml0ZW1zIiwidG9nZ2xlIiwiaXRlbSIsImxpc3QiLCJpZHgiLCJpbmRleE9mIiwiZXhpc3RzIiwiaXNJbmRldGVybWluYXRlIiwiaXNDaGVja2VkIiwidG9nZ2xlQWxsIiwic2xpY2UiLCJhcnRpZmFjdExpc3QiLCJhZGROZXdQcm9ibGVtIiwidmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lQ29udHJvbGxlciIsImluaXRWYWx1ZUlkZW50aWZpY2F0aW9uRnJhbWUiLCJrIiwic3VnZXN0aW9uVmFsdWVzQXJyYXkiLCJzdWdlc3Rpb25WYWx1ZXMiLCJqIiwibmV3VmFsdWVzIiwic2V0U3VnZ2VzdGlvblNob3ciLCJsZWF2ZVN1Z2dlc3Rpb25TaG93IiwicmVtb3ZlVmFsdWVJZGVudGljYXRpb24iLCJ2YWx1ZSIsIm5ld0xpc3QiLCJzZXRWYWx1ZUlkZW50aWNhdGlvbiIsInZhbHVlc0xpc3QiLCJmaW5kVmFsdWUiLCJuZXd2YWx1ZXMiLCJwcm9maWxlQ29udHJvbGxlciIsInNpZ251cFNlcnZpY2UiLCJzdGFydFByb2ZpbGUiLCJzYXZlUGhvdG8iLCJteWltYWdlIiwidXNlclBob3RvIiwidXBsb2FkUGhvdG8iLCJ1cGxvYWRJblByb2dyZXNzIiwidXBsb2FkUHJvZ3Jlc3MiLCJteUltYWdlIiwibXlDcm9wcGVkSW1hZ2UiLCJoYW5kbGVGaWxlU2VsZWN0IiwiZXZ0IiwiZmlsZSIsImN1cnJlbnRUYXJnZXQiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCIkYXBwbHkiLCJ0YXJnZXQiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwicXVlcnlTZWxlY3RvciIsInNpZ251cENvbnRyb2xsZXIiLCJBdXRoVG9rZW4iLCIkc3RhdGVQYXJhbXMiLCJzYXZlVXNlciIsInVzZXIiLCJjcmVhdGUiLCJyZXNjdWVQYXNzd29yZCIsInVzZXJFbWFpbCIsImNoYW5nZVBhc3N3b3JkIiwiQVBJX1JPVVRFX1VTRVIiLCJBUElfUk9VVEVfUkVTQ1VFUEFTU1dPUkQiLCJteXRva2VuVVJMIiwic2VhcmNoIiwiQVBJX1JPVVRFX1NFVE5FV1BBU1NXT1JEIiwibXl0b2tlbiIsInBhc3N3b3JkIiwiQVBJX1JPVVRFX1VQREFURVBIT1RPIiwiYXBwQ29uZmlnIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwibmVvblJlZE1hcCIsImV4dGVuZFBhbGV0dGUiLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJjb250cmFzdERlZmF1bHRDb2xvciIsImNvbnRyYXN0RGFya0NvbG9ycyIsImNvbnRyYXN0TGlnaHRDb2xvcnMiLCJkZWZpbmVQYWxldHRlIiwidGhlbWUiLCJwcmltYXJ5UGFsZXR0ZSIsImFjY2VudFBhbGV0dGUiLCIkcSIsImF1dGhGYWN0b3J5IiwibG9naW4iLCJzZXRUb2tlbiIsInRva2VuIiwiaXNMb2dnZWRJbiIsImdldFRva2VuIiwiZ2V0VXNlciIsInJlamVjdCIsImF1dGhUb2tlbkZhY3RvcnkiLCJyZW1vdmVJdGVtIiwiaW50ZXJjZXB0b3JGYWN0b3J5IiwicmVxdWVzdCIsImhlYWRlcnMiLCIkZG9jdW1lbnQiLCJsaW5rIiwic2NvcGUiLCJhdHRyIiwibW91c2Vtb3ZlIiwiaWRfZGl2IiwicGFnZVkiLCJjc3MiLCJtb3VzZXVwIiwidW5iaW5kIiwicHJldmVudERlZmF1bHQiLCJiaW5kIiwicngiLCJhdHRycyIsIk9ic2VydmFibGUiLCJmcm9tRXZlbnQiLCJtb3VzZWRvd24iLCJtYXAiLCJjbGllbnRYIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WSIsIm1vdXNlZHJhZyIsInNlbGVjdE1hbnkiLCJpbWFnZU9mZnNldCIsInBvcyIsInRha2VVbnRpbCIsInN1YnNjcmliZSIsImNhbGwiLCJsb2dpbkNvbnRyb2xsZXIiLCIkcm9vdFNjb3BlIiwiZ2V0TG9jYWxDb2RlIiwiTWF0aCIsInJhbmRvbSIsImZsb29yIiwiZG9Mb2dpbiIsImVycm9yIiwibGFuZ3VhZ2UiLCJ1c2VyRGF0YSIsImxvZ2dlZEluIiwiJG9uIiwic29ja2V0IiwiaW8iLCJldmVudE5hbWUiLCJjYWxsYmFjayIsInJlbW92ZUxpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQ0FHQSxXQUNBLFlBRUFBLFNBQ0FDLE9BQUEsT0FBQSxZQUFBLGVBQUEsY0FBQSxtQkFBQSxZQUFBLFVBQUEsY0FBQSxZQUFBLGFBQUEsWUFBQSxZQUFBLDJCQUNBQyxRQUFB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LE9BQUF6WCxHQUFBMlgsRUFBQSxTQUFBN1osR0FDQXFDLEVBQUEsV0FDQXlYLEVBQUE5WixRQU1BbkQsS0FBQXFFLEtBQUEsU0FBQTJZLEVBQUE3WixHQUNBbkQsS0FBQThjLFFBQ0E5YyxLQUFBOGMsT0FBQXpZLEtBQUEyWSxFQUFBN1osSUFJQW5ELEtBQUFrZCxlQUFBLFNBQUFGLEdBQ0FoZCxLQUFBOGMsUUFDQTljLEtBQUE4YyxPQUFBSSxlQUFBRiIsImZpbGUiOiJhcHAuZHNjLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjUvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcsWyduZ0ltZ0Nyb3AnLCd0b2FzdFNlcnZpY2UnLCd0ZXh0QW5ndWxhcicsJ2x1ZWdnLmRpcmVjdGl2ZXMnLCAnYXBwUnhEcmFnJywgJ0Ryb3BEU0MnLCdhdXRoU2VydmljZScsJ3VpLnJvdXRlcicsJ25nTWF0ZXJpYWwnLCduZ01kSWNvbnMnLCduZ0Nvb2tpZXMnLCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJ10pXHJcbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbigkaHR0cFByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ0F1dGhJbnRlcmNlcHRvcicpO1xyXG4gICAgICAgIH0pXHJcblxyXG59KSgpO1xyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjcvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgndG9hc3RTZXJ2aWNlJyxbXSlcclxuICAgICAgICAuY29udHJvbGxlcigndG9hc3RDb250cm9sbGVyJywgZnVuY3Rpb24oJG1kVG9hc3QsdG9hc3RBcHApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2UgPSAgdG9hc3RBcHAubWVzc2FnZTtcclxuICAgICAgICAgICAgc2VsZi5jbG9zZVRvYXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZmFjdG9yeSggJ3RvYXN0QXBwJywgdG9hc3RBcHAgKTtcclxuXHJcbiAgICB0b2FzdEFwcC4kaW5qZWN0ID0gWyAnJG1kVG9hc3QnIF07XHJcblxyXG4gICAgZnVuY3Rpb24gdG9hc3RBcHAgKCRtZFRvYXN0KSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8qZnVuY3Rpb24gZXJyb3JNZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudChlcnJvck1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDgwMClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXJyb3JNZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3RvYXN0Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvZHNjdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIk9LXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QWN0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcCByaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhpZGVEZWxheTogMjAwMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyNS8wNi8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbmZpZyhyb3V0ZXMpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdXRlcygkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcblxyXG5cclxuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnaW5pdCcsIHtcclxuICAgICAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvaW5pdHBhZ2UuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdpbml0LmxvZ2luJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnbG9naW4nLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY29udGVudC10YWInOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvdXNlcmxvZ2luLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbG9naW5Db250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdpbml0LnNpZ251cCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJ3NpZ251cCcsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50LXRhYic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zaWdudXAuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaWdudXBDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdpbml0LnJlc2N1ZXBhc3N3b3JkJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAncmVzY3VlcGFzc3dvcmQnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY29udGVudC10YWInOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcmVzY3VlcGFzc3dvcmQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaWdudXBDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdzdGFydHByb2JsZW0nLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvc3RhcnRwcm9ibGVtJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvc3RhcnRwcm9ibGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3N0YXJ0UHJvYmxlbUNvbnRyb2xsZXIgYXMgdm0nXHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3Byb2ZpbGUnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcHJvZmlsZScsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3Byb2ZpbGUuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvZmlsZUNvbnRyb2xsZXIgYXMgdm0nXHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2RzY3JlcG9ydCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9kc2NyZXBvcnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3Byb2JsZW1yZXBvcnQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9ibGVtUmVwb3J0Q29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCduZXdwYXNzd29yZCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9uZXdwYXNzd29yZC86bXl0b2tlbicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL25ld3Bhc3N3b3JkLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvYmxlbScsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9wcm9ibGVtJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcHJvYmxlbS5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtZW51UHJvYmxlbUNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgLyogLnN0YXRlKCdwcm9ibGVtLmRlc2NyaXB0aW9uJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2Rlc2NyaXB0aW9uJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Byb2JsZW0tZGVzY3JpcHRpb24nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcHJvYmxlbWRlc2NyaXB0aW9uLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZWRpdFByb2JsZW1Db250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkqL1xyXG4gICAgICAgICAgICAvKi5zdGF0ZSgncHJvYmxlbS5jb2xsYWJvcmF0b3JzJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvbGxhYm9yYXRvcnMnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAncHJvYmxlbS1kZXNjcmlwdGlvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9jb2xsYWJvcmF0b3JzLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnY29udHJvbGxlckNvbGxhYm9yYXRvcnMgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSovXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvYmxlbS5zdGFrZWhvbGRlcnMnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvc3Rha2Vob2xkZXJzJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zdGFrZWhvbGRlcnMuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzdGFrZWhvbGRlckNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3Byb2JsZW0uZXZhbHVhdGlvbmZyYW1ld29yaycsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9ldmFsdWF0aW9uZnJhbWV3b3JrJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9ldmFsdWF0aW9uZnJhbWV3b3JrLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLnNlbWlvdGljZnJhbWV3b3JrJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3NlbWlvdGljZnJhbWV3b3JrJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zZW1pb3RpY2ZyYW1ld29yay5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvYmxlbS5jYXJmJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2NhcmYnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnZHNjLWFydGlmYWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL2NhcmYuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjYXJmQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvYmxlbS52aWYnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvdmlmJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy92aWYuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd2YWx1ZUlkZW50aWZpY2F0aW9uRnJhbWVDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLm9uaW9uJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL29uaW9uJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9vbmlvbi5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ29uaW9uM0xheWVyQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9sb2dpbicpO1xyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsbnVsbCwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAxOS8wNi8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoaW5pdExhbmd1YWdlKVxyXG4gICAgLmNvbnRyb2xsZXIoJ2xhbmd1YWdlQ29udHJvbGxlcicsbGFuZ3VhZ2VDb250cm9sbGVyKVxyXG4gICAgLmRpcmVjdGl2ZSgnY2hhbmdlTGFuZ3VhZ2UnLGNoYW5nZUxhbmd1YWdlKTtcclxuXHJcbmluaXRMYW5ndWFnZS4kaW5qZWN0ID0gWyckdHJhbnNsYXRlUHJvdmlkZXInXTtcclxubGFuZ3VhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnXTtcclxuXHJcbmZ1bmN0aW9uIGluaXRMYW5ndWFnZSAoJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZVN0YXRpY0ZpbGVzTG9hZGVyKHtcclxuICAgICAgICAgICAgcHJlZml4OiAnYXBwL2xhbmd1YWdlL2xhbmctJyxcclxuICAgICAgICAgICAgc3VmZml4OiAnLmpzb24nXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnByZWZlcnJlZExhbmd1YWdlKCdlbicpO1xyXG4gICAgICAgICR0cmFuc2xhdGVQcm92aWRlci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3koJ2VzY2FwZWQnKTtcclxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTG9jYWxTdG9yYWdlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxhbmd1YWdlQ29udHJvbGxlciAoJHRyYW5zbGF0ZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5zZXRMYW5nID0gc2V0TGFuZztcclxuICAgIGZ1bmN0aW9uIHNldExhbmcobGFuZ0tleSkge1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlLnVzZShsYW5nS2V5KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlTGFuZ3VhZ2UoKXtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdGVtcGxhdGVVcmwgOiBcImFwcC9sYW5ndWFnZS9jaGFuZ2VMYW5ndWFnZS5odG1sXCIsXHJcbiAgICAgICAgcmVzdHJpY3Q6IFwiRVwiXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAxNC8wNy8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoXCJjYXJmQ29udHJvbGxlclwiLGNhcmZDb250cm9sbGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjYXJmQ29udHJvbGxlcigkd2luZG93LFNvY2tldCxwcm9ibGVtU2VydmljZSx0b2FzdEFwcCl7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmlkUHJvYmxlbSA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYudmFsdWVMaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBbXTtcclxuICAgICAgICBzZWxmLmxvY2FsU3Rha2Vob2xkZXJzID0gW107XHJcbiAgICAgICAgc2VsZi5hZGRwbXN2YWx1ZSA9IGFkZHBtc3ZhbHVlO1xyXG4gICAgICAgIHNlbGYucmVtb3ZlQ0FSRiA9IHJlbW92ZUNBUkY7XHJcbiAgICAgICAgc2VsZi5zZWxlY3RQTVNWYWx1ZSA9IHNlbGVjdFBNU1ZhbHVlO1xyXG4gICAgICAgIHNlbGYuc2V0UHJpb3RpdHkgPSBzZXRQcmlvdGl0eTtcclxuICAgICAgICBzZWxmLmFkZExpc3RWYWx1ZSA9IGFkZExpc3RWYWx1ZTtcclxuICAgICAgICBzZWxmLmFkZFN0YWtlaG9sZGVyID0gYWRkU3Rha2Vob2xkZXI7XHJcbiAgICAgICAgc2VsZi5jYXJmID0ge1xyXG4gICAgICAgICAgICBwbXM6IFwiXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW10sXHJcbiAgICAgICAgICAgIHByaW9yaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICByZXF1aXJlbWVudDogXCJcIixcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXJzOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuaW5pdENhcmYgPSBpbml0Q2FyZjtcclxuICAgICAgICBzZWxmLmNhcmZMaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5jYXJmUHJpb3JpdHlMaXN0ID0gW107XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGluaXRDYXJmKCl7XHJcbiAgICAgICAgICAgIHNlbGYuaWRQcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGNhcmYoc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9jYWxTdGFrZWhvbGRlcnMgPSBkYXRhLnN0YWtlaG9sZGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBzZWxmLmxvY2FsU3Rha2Vob2xkZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmZMaXN0ID0gZGF0YS5jYXJmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmZQcmlvcml0eUxpc3QgPSBzZWxmLmxvY2FsUHJpb3JpdHlMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmluUHJvY2Vzc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVzZXRDYXJmKCl7XHJcbiAgICAgICAgICAgIHNlbGYuY2FyZiA9IHtcclxuICAgICAgICAgICAgICAgIF9pZDogXCJcIixcclxuICAgICAgICAgICAgICAgIHBtczogXCJcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlczogW10sXHJcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVtZW50OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXJzOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzZWxmLnZhbHVlTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RDQVJGYWRkJywgZnVuY3Rpb24gKGNhcmYpIHtcclxuICAgICAgICAgICAgc2VsZi5jYXJmTGlzdC5wdXNoKGNhcmYpO1xyXG4gICAgICAgICAgICByZXNldENhcmYoKTtcclxuICAgICAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBzZWxmLmxvY2FsU3Rha2Vob2xkZXJzO1xyXG4gICAgICAgICAgICBzZWxmLmNhcmZQcmlvcml0eUxpc3QgPSBzZWxmLmxvY2FsUHJpb3JpdHlMaXN0O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRwbXN2YWx1ZShjYXJmKXtcclxuXHJcbiAgICAgICAgICAgIGlmKGNhcmYucG1zID09PSBcIlwiKXtcclxuICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlNlbGVjdCBQTVNcIik7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgaWYoY2FyZi52YWx1ZXMubGVuZ3RoIDwgMSApe1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlNlbGVjdCBvbmUgb3IgbW9yZSBWYWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNhcmYuc3Rha2Vob2xkZXJzLmxlbmd0aCA8IDEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJTZWxlY3Qgb25lIG9yIG1vcmUgU3Rha2Vob2xkZXIocylcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhcmYucHJpb3JpdHkgPT09IFwiXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiU2VsZWN0IHByaW9yaXR5IFtMb3csIE1lZGl1bSBvciBIaWdoXVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0Q0FSRmFkZCcsIGNhcmYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FyZlByaW9yaXR5TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdENBUkZyZW1vdmUnLCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgc2VsZi5jYXJmTGlzdC5zcGxpY2UoaWQsMSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNBUkYoaW5kZXgsY2FyZil7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBjYXJmOiBjYXJmXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RDQVJGcmVtb3ZlJywgb2JqKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZWxlY3RQTVNWYWx1ZShwbXMpe1xyXG4gICAgICAgICAgICBpZihwbXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuY2FyZlBNU1ZhbHVlLCBmdW5jdGlvbiAocG1zX3ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBtc192YWx1ZS5wbXMgPT0gcG1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FyZi52YWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi52YWx1ZUxpc3QgPSBwbXNfdmFsdWUudmFsdWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldFByaW90aXR5KHByaW9yaXR5KXtcclxuICAgICAgICAgICAgc2VsZi5jYXJmLnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRMaXN0VmFsdWUobmV3dmFsdWUpe1xyXG4gICAgICAgICAgIGlmKHNlbGYuY2FyZi52YWx1ZXMubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgICAgIHNlbGYuY2FyZi52YWx1ZXMucHVzaChuZXd2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmNhcmYudmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAobmV3dmFsdWUgPT0gc2VsZi5jYXJmLnZhbHVlc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FyZi52YWx1ZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBzZWxmLmNhcmYudmFsdWVzLnB1c2gobmV3dmFsdWUpO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZFN0YWtlaG9sZGVyKG5ld1N0YWtlaG9sZGVyKXtcclxuICAgICAgICAgICAgaWYoc2VsZi5jYXJmLnN0YWtlaG9sZGVycy5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jYXJmLnN0YWtlaG9sZGVycy5wdXNoKG5ld1N0YWtlaG9sZGVyKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHNlbGYuY2FyZi5zdGFrZWhvbGRlcnMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG5ld1N0YWtlaG9sZGVyID09IHNlbGYuY2FyZi5zdGFrZWhvbGRlcnNbaV0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmYuc3Rha2Vob2xkZXJzLnNwbGljZShpLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5jYXJmLnN0YWtlaG9sZGVycy5wdXNoKG5ld1N0YWtlaG9sZGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5sb2NhbFByaW9yaXR5TGlzdCA9IFsnTG93JywgJ01lZGl1bScsJ0hpZ2gnXTtcclxuXHJcbiAgICAgICAgc2VsZi5jYXJmUE1TVmFsdWUgPSBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJJbnRlcmFjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJJZGVudGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIk5vcm1zXCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiQXNzb2NpYXRpb25cIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udmVyc2F0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiR3JvdXBzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVsYXRpb25zaGlwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVHJ1c3RcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJMZWFybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJNZXRhLWNvbW11bmljYXRpb25cIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJQbGF5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkFlc3RoZXRpY3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJFbW90aW9uIGFuZCBBZmZlY3Rpb25cIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJQcm90ZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkluZm9ybWVkIGNvbnNlcnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJSZXB1dGF0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU2VjdXJpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJFeHBsb2l0YXRpb25cIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQWNjZXNzaWJpbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIk9iamVjdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlByb3BlcnR5IChvd25lcnNoaXApXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVXNhYmlsaXR5XCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiVGVwb3JhbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBdmFpbGFiaWxpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBd2FyZW5lc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQcmVzZW5jZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcInBtc1wiOiBcIlRlcnJpdG9yaWFsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlBvcnRhYmlsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUHJpdmFjeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlNjYWxhYmlsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVmlzaWJpbGl0eVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcInBtc1wiOiBcIkNsYXNzaWZpY2F0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkF1dG9ub215XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29sbGFib3JhdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlNoYXJpbmdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBZGFwdGFiaWxpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJTdWJzaXN0ZW5jZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWNpcHJvY2l0eVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDE1LzA3LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ2NoYXREU0MnLGNoYXREU0MpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNoYXREU0MoJHRpbWVvdXQsIFNvY2tldCwgcHJvYmxlbVNlcnZpY2UsICR3aW5kb3cpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYubmV3bXNnID0gXCJcIjtcclxuICAgICAgICBzZWxmLm1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgc2VsZi5yZXBsYXkgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLm5pY2tuYW1lID0gXCJcIjtcclxuICAgICAgICBzZWxmLnVzZXJMaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5pbml0SGlzdG9yeUNoYXQgPSBpbml0SGlzdG9yeUNoYXQ7XHJcbiAgICAgICAgc2VsZi5zaG93UmVwbGF5ID0gc2hvd1JlcGxheTtcclxuICAgICAgICBzZWxmLnNlbmRNZXNzYWdlID0gc2VuZE1lc3NhZ2U7XHJcbiAgICAgICAgc2VsZi5waG90byA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi5vcGVuQ2hhdCA9IG9wZW5DaGF0O1xyXG4gICAgICAgIHNlbGYuaXNPcGVuQ2hhdCA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYua2V5cHJlc3NDaGF0ID0ga2V5cHJlc3NDaGF0O1xyXG4gICAgICAgIHNlbGYuY29udGFkb3IgPSAwO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBvcGVuQ2hhdCgpe1xyXG4gICAgICAgICAgICBzZWxmLmlzT3BlbkNoYXQgPSAhc2VsZi5pc09wZW5DaGF0O1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZScpLmZvY3VzKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGluaXRIaXN0b3J5Q2hhdCgpe1xyXG4gICAgICAgICAgICBzZWxmLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICAgICBzZWxmLm5pY2tuYW1lID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbmlja25hbWUnKTtcclxuICAgICAgICAgICAgc2VsZi5waG90byA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bob3RvJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGhpc3RvcnljaGF0KHNlbGYuaWRQcm9ibGVtKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEuaGlzdG9yeWNoYXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBuZXcgRGF0ZShkYXRhLmhpc3RvcnljaGF0W2ldLnRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1zbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaWNrbmFtZTogZGF0YS5oaXN0b3J5Y2hhdFtpXS5uaWNrbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c6IGRhdGEuaGlzdG9yeWNoYXRbaV0ubXNnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRtcC5nZXREYXRlKCkgKyBcIi9cIiArICh0bXAuZ2V0TW9udGgoKSArIDEgKSsgXCIvXCIgKyB0bXAuZ2V0RnVsbFllYXIoKSArIFwiIFtcIiArIHRtcC5nZXRIb3VycygpICsgXCI6XCIgKyB0bXAuZ2V0TWludXRlcygpICsgXCJdIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZXNzYWdlcy5wdXNoKG1zbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2NoZWNrVXNlcnMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNob3dSZXBsYXkoKXtcclxuICAgICAgICAgICAgaWYoc2VsZi5yZXBsYXkpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXBsYXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlcGxheSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RDaGF0JywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICB2YXIgdG1wID0gbmV3IERhdGUob2JqW29iai5sZW5ndGggLTFdLnRpbWUpO1xyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmlja25hbWU6IG9ialtvYmoubGVuZ3RoIC0xXS5uaWNrbmFtZSxcclxuICAgICAgICAgICAgICAgIG1zZzogb2JqW29iai5sZW5ndGggLTFdLm1zZyxcclxuICAgICAgICAgICAgICAgIHRpbWU6IHRtcC5nZXREYXRlKCkgKyBcIi9cIiArICh0bXAuZ2V0TW9udGgoKSArIDEpICsgXCIvXCIgKyB0bXAuZ2V0RnVsbFllYXIoKSArIFwiIFtcIiArIHRtcC5nZXRIb3VycygpICsgXCI6XCIgKyB0bXAuZ2V0TWludXRlcygpICsgXCJdIFwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBTb2NrZXQub24oJ29uQ2hlY2tVc2VycycsIGZ1bmN0aW9uICh1c2VyTGlzdCkge1xyXG4gICAgICAgICAgICBzZWxmLnVzZXJMaXN0ID0gdXNlckxpc3Q7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGNoYXRtc2cpe1xyXG4gICAgICAgICAgICBpZihjaGF0bXNnID09PSB1bmRlZmluZWQgfHwgY2hhdG1zZy5sZW5ndGggPCAyICl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdENoYXQnLCBjaGF0bXNnKTtcclxuICAgICAgICAgICAgc2VsZi5uZXdtc2cgPSBcIlwiO1xyXG4gICAgICAgICAgICBzZWxmLmNvbnRhZG9yID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHplcmFyQ29udGFkb3IoKXtcclxuICAgICAgICAgICAgc2VsZi5jb250YWRvciA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBrZXlwcmVzc0NoYXQoZXZlbnQsY2hhdG1zZyl7XHJcbiAgICAgICAgICAgIGlmKGV2ZW50LmtleUNvZGUgPT0gMTMpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jb250YWRvcisrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29udGFkb3IgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KHplcmFyQ29udGFkb3IsIDIwMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoc2VsZi5jb250YWRvciA+IDEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlKGNoYXRtc2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgfVxyXG5cclxufSkoKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLypcclxudmFyIHNlbGYgPSB0aGlzO1xyXG5zZWxmLm5ld21zZyA9IFwiXCI7XHJcbnNlbGYubWVzc2FnZXMgPSBbXTtcclxuc2VsZi5yZXBsYXkgPSBmYWxzZTtcclxuc2VsZi5uaWNrbmFtZSA9IFwiXCI7XHJcbnNlbGYudXNlckxpc3QgPSBbXTtcclxuc2VsZi5pbml0SGlzdG9yeUNoYXQgPSBpbml0SGlzdG9yeUNoYXQ7XHJcbnNlbGYuY2xvc2UgPSBjbG9zZTtcclxuc2VsZi5zaG93UmVwbGF5ID0gc2hvd1JlcGxheTtcclxuc2VsZi5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xyXG5cclxuZnVuY3Rpb24gY2xvc2UoKSB7XHJcbiAgICAkbWRTaWRlbmF2KCdjaGF0JykuY2xvc2UoKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcImNsb3NlIGNoYXRcIik7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRIaXN0b3J5Q2hhdCgpe1xyXG4gICAgc2VsZi5pZFByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgIHNlbGYubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgc2VsZi5waG90byA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bob3RvJyk7XHJcbiAgICBwcm9ibGVtU2VydmljZS5nZXRoaXN0b3J5Y2hhdChzZWxmLmlkUHJvYmxlbSlcclxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmhpc3RvcnljaGF0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBEYXRlKGRhdGEuaGlzdG9yeWNoYXRbaV0udGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmlja25hbWU6IGRhdGEuaGlzdG9yeWNoYXRbaV0ubmlja25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZzogZGF0YS5oaXN0b3J5Y2hhdFtpXS5tc2csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRtcC5nZXREYXRlKCkgKyBcIi9cIiArICh0bXAuZ2V0TW9udGgoKSArIDEgKSsgXCIvXCIgKyB0bXAuZ2V0RnVsbFllYXIoKSArIFwiIFtcIiArIHRtcC5nZXRIb3VycygpICsgXCI6XCIgKyB0bXAuZ2V0TWludXRlcygpICsgXCJdIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLnB1c2gobXNuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgU29ja2V0LmVtaXQoJ2NoZWNrVXNlcnMnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd1JlcGxheSgpe1xyXG4gICAgaWYoc2VsZi5yZXBsYXkpe1xyXG4gICAgICAgIHNlbGYucmVwbGF5ID0gZmFsc2U7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBzZWxmLnJlcGxheSA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcblNvY2tldC5vbignb25Ccm9hZGNhc3RDaGF0JywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgdmFyIHRtcCA9IG5ldyBEYXRlKG9ialtvYmoubGVuZ3RoIC0xXS50aW1lKTtcclxuICAgIHNlbGYubWVzc2FnZXMucHVzaCh7XHJcbiAgICAgICAgbmlja25hbWU6IG9ialtvYmoubGVuZ3RoIC0xXS5uaWNrbmFtZSxcclxuICAgICAgICBtc2c6IG9ialtvYmoubGVuZ3RoIC0xXS5tc2csXHJcbiAgICAgICAgdGltZTogdG1wLmdldERhdGUoKSArIFwiL1wiICsgKHRtcC5nZXRNb250aCgpICsgMSkgKyBcIi9cIiArIHRtcC5nZXRGdWxsWWVhcigpICsgXCIgW1wiICsgdG1wLmdldEhvdXJzKCkgKyBcIjpcIiArIHRtcC5nZXRNaW51dGVzKCkgKyBcIl0gXCJcclxuICAgIH0pO1xyXG59KTtcclxuXHJcblNvY2tldC5vbignb25DaGVja1VzZXJzJywgZnVuY3Rpb24gKHVzZXJMaXN0KSB7XHJcbiAgICBzZWxmLnVzZXJMaXN0ID0gdXNlckxpc3Q7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gc2VuZE1lc3NhZ2UoY2hhdG1zZyl7XHJcbiAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0Q2hhdCcsIGNoYXRtc2cpO1xyXG4gICAgc2VsZi5uZXdtc2cgPSBcIlwiO1xyXG59Ki9cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyMi8wNy8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignZHNjUmVwb3J0Q29udHJvbGxlcicsZHNjUmVwb3J0Q29udHJvbGxlcik7XHJcblxyXG5mdW5jdGlvbiBkc2NSZXBvcnRDb250cm9sbGVyKCkge1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuaWRwcm9ibGVtID0gJ2FqZmxhamZsamFsZmphbGpmJztcclxuICAgIHNlbGYuYnVpZFJlcG9ydCA9IGJ1aWRSZXBvcnQ7XHJcblxyXG4gICAgZnVuY3Rpb24gYnVpZFJlcG9ydChlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdFJlc3BvcnQnKTtcclxuICAgICAgICB2YXIgcGRmID0gbmV3IGpzUERGKCdsJywncHgnKTtcclxuICAgICAgICBwZGYuYWRkSFRNTChcclxuICAgICAgICAgICAgaHRtbCwgMCwgMCwge1xyXG4gICAgICAgICAgICAgICAgcGFnZXNwbGl0OiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uKGRpc3Bvc2Upe1xyXG4gICAgICAgICAgICAgICAgcGRmLnNhdmUoJ3Rlc3QucGRmJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyOS8wNi8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ2V2YWx1YXRpb25mcmFtZXdvcmtDb250cm9sbGVyJyxldmFsdWF0aW9uZnJhbWV3b3JrQ29udHJvbGxlcik7XHJcblxyXG4gIGZ1bmN0aW9uIGV2YWx1YXRpb25mcmFtZXdvcmtDb250cm9sbGVyICgkd2luZG93LHByb2JsZW1TZXJ2aWNlLFNvY2tldCx0b2FzdEFwcCl7XHJcblxyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgIHNlbGYuZXZhbHVhdGlvbmZyYW1ld29ya0xpc3QgPVtdO1xyXG4gICAgICBzZWxmLmluaXRFdmFsdWF0aW9uID0gaW5pdEV2YWx1YXRpb247XHJcbiAgICAgIHNlbGYuc2V0T3BlbkVkaXREaXNjdXRpb24gPSBzZXRPcGVuRWRpdERpc2N1dGlvbjtcclxuICAgICAgc2VsZi5zYXZlRnJhbWUgPSBzYXZlRnJhbWU7XHJcblxyXG4gICAgICBmdW5jdGlvbiBpbml0RXZhbHVhdGlvbigpe1xyXG4gICAgICAgICAgc2VsZi5pZHByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0ZXZhbHVhdGlvbihzZWxmLmlkcHJvYmxlbSlcclxuICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5ldmFsdWF0aW9uZnJhbWV3b3JrTGlzdCA9IGRhdGEuZXZhbHVhdGlvbmZyYW1ld29yaztcclxuICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0RnJhbWVFZGl0JywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxmLmV2YWx1YXRpb25mcmFtZXdvcmtMaXN0LGZ1bmN0aW9uKGV2YWx1YXRpb25mcmFtZXdvcmspe1xyXG4gICAgICAgICAgICAgaWYoIGV2YWx1YXRpb25mcmFtZXdvcmsub25pb25sYXllciA9PSBkYXRhLm9uaW9ubGF5ZXIpe1xyXG4gICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChldmFsdWF0aW9uZnJhbWV3b3JrLnN0YWtlaG9sZGVycyxmdW5jdGlvbihzdGFrZWhvbGRlcil7XHJcbiAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFrZWhvbGRlci5faWQgPT0gZGF0YS5faWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIubmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm9uaW9ubGF5ZXIgPSBkYXRhLm9uaW9ubGF5ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5kZXNjcmlwdGlvbiA9IGRhdGEuZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5vcGVuRWRpdCA9IGRhdGEub3BlbkVkaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5wcm9ibGVtcyA9IGRhdGEucHJvYmxlbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5zb2x1dGlvbnMgPSBkYXRhLnNvbHV0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZnVuY3Rpb24gc2F2ZUZyYW1lKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0RnJhbWVTYXZlJywgc3Rha2Vob2xkZXIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBTb2NrZXQub24oJ29uVXBkYXRlU3Rha2Vob2xkZXInLCBmdW5jdGlvbiAoc3Rha2Vob2xkZXJPbmlvbikge1xyXG5cclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZnVuY3Rpb24gc2V0T3BlbkVkaXREaXNjdXRpb24oY3VycmVudFN0YWtlaG9sZGVyKXtcclxuICAgICAgICAgIGN1cnJlbnRTdGFrZWhvbGRlci5vcGVuRWRpdCA9IHRydWU7XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignbWVudVByb2JsZW1Db250cm9sbGVyJywgbWVudVByb2JsZW1hQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gbWVudVByb2JsZW1hQ29udHJvbGxlcihBdXRoLCAkbWREaWFsb2csICRzY29wZSwgJGZpbHRlciwgJHN0YXRlLCAkd2luZG93LCBwcm9ibGVtU2VydmljZSx0b2FzdEFwcCwgU29ja2V0KXtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIC8vc2VsZi5vcGVuQ2hhdCA9IGJ1aWxkVG9nZ2xlcignY2hhdCcpO1xyXG4gICAgICAgIHNlbGYuZm9ybUFkZENvbGxhYm9yYXRvcnMgPSBmb3JtQWRkQ29sbGFib3JhdG9ycztcclxuICAgICAgICBzZWxmLmVkaXREZXNjcmlwdGlvblByb2JsZW0gPSBlZGl0RGVzY3JpcHRpb25Qcm9ibGVtO1xyXG4gICAgICAgIHNlbGYuZG9Mb2dvdXQgPSBkb0xvZ291dDtcclxuICAgICAgICBzZWxmLnN5c3RlbVJldHVybiA9IHN5c3RlbVJldHVybjtcclxuICAgICAgICBzZWxmLmZvcm1Qcm9ibGVtUmVwb3J0ID0gZm9ybVByb2JsZW1SZXBvcnQ7XHJcbiAgICAgICAgc2VsZi5nZXRDdXJyZW50UHJvYmxlbSA9IGdldEN1cnJlbnRQcm9ibGVtO1xyXG4gICAgICAgIHNlbGYubmlja25hbWU7XHJcbiAgICAgICAgc2VsZi5kc2NfYXJ0aWZhY3RzID0gW107XHJcbiAgICAgICAgc2VsZi5mb3JtRWRpdFByb2JsZW0gPSBmb3JtRWRpdFByb2JsZW07XHJcbiAgICAgICAgc2VsZi5mb3JtSW52aXRlQ29sbGFib3JhdG9yID0gZm9ybUludml0ZUNvbGxhYm9yYXRvcjtcclxuICAgICAgICB2YXIgbG9jYWxjb2RlID0gJyc7XHJcblxyXG5cclxuXHJcbiAgICAgICAgLypFZGl0IFByb2JsZW0qL1xyXG5cclxuICAgICAgICBTb2NrZXQub24oJ29uQXR1YWxpemFyUHJvYmxlbWEnLCBmdW5jdGlvbiAocmV0b3Jubykge1xyXG4gICAgICAgICAgICBpZihsb2NhbGNvZGUgIT09IHJldG9ybm8ubG9jYWxjb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBzZXREZXNjcml0aW9uKHJldG9ybm8uZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNhdmVQcm9ibGVtKHByb2JsZW0pe1xyXG4gICAgICAgICAgICBwcm9ibGVtLmxvY2FsY29kZSA9IGxvY2FsY29kZTtcclxuICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2F0dWFsaXphclByb2JsZW1hJywgcHJvYmxlbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBmb3JtRWRpdFByb2JsZW0oZXYpIHtcclxuICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogRGlhbG9nRWRpdFByb2JsZW1Db250cm9sbGVyLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9wcm9ibGVtZGVzY3JpcHRpb24uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcclxuICAgICAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERpYWxvZ0VkaXRQcm9ibGVtQ29udHJvbGxlcihTb2NrZXQsJHRpbWVvdXQsJHNjb3BlLCRtZERpYWxvZykge1xyXG4gICAgICAgICAgICB2YXIgdXBkYXRlVHJ1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICRzY29wZS5wcm9ibGVtID0gJyc7XHJcbiAgICAgICAgICAgICRzY29wZS5wcm9ibGVtVXBkYXRlID0gcHJvYmxlbVVwZGF0ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmdldFByb2JsZW1FZGl0ID0gZ2V0UHJvYmxlbUVkaXQ7XHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRGVzY3JpcHRpb24gPSBzYXZlRGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICRzY29wZS5uaWNrbmFtZSA9ICcnO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQcm9ibGVtRWRpdCgpe1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5pY2tuYW1lID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbmlja25hbWUnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pZFByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgICAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHByb2JsZW0oc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9ibGVtID0gZGF0YS5wcm9ibGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0VXBkYXRlKCl7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUcnVlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gcHJvYmxlbVVwZGF0ZShkZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb2JsZW0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3VwZGF0ZSc6IHVwZGF0ZVRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNhdmVQcm9ibGVtKHByb2JsZW0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVUcnVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoc2V0VXBkYXRlLCAyMDAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gc2F2ZURlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvYmxlbSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAndXBkYXRlJzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAnZGVzY3JpcHRpb24nOiBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIHNhdmVQcm9ibGVtKHByb2JsZW0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0RGVzY3JpdGlvbihwcm9ibGVtKXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wcm9ibGVtID0gcHJvYmxlbTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gLyogQ29udmlkYXIgUGFydGljaXBhbnRlcyAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1JbnZpdGVDb2xsYWJvcmF0b3IoZXYpIHtcclxuICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogRGlhbG9nSW52aXRlQ29sbGFib3JhdG9yQ29udHJvbGxlcixcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvY29sbGFib3JhdG9ycy5odG1sJyxcclxuICAgICAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRGlhbG9nSW52aXRlQ29sbGFib3JhdG9yQ29udHJvbGxlcigkc2NvcGUsJG1kRGlhbG9nKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pZFByb2JsZW0gPSBcIlwiO1xyXG4gICAgICAgICAgICAkc2NvcGUuY29sbGFib3JhdG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAkc2NvcGUudXNlcmVtYWlsID0gXCJcIjtcclxuICAgICAgICAgICAgJHNjb3BlLmluaXRDb2xsYWJvcmF0b3JzID0gaW5pdENvbGxhYm9yYXRvcnM7XHJcbiAgICAgICAgICAgICRzY29wZS5hZGRDb2xsYWJvcmF0b3IgPSBhZGRDb2xsYWJvcmF0b3I7XHJcbiAgICAgICAgICAgICRzY29wZS5yZW1vdmVDb2xsYWJvcmF0b3IgPSByZW1vdmVDb2xsYWJvcmF0b3I7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdENvbGxhYm9yYXRvcnMoKXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pZFByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS51c2VyZW1haWwgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyZW1haWwnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRjb2xsYWJvcmF0b3JzKCRzY29wZS5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEuY29sbGFib3JhdG9ycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sbGFib3JhdG9ycyA9IGRhdGEuY29sbGFib3JhdG9ycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vU29ja2V0LmVtaXQoJ2NoZWNrVXNlcnMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzZWFyY2hDYWxsYWJvcmF0aW9uKGVtYWlsKXtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCAkc2NvcGUuY29sbGFib3JhdG9ycy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZW1haWwgPT0gJHNjb3BlLmNvbGxhYm9yYXRvcnNbaV0uZW1haWwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZENvbGxhYm9yYXRvcihlbWFpbCl7XHJcbiAgICAgICAgICAgICAgICBpZigkc2NvcGUudXNlcmVtYWlsID09IGVtYWlsKXtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoJHNjb3BlLnVzZXJlbWFpbCArIFwiIGlzIGVtYWlsIG9mIG93bmVyLlwiKTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoQ2FsbGFib3JhdGlvbihlbWFpbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiVXN1YXJpbyBDYWRhc3RyYWRvLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW52aXRlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRwcm9ibGVtOiAkc2NvcGUuaWRQcm9ibGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmludml0ZShpbnZpdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbGxhYm9yYXRvcnMgPSBkYXRhLmNvbGxhYm9yYXRvcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVDb2xsYWJvcmF0b3IocGVvcGxlKXtcclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRwcm9ibGVtOiAkc2NvcGUuaWRQcm9ibGVtLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBwZW9wbGUuZW1haWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBwcm9ibGVtU2VydmljZS5yZW1vdmVjb2xsYWJvcmF0b3JzKG9iailcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiQ29sYWJvcmFkb3IgZm9pIHJlbW92aWRvIGRvIHByb2pldG8uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbGxhYm9yYXRvcnMgPSBkYXRhLmNvbGxhYm9yYXRvcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG4vKk1lbnUgQ29udHJvbCovXHJcbiAgICBmdW5jdGlvbiBnZXRDdXJyZW50UHJvYmxlbSgpe1xyXG4gICAgICAgICAgICBzZWxmLm5pY2tuYW1lID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbmlja25hbWUnKTtcclxuICAgICAgICAgICAgc2VsZi5pZFByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgICAgICAgICAgbG9jYWxjb2RlID0gICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvY2FsY29kZScpO1xyXG4gICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRwcm9ibGVtKHNlbGYuaWRQcm9ibGVtKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb2JsZW0gPSBkYXRhLnByb2JsZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkYXRhLnByb2JsZW0uYXJ0aWZhY3RzLCBmdW5jdGlvbiAoYXJ0aWZhY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gYXJ0aWZhY3Quc3BsaXQoXCJfXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kc2NfYXJ0aWZhY3RzLnB1c2goe25hbWU6IFwicHJvYmxlbS5cIiArIG5hbWVbMl0udG9Mb3dlckNhc2UoKSwgbGFiZWw6ICRmaWx0ZXIoJ3RyYW5zbGF0ZScpKGFydGlmYWN0KX0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zZWxmLmRzY19hcnRpZmFjdHMgPSBkc2NfYXJ0aWZhY3RzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB2YXIgaW5pdHNvY2tldHByb2JsZW0gPSB7XHJcbiAgICAgICAgICAgIFwiaWRwcm9ibGVtXCI6c2VsZi5pZFByb2JsZW0sXHJcbiAgICAgICAgICAgICBcIm5pY2tuYW1lXCI6IHNlbGYubmlja25hbWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdpbml0UHJvYmxlbScsIGluaXRzb2NrZXRwcm9ibGVtKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBzZWxmLnNlbGVjdGVkSW5kZXggPSAwO1xyXG4gICAgICAgIHZhciBzZWxlY3RlZCA9IG51bGwsXHJcbiAgICAgICAgICAgIHByZXZpb3VzID0gbnVsbDtcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdzZWxlY3RlZEluZGV4JywgZnVuY3Rpb24oY3VycmVudCl7XHJcbiAgICAgICAgICAgIHByZXZpb3VzID0gc2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkID0gIHNlbGYuZHNjX2FydGlmYWN0c1tjdXJyZW50XTtcclxuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZEluZGV4ID0gY3VycmVudDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc3lzdGVtUmV0dXJuKCl7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnc3RhcnRwcm9ibGVtJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZm9ybUFkZENvbGxhYm9yYXRvcnMoKXtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9ibGVtLmNvbGxhYm9yYXRvcnMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1Qcm9ibGVtUmVwb3J0KCl7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnZHNjcmVwb3J0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBlZGl0RGVzY3JpcHRpb25Qcm9ibGVtKCkge1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3Byb2JsZW0uZGVzY3JpcHRpb24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvTG9nb3V0KCkge1xyXG4gICAgICAgICAgICBBdXRoLmxvZ291dCgpO1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2luaXQubG9naW4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgamVzdXMgb24gMjEvMDMvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdvbmlvbkNvbnRyb2xsZXInLG9uaW9uQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gb25pb25Db250cm9sbGVyKFNvY2tldCwkd2luZG93LHByb2JsZW1TZXJ2aWNlLCRtZERpYWxvZyx0b2FzdEFwcCl7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuaWRwcm9ibGVtID0gXCJcIjtcclxuICAgICAgICBzZWxmLmludGlNeXRPbmlvbiA9IGludGlNeXRPbmlvbjtcclxuICAgICAgICBzZWxmLnNhdmVQb3N0SXRPbmlvbiA9IHNhdmVQb3N0SXRPbmlvbjtcclxuICAgICAgICBzZWxmLmVkaXRQb3N0SXRPbmlvbiA9IGVkaXRQb3N0SXRPbmlvbjtcclxuICAgICAgICBzZWxmLmRlbFBvc3RJdE9uaW9uID0gZGVsUG9zdEl0T25pb247XHJcbiAgICAgICAgc2VsZi5hZGRQb3N0SXRPbmlvbiA9IGFkZFBvc3RJdE9uaW9uO1xyXG4gICAgICAgIHNlbGYub25PbmlvbiA9IG9uT25pb247XHJcbiAgICAgICAgc2VsZi5vZmZPbmlvbiA9IG9mZk9uaW9uO1xyXG5cclxuXHJcbiAgICAgICAgXHJcblxyXG5cclxuXHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyOS8wNi8yMDE1LlxyXG4gKi9cclxuXHJcbjsoZnVuY3Rpb24odW5kZWZpbmVkKXtcclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignb25pb24zTGF5ZXJDb250cm9sbGVyJyxvbmlvbjNMYXllckNvbnRyb2xsZXIpO1xyXG5cclxuXHJcbmZ1bmN0aW9uIG9uaW9uM0xheWVyQ29udHJvbGxlcihTb2NrZXQsJHdpbmRvdyxwcm9ibGVtU2VydmljZSwkbWREaWFsb2csdG9hc3RBcHApe1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuaWRwcm9ibGVtID0gXCJcIjtcclxuICAgIHNlbGYuaW5pdE9uaW9uM0xheWVyID0gaW5pdE9uaW9uM0xheWVyO1xyXG4gICAgc2VsZi5tb3ZlID0gZmFsc2U7XHJcbiAgICBzZWxmLm9uaW9uM0xheWVyTGlzdCA9IFtdO1xyXG4gICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgc2VsZi5zYXZlT25pb24zTGF5ZXIgPSBzYXZlT25pb24zTGF5ZXI7XHJcbiAgICBzZWxmLnNldE9wZW5FZGl0ID0gc2V0T3BlbkVkaXQ7XHJcbiAgICBzZWxmLmRlbFBvc3RJdCA9IGRlbFBvc3RJdDtcclxuICAgIHNlbGYuYWRkUG9zdEl0ID0gYWRkUG9zdEl0O1xyXG4gICAgc2VsZi5hY2VuZGUgPSBhY2VuZGU7XHJcbiAgICBzZWxmLmFwYWdhID0gYXBhZ2E7XHJcbiAgICBzZWxmLmxvY2FsY29kZSA9ICcnO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRPbmlvbjNMYXllcigpe1xyXG4gICAgICAgIHNlbGYuaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgc2VsZi5sb2NhbGNvZGUgPSAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9jYWxjb2RlJyk7XHJcblxyXG4gICAgICAgLyogcHJvYmxlbVNlcnZpY2UuZ2V0b25pb24oc2VsZi5pZHByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25pb25MaXN0ID0gZGF0YS5vbmlvbjtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICBzZWxmLmluUHJvY2Vzc2luZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RPbmlvbjNMYXllclNhdmUnLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VsZi5vbmlvbjNMYXllckxpc3QsIGZ1bmN0aW9uIChwb3N0aXQpIHtcclxuICAgICAgICAgICAgaWYgKHBvc3RpdC5faWQgPT0gZGF0YS5faWQpe1xyXG4gICAgICAgICAgICAgICAgcG9zdGl0LnRpdGxlID0gZGF0YS50aXRsZTtcclxuICAgICAgICAgICAgICAgIHBvc3RpdC5kZXNjcmlwdGlvbiA9IGRhdGEuZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICBwb3N0aXQub3BlbkVkaXQgPSBkYXRhLm9wZW5FZGl0O1xyXG4gICAgICAgICAgICAgICAgcG9zdGl0LnggPSBkYXRhLng7XHJcbiAgICAgICAgICAgICAgICBwb3N0aXQueSA9IGRhdGEueTtcclxuICAgICAgICAgICAgICAgIHBvc3RpdC56aW5kZXggPSA5OTk5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2F2ZU9uaW9uM0xheWVyKHBvc3RpdCkge1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvbjNMYXllclNhdmUnLCBwb3N0aXQpO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RPbmlvbjNMYXllckVkaXQnLCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VsZi5vbmlvbjNMYXllckxpc3QsIGZ1bmN0aW9uIChwb3N0aXQpIHtcclxuICAgICAgICAgICAgaWYocG9zdGl0Ll9pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIHBvc3RpdC5vcGVuRWRpdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBwb3N0aXQuemluZGV4ID0gOTk5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNldE9wZW5FZGl0KGlkKXtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb24zTGF5ZXJFZGl0JywgaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RPbmlvbjNMYXllclJlbW92ZScsIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHZhciBwb3N0aXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBvc3RpdFwiICtzZWxmLm9uaW9uM0xheWVyTGlzdFtpZF0uX2lkKTtcclxuICAgICAgICBvbmlvbjNMYXllci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHNlbGYub25pb24zTGF5ZXJMaXN0LnNwbGljZShpZCwxKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVBvc3RJdChpbmRleCxwb3N0aXQpIHtcclxuICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgIHBvc3RpdDogcG9zdGl0XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb24zTGF5ZXJSZW1vdmUnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlbFBvc3RJdChldixpbmRleCxwb3N0aXQpIHtcclxuICAgICAgICB2YXIgY29uZmlybSA9ICRtZERpYWxvZy5jb25maXJtKClcclxuICAgICAgICAgICAgLnBhcmVudChhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSkpXHJcbiAgICAgICAgICAgIC50aXRsZSgnRGV0ZXRlIFBvc3RpdD8nKVxyXG4gICAgICAgICAgICAuY29udGVudCgnVGl0bGU6ICcgKyBvbmlvbi50aXRsZSlcclxuICAgICAgICAgICAgLmFyaWFMYWJlbCgnUmVtb3ZlIHBvc3RpdCcpXHJcbiAgICAgICAgICAgIC5vaygnWWVzIScpXHJcbiAgICAgICAgICAgIC5jYW5jZWwoJ0NhbmNlbCcpXHJcbiAgICAgICAgICAgIC50YXJnZXRFdmVudChldik7XHJcbiAgICAgICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmVtb3ZlUG9zdEl0KGluZGV4LHBvc3RpdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uM0xheWVyTW92ZScsIGZ1bmN0aW9uIChwb3N0aXQpIHtcclxuICAgICAgICAgICAgaWYoc2VsZi5sb2NhbGNvZGUgIT09IHBvc3RpdC5sb2NhbGNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3N0aXQnK3Bvc3RpdC5faWQpLnN0eWxlLmxlZnQgPSBwb3N0aXQueDtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3N0aXQnK3Bvc3RpdC5faWQpLnN0eWxlLnRvcCA9IHBvc3RpdC55O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uM0xheWVyQWRkJywgZnVuY3Rpb24gKHJldG9ybm8pIHtcclxuICAgICAgICBzZWxmLm9uaW9uM0xheWVyTGlzdC5wdXNoKHJldG9ybm8pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkUG9zdEl0KGUsY2FtYWRhKSB7XHJcbiAgICAgICAgdmFyIG5ld1N0YWtlaG9sZGVyID1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwib25pb25sYXllclwiOiBjYW1hZGEsXHJcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxyXG4gICAgICAgICAgICBcIm9wZW5FZGl0XCI6IHRydWUsXHJcbiAgICAgICAgICAgIFwieFwiOiBlLnBhZ2VYICsgJ3B4JyxcclxuICAgICAgICAgICAgXCJ5XCI6IChlLnBhZ2VZKSArICdweCcsXHJcbiAgICAgICAgICAgIFwiemluZGV4XCI6IDk5OTlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvbjNMYXllckFkZCcsIG5ld1N0YWtlaG9sZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhY2VuZGUoaWQpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVcIitpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICd0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgZmlsbDogIzhGQkM4RjsnKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICdmaWxsOiAjOEZCQzhGOycpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVnZW5kXCIraWQpLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIwLjdcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIwLjdcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXBhZ2EoaWQsY29sb3IpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVcIitpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICd0ZXh0LWRlY29yYXRpb246IG5vbmU7Jyk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZmlsbDogJytjb2xvcisnOycpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVnZW5kXCIraWQpLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIxLjBcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIxLjBcIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbn0pKHRoaXMpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMTIvMDgvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3Byb2JsZW1SZXBvcnRDb250cm9sbGVyJyxwcm9ibGVtUmVwb3J0Q29udHJvbGxlcik7XHJcblxyXG5cclxuICAgICBmdW5jdGlvbiBwcm9ibGVtUmVwb3J0Q29udHJvbGxlcigkd2luZG93LHByb2JsZW1TZXJ2aWNlLHRvYXN0QXBwLCRzdGF0ZSl7XHJcblxyXG4gICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgIHNlbGYuaWRQcm9ibGVtO1xyXG4gICAgICAgICBzZWxmLnByb2JsZW07XHJcbiAgICAgICAgIHNlbGYuaW5pdFByb2JsZW1QZXBvcnQgPSBpbml0UHJvYmxlbVBlcG9ydDtcclxuICAgICAgICAgc2VsZi5zeXN0ZW1SZXR1cm4gPSBzeXN0ZW1SZXR1cm47XHJcblxyXG4gICAgICAgICBmdW5jdGlvbiBpbml0UHJvYmxlbVBlcG9ydCgpe1xyXG5cclxuICAgICAgICAgICAgIHNlbGYuaWRQcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcblxyXG4gICAgICAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0cHJvYmxlbXJlcG9ydChzZWxmLmlkUHJvYmxlbSlcclxuICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEucHJvYmxlbS5zdGFrZWhvbGRlcnMsIGZ1bmN0aW9uIChzdGFrZWhvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIueCA9IChwYXJzZUludChzdGFrZWhvbGRlci54LnN1YnN0cmluZygwLHN0YWtlaG9sZGVyLngubGVuZ3RoIC0yKSkgLSAxMDApKydweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnkgPSAgKHBhcnNlSW50KHN0YWtlaG9sZGVyLnkuc3Vic3RyaW5nKDAsc3Rha2Vob2xkZXIueS5sZW5ndGggLTIpKSArIDQwMCkrJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJvYmxlbSA9IGRhdGEucHJvYmxlbTtcclxuICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgZnVuY3Rpb24gc3lzdGVtUmV0dXJuKCl7XHJcbiAgICAgICAgICAgICAkc3RhdGUuZ28oJ3Byb2JsZW0uc3Rha2Vob2xkZXJzJyk7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgfVxyXG5cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5mYWN0b3J5KCdwcm9ibGVtU2VydmljZScsIHByb2JsZW1TZXJ2aWNlKTtcclxuXHJcbiAgcHJvYmxlbVNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCckbG9jYXRpb24nXTtcclxuXHJcbiAgZnVuY3Rpb24gcHJvYmxlbVNlcnZpY2UoJGh0dHAsJGxvY2F0aW9uKSB7XHJcblxyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRVU0VSUFJPQkxFTVMgPSAnL2FwaS9wcm9ibGVtL2dldHByb2JsZW1zJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUVVNFUlBST0JMRU1TQ09MTEFCT1JBVE9SID0gJy9hcGkvcHJvYmxlbS9nZXRwcm9ibGVtc2NvbGxhYm9yYXRvcic7XHJcbiAgICB2YXIgQVBJX1JPVVRFX05FV1BST0JMRU0gPSAnL2FwaS9wcm9ibGVtL25ld3Byb2JsZW0nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRQUk9CTEVNID0gJy9hcGkvcHJvYmxlbS9nZXRwcm9ibGVtJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUUFJPQkxFTVJFUE9SVCA9ICcvYXBpL3Byb2JsZW0vZ2V0cHJvYmxlbXJlcG9ydCc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVENPTExBQk9SQVRPUlMgPSAnL2FwaS9wcm9ibGVtL2dldGNvbGxhYm9yYXRvcnMnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9JTlZJVEUgPSAnL2FwaS9wcm9ibGVtL2ludml0ZSc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVE9OSU9OID0gJy9hcGkvcHJvYmxlbS9nZXRvbmlvbic7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVEVWQUxVQVRJT04gPSAnL2FwaS9wcm9ibGVtL2dldGV2YWx1YXRpb24nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRTRU1JT1RJQ0ZSQU1FV09SSyA9ICcvYXBpL3Byb2JsZW0vZ2V0c2VtaW90aWMnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRDQVJGID0gJy9hcGkvcHJvYmxlbS9nZXRjYXJmJztcclxuICAgIHZhciBBUElfUk9VVEVfUkVNT1ZFUFJPQkxFTSA9ICcvYXBpL3Byb2JsZW0vcmVtb3ZlcHJvYmxlbSc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX1JFTU9WRUNPTExBQk9SQVRPUiA9ICcvYXBpL3Byb2JsZW0vcmVtb3ZlY29sbGFib3JhdG9yJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUSElTVE9SWUNIQVQgPSAnL2FwaS9wcm9ibGVtL2hpc3RvcnljaGF0JztcclxuXHJcbiAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgbmV3cHJvYmxlbSAgICAgICA6IG5ld3Byb2JsZW0sXHJcbiAgICAgIGdldHVzZXJwcm9ibGVtcyAgOiBnZXR1c2VycHJvYmxlbXMsXHJcbiAgICAgIGdldHByb2JsZW0gICAgICAgOiBnZXRwcm9ibGVtLFxyXG4gICAgICBnZXRjb2xsYWJvcmF0b3JzIDogZ2V0Y29sbGFib3JhdG9ycyxcclxuICAgICAgaW52aXRlICAgICAgICAgICA6IGludml0ZSxcclxuICAgICAgZ2V0b25pb24gICAgICAgICA6IGdldG9uaW9uLFxyXG4gICAgICBnZXRldmFsdWF0aW9uICAgIDogZ2V0ZXZhbHVhdGlvbixcclxuICAgICAgZ2V0c2VtaW90aWMgICAgICA6IGdldHNlbWlvdGljLFxyXG4gICAgICBnZXRjYXJmICAgICAgICAgIDogZ2V0Y2FyZixcclxuICAgICAgcmVtb3ZlcHJvYmxlbSAgICA6IHJlbW92ZXByb2JsZW0sXHJcbiAgICAgIGdldHByb2JsZW1zY29sbGFib3JhdG9yOiBnZXRwcm9ibGVtc2NvbGxhYm9yYXRvcixcclxuICAgICAgcmVtb3ZlY29sbGFib3JhdG9ycyA6IHJlbW92ZWNvbGxhYm9yYXRvcnMsXHJcbiAgICAgIGdldGhpc3RvcnljaGF0OiBnZXRoaXN0b3J5Y2hhdCxcclxuICAgICAgZ2V0cHJvYmxlbXJlcG9ydCA6IGdldHByb2JsZW1yZXBvcnRcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgZnVuY3Rpb24gbmV3cHJvYmxlbShkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX05FV1BST0JMRU0sIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldHByb2JsZW1yZXBvcnQoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFBST0JMRU1SRVBPUlQgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldHByb2JsZW0oZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFBST0JMRU0gKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldHVzZXJwcm9ibGVtcyhkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfR0VUVVNFUlBST0JMRU1TICsgJz9lbWFpbD0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldGNvbGxhYm9yYXRvcnMoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVENPTExBQk9SQVRPUlMgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGludml0ZShkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX0lOVklURSwgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldG9uaW9uKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRPTklPTiArICc/aWRwcm9ibGVtPScgKyBkYXRhICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0ZXZhbHVhdGlvbiAoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVEVWQUxVQVRJT04gKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldHNlbWlvdGljIChkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfR0VUU0VNSU9USUNGUkFNRVdPUksgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Y2FyZihkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfR0VUQ0FSRiArICc/aWRwcm9ibGVtPScgKyBkYXRhIClcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVwcm9ibGVtKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9SRU1PVkVQUk9CTEVNICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRwcm9ibGVtc2NvbGxhYm9yYXRvcihkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfR0VUVVNFUlBST0JMRU1TQ09MTEFCT1JBVE9SICsgJz9lbWFpbD0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZWNvbGxhYm9yYXRvcnMoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX1JFTU9WRUNPTExBQk9SQVRPUiArICc/aWRwcm9ibGVtPScgKyBkYXRhLmlkcHJvYmxlbSArICcmZW1haWw9JyArIGRhdGEuZW1haWwgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRoaXN0b3J5Y2hhdChkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfR0VUSElTVE9SWUNIQVQgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjkvMDYvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignc2VtaW90aWNmcmFtZXdvcmtDb250cm9sbGVyJyxzZW1pb3RpY2ZyYW1ld29ya0NvbnRyb2xsZXIpO1xyXG5cclxuZnVuY3Rpb24gc2VtaW90aWNmcmFtZXdvcmtDb250cm9sbGVyKFNvY2tldCwkd2luZG93LCBwcm9ibGVtU2VydmljZSx0b2FzdEFwcCl7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5pZHByb2JsZW0gPSBcIlwiO1xyXG4gICAgc2VsZi5zYXZlU29jaWFsV29ybGQgPSBzYXZlU29jaWFsV29ybGQ7XHJcbiAgICBzZWxmLnNhdmVQcmFnbWF0aWMgPSBzYXZlUHJhZ21hdGljO1xyXG4gICAgc2VsZi5zYXZlU2VtYW50aWMgPSBzYXZlU2VtYW50aWM7XHJcbiAgICBzZWxmLnNhdmVTeW50YXRpYyA9IHNhdmVTeW50YXRpYztcclxuICAgIHNlbGYuc2F2ZUVtcGlyaWNhbCA9IHNhdmVFbXBpcmljYWw7XHJcbiAgICBzZWxmLnNhdmVQaHlzaWNhbCA9IHNhdmVQaHlzaWNhbDtcclxuICAgIHNlbGYuc2VtaW90aWNmcmFtZXdvcmsgPSBcIlwiO1xyXG4gICAgc2VsZi5pbml0U2VtaW90aWNGcmFtZXdvcmsgPSBpbml0U2VtaW90aWNGcmFtZXdvcms7XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFNlbWlvdGljRnJhbWV3b3JrKCl7XHJcbiAgICAgICAgc2VsZi5pZHByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRzZW1pb3RpYyhzZWxmLmlkcHJvYmxlbSlcclxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yayA9IGRhdGEuc2VtaW90aWNmcmFtZXdvcms7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvblVwZGF0ZVNvY2lhbFdvcmxkJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrLnNvY2lhbHdvcmxkID0gdGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVTb2NpYWxXb3JsZCh0ZXh0LGZsYWdTYXZlKXtcclxuICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZsYWdTYXZlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgndXBkYXRlU29jaWFsV29ybGQnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVQcmFnbWF0aWMnLCBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgIHNlbGYuc2VtaW90aWNmcmFtZXdvcmsucHJhZ21hdGljID0gdGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVQcmFnbWF0aWModGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZVByYWdtYXRpYycsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvblVwZGF0ZVNlbWFudGljJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrLnNlbWlvdGljcmFtZXdvcmsgPSB0ZXh0O1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2F2ZVNlbWFudGljKHRleHQsZmxhZ1NhdmUpe1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZmxhZ1NhdmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCd1cGRhdGVTZW1hbnRpYycsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvblVwZGF0ZVN5bnRhdGljJywgZnVuY3Rpb24gKHRleHQsZmxhZ1NhdmUpIHtcclxuICAgICAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrLnN5bnRhdGljID0gdGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVTeW50YXRpYyh0ZXh0LGZsYWdTYXZlKXtcclxuICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZsYWdTYXZlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgndXBkYXRlU3ludGF0aWMnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVFbXBpcmljYWwnLCBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgIHNlbGYuc2VtaW90aWNmcmFtZXdvcmsuZW1waXJpY2FsID0gdGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVFbXBpcmljYWwodGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZUVtcGlyaWNhbCcsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvblVwZGF0ZVBoeXNpY2FsJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrLnBoeXNpY2FsID0gdGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVQaHlzaWNhbCh0ZXh0LGZsYWdTYXZlKXtcclxuICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZsYWdTYXZlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgndXBkYXRlUGh5c2ljYWwnLCBvYmopO1xyXG4gICAgfVxyXG59XHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjkvMDYvMjAxNS5cclxuICovXHJcblxyXG47KGZ1bmN0aW9uKHVuZGVmaW5lZCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3N0YWtlaG9sZGVyQ29udHJvbGxlcicsc3Rha2Vob2xkZXJDb250cm9sbGVyKTtcclxuXHJcblxyXG5mdW5jdGlvbiBzdGFrZWhvbGRlckNvbnRyb2xsZXIoU29ja2V0LCR3aW5kb3cscHJvYmxlbVNlcnZpY2UsJG1kRGlhbG9nLHRvYXN0QXBwKXtcclxuXHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmlkcHJvYmxlbSA9IFwiXCI7XHJcbiAgICBzZWxmLnN0YWtlaG9sZGVyTGlzdCA9IFtdO1xyXG4gICAgc2VsZi5zdGFrZWhvbGRlciA9IFwiXCI7XHJcbiAgICBzZWxmLmludGl0T25pb24gPSBpbnRpdE9uaW9uO1xyXG4gICAgc2VsZi5tb3ZlID0gZmFsc2U7XHJcbiAgICBzZWxmLmluUHJvY2Vzc2luZyA9IHRydWU7XHJcbiAgICBzZWxmLnNhdmVTdGFrZWhvbGRlciA9IHNhdmVTdGFrZWhvbGRlcjtcclxuICAgIHNlbGYuc2V0T3BlbkVkaXQgPSBzZXRPcGVuRWRpdDtcclxuICAgIHNlbGYuZGVsUG9zdEl0ID0gZGVsUG9zdEl0O1xyXG4gICAgc2VsZi5hZGRQb3N0SXQgPSBhZGRQb3N0SXQ7XHJcbiAgICBzZWxmLmFjZW5kZSA9IGFjZW5kZTtcclxuICAgIHNlbGYuYXBhZ2EgPSBhcGFnYTtcclxuICAgIHNlbGYubG9jYWxjb2RlID0gJyc7XHJcblxyXG4gICAgZnVuY3Rpb24gaW50aXRPbmlvbigpe1xyXG4gICAgICAgIHNlbGYuaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgc2VsZi5sb2NhbGNvZGUgPSAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9jYWxjb2RlJyk7XHJcbiAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0b25pb24oc2VsZi5pZHByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0ID0gZGF0YS5zdGFrZWhvbGRlcnM7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25TYXZlJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuc3Rha2Vob2xkZXJMaXN0LCBmdW5jdGlvbiAoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgaWYgKHN0YWtlaG9sZGVyLl9pZCA9PSBkYXRhLl9pZCl7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5zdGFrZWhvbGRlciA9IGRhdGEuc3Rha2Vob2xkZXI7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIub3BlbkVkaXQgPSBkYXRhLm9wZW5FZGl0O1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIueCA9IGRhdGEueDtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnkgPSBkYXRhLnk7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci56aW5kZXggPSA5OTk5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2F2ZVN0YWtlaG9sZGVyKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE9uaW9uU2F2ZScsIHN0YWtlaG9sZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25FZGl0JywgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuc3Rha2Vob2xkZXJMaXN0LCBmdW5jdGlvbiAoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgaWYoc3Rha2Vob2xkZXIuX2lkID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIub3BlbkVkaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuemluZGV4ID0gOTk5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNldE9wZW5FZGl0KGlkKXtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb25FZGl0JywgaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RPbmlvblJlbW92ZScsIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHZhciBzdGFrZWhvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Rha2Vob2xkZXJcIiArc2VsZi5zdGFrZWhvbGRlckxpc3RbaWRdLl9pZCk7XHJcbiAgICAgICAgc3Rha2Vob2xkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBzZWxmLnN0YWtlaG9sZGVyTGlzdC5zcGxpY2UoaWQsMSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVQb3N0SXQoaW5kZXgsc3Rha2Vob2xkZXIpIHtcclxuXHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlcjogc3Rha2Vob2xkZXJcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvblJlbW92ZScsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGVsUG9zdEl0KGV2LGluZGV4LHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgIC5wYXJlbnQoYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpKVxyXG4gICAgICAgICAgICAudGl0bGUoJ0RldGV0ZSBTdGFrZWhvbGRlcj8nKVxyXG4gICAgICAgICAgICAuY29udGVudCgnVGl0bGU6ICcgKyBzdGFrZWhvbGRlci5uYW1lKVxyXG4gICAgICAgICAgICAuYXJpYUxhYmVsKCdSZW1vdmUgU3Rha2Vob2xkZXInKVxyXG4gICAgICAgICAgICAub2soJ1llcyEnKVxyXG4gICAgICAgICAgICAuY2FuY2VsKCdDYW5jZWwnKVxyXG4gICAgICAgICAgICAudGFyZ2V0RXZlbnQoZXYpO1xyXG4gICAgICAgICRtZERpYWxvZy5zaG93KGNvbmZpcm0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZVBvc3RJdChpbmRleCxzdGFrZWhvbGRlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE1vdmUnLCBmdW5jdGlvbiAoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgaWYoc2VsZi5sb2NhbGNvZGUgIT09IHN0YWtlaG9sZGVyLmxvY2FsY29kZSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YWtlaG9sZGVyJytzdGFrZWhvbGRlci5faWQpLnN0eWxlLmxlZnQgPSBzdGFrZWhvbGRlci54O1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YWtlaG9sZGVyJytzdGFrZWhvbGRlci5faWQpLnN0eWxlLnRvcCA9IHN0YWtlaG9sZGVyLnk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25BZGQnLCBmdW5jdGlvbiAocmV0b3Jubykge1xyXG4gICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0LnB1c2gocmV0b3Jubyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBhZGRQb3N0SXQoZSxjYW1hZGEpIHtcclxuXHJcbiAgICAgICAgdmFyIG5ld1N0YWtlaG9sZGVyID1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwib25pb25sYXllclwiOiBjYW1hZGEsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwib3BlbkVkaXRcIjogdHJ1ZSxcclxuICAgICAgICAgICAgXCJ4XCI6IGUucGFnZVggKyAncHgnLFxyXG4gICAgICAgICAgICBcInlcIjogKGUucGFnZVkpICsgJ3B4JyxcclxuICAgICAgICAgICAgXCJ6aW5kZXhcIjogOTk5OVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE9uaW9uQWRkJywgbmV3U3Rha2Vob2xkZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFjZW5kZShpZCkge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmFtZVwiK2lkKS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3RleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOycpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVnZW5kXCIraWQpLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIwLjdcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIwLjdcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXBhZ2EoaWQpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVcIitpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICd0ZXh0LWRlY29yYXRpb246IG5vbmU7Jyk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsZWdlbmRcIitpZCkuc2V0QXR0cmlidXRlKFwib3BhY2l0eVwiLCBcIjEuMFwiKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuc2V0QXR0cmlidXRlKFwib3BhY2l0eVwiLCBcIjEuMFwiKTtcclxuICAgIH1cclxufVxyXG5cclxufSkodGhpcyk7IiwiXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignc3RhcnRQcm9ibGVtQ29udHJvbGxlcicsc3RhcnRQcm9ibGVtQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gc3RhcnRQcm9ibGVtQ29udHJvbGxlcigkbWREaWFsb2csJHN0YXRlLEF1dGgsU29ja2V0LCAkd2luZG93LCBwcm9ibGVtU2VydmljZSx0b2FzdEFwcCApIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYubmlja25hbWUgPSBcIlwiO1xyXG4gICAgICAgIHNlbGYudXNlcmlkID0gXCJcIjtcclxuICAgICAgICBzZWxmLnVzZXJlbWFpbCA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi5wcm9ibGVtTGlzdCA9IFtdO1xyXG4gICAgICAgIHNlbGYucHJvYmxlbUNvbGxhYm9yYXRvckxpc3QgPSBbXTtcclxuICAgICAgICBzZWxmLmxvZ2luSW5Qcm9ncmVzcyA9IHRydWU7XHJcbiAgICAgICAgc2VsZi5nZXRQcm9ibGVtcyA9IGdldFByb2JsZW1zO1xyXG4gICAgICAgIHNlbGYucmV2b212ZVByb2JsZW0gPSByZXZvbXZlUHJvYmxlbTtcclxuICAgICAgICBzZWxmLnN0YXJ0TmV3UHJvYmxlbSA9IHN0YXJ0TmV3UHJvYmxlbTtcclxuICAgICAgICBzZWxmLmVkaXRQcm9ibGVtID0gZWRpdFByb2JsZW07XHJcbiAgICAgICAgc2VsZi5kb0xvZ291dCA9IGRvTG9nb3V0O1xyXG4gICAgICAgIHNlbGYubmV3UHJvYmxlbSA9IG5ld1Byb2JsZW07XHJcbiAgICAgICAgc2VsZi5lZGl0UHJvZmlsZSA9IGVkaXRQcm9maWxlO1xyXG4gICAgICAgIHNlbGYucGhvdG87XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcm9ibGVtcygpe1xyXG4gICAgICAgICAgICBzZWxmLnVzZXJpZCA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJpZCcpO1xyXG4gICAgICAgICAgICBzZWxmLm5pY2tuYW1lID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbmlja25hbWUnKTtcclxuICAgICAgICAgICAgc2VsZi51c2VyZW1haWwgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyZW1haWwnKTtcclxuICAgICAgICAgICAgc2VsZi5waG90byA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bob3RvJyk7XHJcblxyXG5cclxuICAgICAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0dXNlcnByb2JsZW1zKHNlbGYudXNlcmVtYWlsKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGRhdGEucHJvYmxlbXMubGVuZ3RoOyBpKysgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEucHJvYmxlbXNbaV0uZGVzY3JpcHRpb24ubGVuZ3RoID4gMzAwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uID0gZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbi5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZyxcIlwiKS5zdWJzdHJpbmcoMCwyODApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbiA9IGRhdGEucHJvYmxlbXNbaV0uZGVzY3JpcHRpb24ucmVwbGFjZSgvKDwoW14+XSspPikvaWcsXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm9ibGVtTGlzdCA9IGRhdGEucHJvYmxlbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHByb2JsZW1zY29sbGFib3JhdG9yKHNlbGYudXNlcmVtYWlsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGRhdGEucHJvYmxlbXMubGVuZ3RoOyBpKysgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEucHJvYmxlbXNbaV0uZGVzY3JpcHRpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbi5sZW5ndGggPiAzMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbiA9IGRhdGEucHJvYmxlbXNbaV0uZGVzY3JpcHRpb24ucmVwbGFjZSgvKDwoW14+XSspPikvaWcsIFwiXCIpLnN1YnN0cmluZygwLCAyODApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbiA9IGRhdGEucHJvYmxlbXNbaV0uZGVzY3JpcHRpb24ucmVwbGFjZSgvKDwoW14+XSspPikvaWcsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb2JsZW1Db2xsYWJvcmF0b3JMaXN0ID0gZGF0YS5wcm9ibGVtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2VsZi5sb2dpbkluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVByb2JsZW0ocHJvYmxlbWlkKXtcclxuICAgICAgICAgICAgcHJvYmxlbVNlcnZpY2UucmVtb3ZlcHJvYmxlbShwcm9ibGVtaWQpXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VsZi5wcm9ibGVtTGlzdC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzZWxmLnByb2JsZW1MaXN0W2ldLl9pZCA9PSBwcm9ibGVtaWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJvYmxlbUxpc3Quc3BsaWNlKGksMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZXZvbXZlUHJvYmxlbShldixwcm9ibGVtKSB7XHJcbiAgICAgICAgICAgIC8vIEFwcGVuZGluZyBkaWFsb2cgdG8gZG9jdW1lbnQuYm9keSB0byBjb3ZlciBzaWRlbmF2IGluIGRvY3MgYXBwXHJcbiAgICAgICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxyXG4gICAgICAgICAgICAgICAgLnBhcmVudChhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSkpXHJcbiAgICAgICAgICAgICAgICAudGl0bGUoJ0RldGV0ZSBQcm9ibGVtPycpXHJcbiAgICAgICAgICAgICAgICAuY29udGVudCgnVGl0bGU6ICcgKyBwcm9ibGVtLnRpdGxlKVxyXG4gICAgICAgICAgICAgICAgLmFyaWFMYWJlbCgnUmVtb3ZlIFByb2JsZW0nKVxyXG4gICAgICAgICAgICAgICAgLm9rKCdEZXNlam8gcmVtb3ZlciEnKVxyXG4gICAgICAgICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsJylcclxuICAgICAgICAgICAgICAgIC50YXJnZXRFdmVudChldik7XHJcbiAgICAgICAgICAgICRtZERpYWxvZy5zaG93KGNvbmZpcm0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVQcm9ibGVtKHByb2JsZW0uX2lkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzdGFydE5ld1Byb2JsZW0obmV3cHJvYmxlbSl7XHJcbiAgICAgICAgICAgIG5ld3Byb2JsZW0udXNlcmlkID0gc2VsZi51c2VyaWQ7XHJcblxyXG4gICAgICAgICAgICBwcm9ibGVtU2VydmljZS5uZXdwcm9ibGVtKG5ld3Byb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWRpdFByb2JsZW0oZGF0YS5wcm9ibGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZWRpdFByb2JsZW0ocHJvYmxlbSkge1xyXG4gICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJvYmxlbWlkXCIscHJvYmxlbS5faWQpO1xyXG4gICAgICAgICAgICB2YXIgaW5pdHNvY2tldHByb2JsZW0gPSB7XHJcbiAgICAgICAgICAgICAgICBcImlkcHJvYmxlbVwiOnByb2JsZW0uX2lkLFxyXG4gICAgICAgICAgICAgICAgXCJuaWNrbmFtZVwiOiBzZWxmLm5pY2tuYW1lXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFNvY2tldC5lbWl0KCdpbml0UHJvYmxlbScsIGluaXRzb2NrZXRwcm9ibGVtKTtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9ibGVtLnN0YWtlaG9sZGVycycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZG9Mb2dvdXQoKSB7XHJcbiAgICAgICAgICAgIEF1dGgubG9nb3V0KCk7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnaW5pdC5sb2dpbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBlZGl0UHJvZmlsZSgpIHtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9maWxlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBuZXdQcm9ibGVtKGV2KSB7XHJcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogRGlhbG9nQ29udHJvbGxlcixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL25ld3Byb2JsZW0uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBEaWFsb2dDb250cm9sbGVyKCRzY29wZSwgJGZpbHRlciwgJG1kRGlhbG9nKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pdGVtcyA9IFsnTEFCRUxfQVJUSUZBQ1RfU1RBS0VIT0xERVJTJyxcclxuICAgICAgICAgICAgICAgICdMQUJFTF9BUlRJRkFDVF9FVkFMVUFUSU9ORlJBTUVXT1JLJyxcclxuICAgICAgICAgICAgICAgICdMQUJFTF9BUlRJRkFDVF9TRU1JT1RJQ0ZSQU1FV09SSycsXHJcbiAgICAgICAgICAgICAgICAnTEFCRUxfQVJUSUZBQ1RfVklGJyxcclxuICAgICAgICAgICAgICAgICdMQUJFTF9BUlRJRkFDVF9DQVJGJ1xyXG4gICAgICAgICAgICAgICAgLyonTEFCRUxfQVJUSUZBQ1RfT05JT04nKi9dO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkID0gW107XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlID0gZnVuY3Rpb24gKGl0ZW0sIGxpc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpZHggPSBsaXN0LmluZGV4T2YoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtICE9PSAnTEFCRUxfQVJUSUZBQ1RfU1RBS0VIT0xERVJTJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobGlzdC5sZW5ndGggPT0gMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZSgkZmlsdGVyKCd0cmFuc2xhdGUnKSgnTEFCRUxfQVJUSUZBQ1RfU1RBS0VIT0xERVJTX05FQ0VTU0FSWScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0gIT0gJ0xBQkVMX0FSVElGQUNUX1NFTUlPVElDRlJBTUVXT1JLJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IGxpc3QuaW5kZXhPZignTEFCRUxfQVJUSUZBQ1RfU1RBS0VIT0xERVJTJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2goJ0xBQkVMX0FSVElGQUNUX1NUQUtFSE9MREVSUycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZXhpc3RzID0gZnVuY3Rpb24gKGl0ZW0sIGxpc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoaXRlbSkgPiAtMTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5pc0luZGV0ZXJtaW5hdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoJHNjb3BlLnNlbGVjdGVkLmxlbmd0aCAhPT0gMCAmJlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkLmxlbmd0aCAhPT0gJHNjb3BlLml0ZW1zLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuaXNDaGVja2VkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnNlbGVjdGVkLmxlbmd0aCA9PT0gJHNjb3BlLml0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS50b2dnbGVBbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2VsZWN0ZWQubGVuZ3RoID09PSAkc2NvcGUuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkID0gW107XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5zZWxlY3RlZC5sZW5ndGggPT09IDAgfHwgJHNjb3BlLnNlbGVjdGVkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuaXRlbXMuc2xpY2UoMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmFydGlmYWN0TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGROZXdQcm9ibGVtID0gZnVuY3Rpb24ocHJvYmxlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5zZWxlY3RlZC5sZW5ndGggPCAxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKCRmaWx0ZXIoJ3RyYW5zbGF0ZScpKCdMQUJFTF9DSE9JQ0VfQVJUSUZBQ1RTJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2JsZW0uYXJ0aWZhY3RzID0gICRzY29wZS5zZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJ0TmV3UHJvYmxlbShwcm9ibGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyMi8wNy8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcigndmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lQ29udHJvbGxlcicsIHZhbHVlSWRlbnRpZmljYXRpb25GcmFtZUNvbnRyb2xsZXIpO1xyXG5cclxuZnVuY3Rpb24gdmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lQ29udHJvbGxlcigkd2luZG93LHByb2JsZW1TZXJ2aWNlLHRvYXN0QXBwLFNvY2tldCl7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgc2VsZi5pZFByb2JsZW0gPSBcIlwiO1xyXG4gICAgc2VsZi51c2VyZW1haWwgPSBcIlwiO1xyXG4gICAgc2VsZi5uZXd2YWx1ZXMgPSBcIlwiO1xyXG4gICAgc2VsZi5pbml0VmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lID0gaW5pdFZhbHVlSWRlbnRpZmljYXRpb25GcmFtZTtcclxuICAgIHNlbGYuc2V0U3VnZ2VzdGlvblNob3cgPSBzZXRTdWdnZXN0aW9uU2hvdztcclxuICAgIHNlbGYubGVhdmVTdWdnZXN0aW9uU2hvdyA9IGxlYXZlU3VnZ2VzdGlvblNob3c7XHJcbiAgICBzZWxmLnJlbW92ZVZhbHVlSWRlbnRpY2F0aW9uID0gcmVtb3ZlVmFsdWVJZGVudGljYXRpb247XHJcbiAgICBzZWxmLnNldFZhbHVlSWRlbnRpY2F0aW9uID0gc2V0VmFsdWVJZGVudGljYXRpb247XHJcbiAgICBzZWxmLnN1Z2VzdGlvblZhbHVlcyA9IFwiXCI7XHJcbiAgICBzZWxmLnN0YWtlaG9sZGVyTGlzdCA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9uaW9ubGF5ZXI6IFwiQ29tbXVuaXR5XCIsXHJcbiAgICAgICAgICAgIHN0YWtlaG9sZGVyczogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb25pb25sYXllcjogXCJNYXJrZXRcIixcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXJzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBvbmlvbmxheWVyOiBcIlNvdXJjZVwiLFxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlcnM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9uaW9ubGF5ZXI6IFwiQ29udHJpYnV0aW9uXCIsXHJcbiAgICAgICAgICAgIHN0YWtlaG9sZGVyczogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb25pb25sYXllcjogXCJUZWNobmljb1wiLFxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlcnM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuICAgIHNlbGYuc3VnZXN0aW9uVmFsdWVzQXJyYXkgPSBbXHJcbiAgICAgICAgJ0FjZXNzaWJpbGlkYWRlJywnQWRhcHRhYmlsaWRhZGUnLCdFc3TDqXRpY2EnLCdBdXRvbm9taWEnLCAnRGlzcG9uaWJpbGlkYWRlJywgJ0NvbnNjacOqbmNpYScsICdDb2xhYm9yYcOnw6NvJyxcclxuICAgICAgICAnQ29udmVyc2HDp8OjbycsICdFbW/Dp8OjbyBlIEFmZXRvJywgJ0dydXBvcycsICdJZGVudGlkYWRlJywgJ0NvbnNlbnRpbWVudG8gaW5mb3JtYWRvJywgJ01ldGEtY29tdW5pY2HDp8OjbycsICdOb3JtYXMnLFxyXG4gICAgICAgICdPYmpldG8nLCAnUG9ydGFiaWxpZGFkZScsICdQcmVzZW7Dp2EnLCAnUHJpdmFjaWRhZGUnLCAnUHJvcHJpZWRhZGUnLCAnUmVjaXByb2NpZGFkZSwgUmVsYWNpb25hbWVudG8sIFJlcHV0YcOnw6NvJyxcclxuICAgICAgICAnRXNjYWxhYmlsaWRhZGUnLCAnU2VndXJhbsOnYScsICdDb21wYXJ0aWxoYW1lbnRvJywgJ0NvbmZpYW7Dp2EnLCAnVXNhYmlsaWRhZGUnLCAnVmlzaWJpbGlkYWRlJ107XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFZhbHVlSWRlbnRpZmljYXRpb25GcmFtZSgpe1xyXG4gICAgICAgIHNlbGYuaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0b25pb24oc2VsZi5pZHByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3Rha2Vob2xkZXJzLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBrID0gMTsgayA8IHNlbGYuc3VnZXN0aW9uVmFsdWVzQXJyYXkubGVuZ3RoOyBrKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3VnZXN0aW9uVmFsdWVzICs9IHNlbGYuc3VnZXN0aW9uVmFsdWVzQXJyYXlba10gKyAgXCIsIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN1Z2VzdGlvblZhbHVlc1tzZWxmLnN1Z2VzdGlvblZhbHVlc0FycmF5W3NlbGYuc3VnZXN0aW9uVmFsdWVzQXJyYXkubGVuZ3RoLTFdXSArICcuJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLnN0YWtlaG9sZGVycy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IHNlbGYuc3Rha2Vob2xkZXJMaXN0Lmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YWtlaG9sZGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lkIDogZGF0YS5zdGFrZWhvbGRlcnNbaV0uX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25pb25sYXllciA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLm9uaW9ubGF5ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgOiBkYXRhLnN0YWtlaG9sZGVyc1tpXS52YWx1ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lIDogZGF0YS5zdGFrZWhvbGRlcnNbaV0ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uIDogZGF0YS5zdGFrZWhvbGRlcnNbaV0uZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuRWRpdCA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLm9wZW5FZGl0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5IDogZGF0YS5zdGFrZWhvbGRlcnNbaV0ueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlcyA6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN0YWtlaG9sZGVyc1tpXS5vbmlvbmxheWVyID09IHNlbGYuc3Rha2Vob2xkZXJMaXN0W2pdLm9uaW9ubGF5ZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3Rbal0uc3Rha2Vob2xkZXJzLnB1c2goc3Rha2Vob2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25TYXZlJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VsZi5zdGFrZWhvbGRlckxpc3QsIGZ1bmN0aW9uIChzdGFrZWhvbGRlcikge1xyXG4gICAgICAgICAgICBpZiAoc3Rha2Vob2xkZXIuX2lkID09IGRhdGEuX2lkKXtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnN0YWtlaG9sZGVyID0gZGF0YS5zdGFrZWhvbGRlcjtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm5hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5kZXNjcmlwdGlvbiA9IGRhdGEuZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5vcGVuRWRpdCA9IGRhdGEub3BlbkVkaXQ7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci54ID0gZGF0YS54O1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIueSA9IGRhdGEueTtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm5ld1ZhbHVlcyA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXRTdWdnZXN0aW9uU2hvdyhzdGFrZWhvbGRlcil7XHJcbiAgICAgICAgc3Rha2Vob2xkZXIub3BlbkVkaXQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxlYXZlU3VnZ2VzdGlvblNob3coc3Rha2Vob2xkZXIpe1xyXG4gICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlVmFsdWVJZGVudGljYXRpb24odmFsdWUsc3Rha2Vob2xkZXIpe1xyXG4gICAgICAgIHZhciBuZXdMaXN0ID0gW107XHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHN0YWtlaG9sZGVyLnZhbHVlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGlmKHN0YWtlaG9sZGVyLnZhbHVlc1tpXSAhPSB2YWx1ZSl7XHJcbiAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2goc3Rha2Vob2xkZXIudmFsdWVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdGFrZWhvbGRlci52YWx1ZXMgPSBuZXdMaXN0O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvblNhdmUnLCBzdGFrZWhvbGRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0VmFsdWVJZGVudGljYXRpb24oc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICBpZigoc3Rha2Vob2xkZXIubmV3VmFsdWVzID09PSBcIlwiKSB8fCAoc3Rha2Vob2xkZXIubmV3VmFsdWVzID09PSB1bmRlZmluZWQpKXtcclxuICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKCdWYWxvciBuw6NvIGVzcGVjaWZpY2Fkby4nKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdmFyIHZhbHVlc0xpc3QgPSBzdGFrZWhvbGRlci5uZXdWYWx1ZXMuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCB2YWx1ZXNMaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKGZpbmRWYWx1ZShzdGFrZWhvbGRlci52YWx1ZXMsIHZhbHVlc0xpc3RbaV0pKXtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJEdXBsaWNhdGUgdmFsdWU6IFwiICsgdmFsdWVzTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci52YWx1ZXMucHVzaCh2YWx1ZXNMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlci5uZXdWYWx1ZXMgPSBcIlwiO1xyXG4gICAgICAgICAgICBzdGFrZWhvbGRlci5vcGVuRWRpdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb25TYXZlJywgc3Rha2Vob2xkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmluZFZhbHVlKGxpc3QsIHZhbHVlKXtcclxuICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBpZih2YWx1ZSA9PT0gbGlzdFtpXSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjgvMDcvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3Byb2ZpbGVDb250cm9sbGVyJyxwcm9maWxlQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvZmlsZUNvbnRyb2xsZXIoJHdpbmRvdywkc3RhdGUsICRzY29wZSxzaWdudXBTZXJ2aWNlKXtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5zdGFydFByb2ZpbGUgPSBzdGFydFByb2ZpbGU7XHJcbiAgICAgICAgc2VsZi51cGxvYWRJblByb2dyZXNzID0gdHJ1ZTtcclxuICAgICAgICBzZWxmLnVwbG9hZFByb2dyZXNzID0gMDtcclxuICAgICAgICBzZWxmLnVzZXJpZDtcclxuICAgICAgICBzZWxmLnNhdmVQaG90byA9IHNhdmVQaG90bztcclxuICAgICAgICBzZWxmLnN5c3RlbVJldHVybiA9IHN5c3RlbVJldHVybjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc3lzdGVtUmV0dXJuKCl7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnc3RhcnRwcm9ibGVtJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLm15SW1hZ2U9Jyc7XHJcbiAgICAgICAgc2VsZi5teUNyb3BwZWRJbWFnZT0nJztcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUZpbGVTZWxlY3QgPSBmdW5jdGlvbihldnQpIHtcclxuICAgICAgICAgICAgdmFyIGZpbGUgPSBldnQuY3VycmVudFRhcmdldC5maWxlc1swXTtcclxuICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm15SW1hZ2UgPSBldnQudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlsZUlucHV0JykpLm9uKCdjaGFuZ2UnLGhhbmRsZUZpbGVTZWxlY3QpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzdGFydFByb2ZpbGUoKXtcclxuICAgICAgICAgICAgc2VsZi51c2VyaWQgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlcmlkXCIpO1xyXG4gICAgICAgICAgICBpZihzZWxmLnVzZXJpZCAhPT0gdW5kZWZpbmVkKXtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZVBob3RvKG15aW1hZ2Upe1xyXG4gICAgICAgICAgICB2YXIgdXNlclBob3RvID17XHJcbiAgICAgICAgICAgICAgICB1c2VyaWQgOiAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlcmlkXCIpLFxyXG4gICAgICAgICAgICAgICAgcGhvdG8gOiBteWltYWdlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNpZ251cFNlcnZpY2UudXBsb2FkUGhvdG8odXNlclBob3RvKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicGhvdG9cIixteWltYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiLS0tLS1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3NpZ251cENvbnRyb2xsZXInLCBzaWdudXBDb250cm9sbGVyKTtcclxuICAgIHNpZ251cENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHRyYW5zbGF0ZScsJyR3aW5kb3cnLCdzaWdudXBTZXJ2aWNlJywnJHN0YXRlJywndG9hc3RBcHAnLCdBdXRoVG9rZW4nLCdBdXRoJywnJGZpbHRlcicsJyRzdGF0ZVBhcmFtcyddO1xyXG5cclxuICBmdW5jdGlvbiBzaWdudXBDb250cm9sbGVyKCR0cmFuc2xhdGUsICR3aW5kb3csIHNpZ251cFNlcnZpY2UsJHN0YXRlLHRvYXN0QXBwLEF1dGhUb2tlbixBdXRoLCRmaWx0ZXIsJHN0YXRlUGFyYW1zKXtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYubWVzc2FnZSAgPSAnJztcclxuICAgIHNlbGYuc2F2ZVVzZXIgICA9IHNhdmVVc2VyO1xyXG4gICAgc2VsZi5yZXNjdWVQYXNzd29yZCA9IHJlc2N1ZVBhc3N3b3JkO1xyXG4gICAgc2VsZi5jaGFuZ2VQYXNzd29yZCA9IGNoYW5nZVBhc3N3b3JkO1xyXG4gICAgc2VsZi5zZXRMYW5nID0gc2V0TGFuZztcclxuICAgIHNlbGYubG9naW5JblByb2dyZXNzID0gZmFsc2U7XHJcblxyXG4gICAgZnVuY3Rpb24gc2F2ZVVzZXIodXNlcikge1xyXG4gICAgICBzaWdudXBTZXJ2aWNlLmNyZWF0ZSh1c2VyKVxyXG4gICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKCRmaWx0ZXIoJ3RyYW5zbGF0ZScpKCdXRUxDT01FX1NZU1RFTScpICsgdXNlci5uaWNrbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2luaXQubG9naW4nKTtcclxuICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIkVtYWlsIErDoSBjYWRhc3RyYWRvXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHNldExhbmcobGFuZ0tleSkge1xyXG4gICAgICAgICAgJHRyYW5zbGF0ZS51c2UobGFuZ0tleSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJlc2N1ZVBhc3N3b3JkKHVzZXJFbWFpbCl7XHJcbiAgICAgICAgICBzaWdudXBTZXJ2aWNlLnJlc2N1ZVBhc3N3b3JkKHVzZXJFbWFpbClcclxuICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiRW1haWwgY29tIGluc3RydcOnw7VlcyBlbnZpYWRvIHBhcmEgXCIgKyB1c2VyRW1haWwuZW1haWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdpbml0LmxvZ2luJyk7XHJcbiAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiRXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gY2hhbmdlUGFzc3dvcmQodXNlcil7XHJcbiAgICAgICAgICBzaWdudXBTZXJ2aWNlLmNoYW5nZVBhc3N3b3JkKHVzZXIpXHJcbiAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlNlbmhhIGFsdGVyYWRhIGNvbSBzdWNlc3NvLiBGYcOnYSBsb2dpbiBjb20gYSBub3ZhIHNlbmhhLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnaW5pdC5sb2dpbicpO1xyXG4gICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIkVycm9yXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZhY3RvcnkoJ3NpZ251cFNlcnZpY2UnLCBzaWdudXBTZXJ2aWNlKTtcclxuXHJcbiAgc2lnbnVwU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsJyRsb2NhdGlvbiddO1xyXG5cclxuICBmdW5jdGlvbiBzaWdudXBTZXJ2aWNlKCRodHRwLCRsb2NhdGlvbikge1xyXG5cclxuICAgIHZhciBBUElfUk9VVEVfVVNFUiA9ICcvYXBpL3NpZ251cC8nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9SRVNDVUVQQVNTV09SRCA9ICcvYXBpL3Jlc2N1ZXBhc3N3ZC8nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9TRVRORVdQQVNTV09SRCA9ICcvYXBpL3Jlc2N1ZXBhc3N3ZC9uZXdwYXNzd2QvJztcclxuICAgIHZhciBBUElfUk9VVEVfVVBEQVRFUEhPVE8gPSAnL2FwaS9wcm9maWxlL3Bob3RvLyc7XHJcblxyXG5cclxuICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICBjcmVhdGUgICAgICAgICA6IGNyZWF0ZSxcclxuICAgICAgcmVzY3VlUGFzc3dvcmQgOiByZXNjdWVQYXNzd29yZCxcclxuICAgICAgY2hhbmdlUGFzc3dvcmQgOiBjaGFuZ2VQYXNzd29yZCxcclxuICAgICAgdXBsb2FkUGhvdG86IHVwbG9hZFBob3RvXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZShkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX1VTRVIsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2N1ZVBhc3N3b3JkKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdChBUElfUk9VVEVfUkVTQ1VFUEFTU1dPUkQsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoYW5nZVBhc3N3b3JkKGRhdGEpe1xyXG4gICAgICB2YXIgbXl0b2tlblVSTCA9ICRsb2NhdGlvbi5zZWFyY2goKTtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfU0VUTkVXUEFTU1dPUkQgKyAnP215dG9rZW49JyArIG15dG9rZW5VUkwubXl0b2tlbisnJnBhc3N3b3JkPScrZGF0YS5wYXNzd29yZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBsb2FkUGhvdG8oZGF0YSkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdChBUElfUk9VVEVfVVBEQVRFUEhPVE8sIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjUvMDYvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbmZpZyhhcHBDb25maWcpO1xyXG5cclxuICAgIGFwcENvbmZpZy4kaW5qZWN0ID0gWyckbWRUaGVtaW5nUHJvdmlkZXInLCckbG9jYXRpb25Qcm92aWRlciddO1xyXG5cclxuICAgLyogZnVuY3Rpb24gYXBwQ29uZmlnICgkbWRUaGVtaW5nUHJvdmlkZXIsJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuXHJcbiAgICAgICAgIC8vJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG4gICAgICAgIHZhciBjdXN0b21HcmVlbk1hcCA9ICRtZFRoZW1pbmdQcm92aWRlci5leHRlbmRQYWxldHRlKCd0ZWFsJywge1xyXG4gICAgICAgICAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxyXG4gICAgICAgICAgICAnY29udHJhc3REYXJrQ29sb3JzJzogWyc1MCddLFxyXG4gICAgICAgICAgICAnNTAnOiAnRTBGMkYxJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgnY3VzdG9tR3JlZW4nLCBjdXN0b21HcmVlbk1hcCk7XHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcclxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdjdXN0b21HcmVlbicsIHtcclxuICAgICAgICAgICAgICAgICdkZWZhdWx0JzogJzUwMCcsXHJcbiAgICAgICAgICAgICAgICAnaHVlLTEnOiAnNTAnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hY2NlbnRQYWxldHRlKCd0ZWFsJyk7XHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdpbnB1dCcsICdkZWZhdWx0JylcclxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdncmVlbicpO1xyXG5cclxuICAgIH07Ki9cclxuXHJcbiAgICBmdW5jdGlvbiBhcHBDb25maWcoJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gRXh0ZW5kIHRoZSByZWQgdGhlbWUgd2l0aCBhIGZldyBkaWZmZXJlbnQgY29sb3JzXHJcbiAgICAgICAgdmFyIG5lb25SZWRNYXAgPSAkbWRUaGVtaW5nUHJvdmlkZXIuZXh0ZW5kUGFsZXR0ZSgndGVhbCcsIHtcclxuICAgICAgICAgICAgJzUwJzogJ0UwRjJGMScsXHJcbiAgICAgICAgICAgICcxMDAnOiAnQjJERkRCJyxcclxuICAgICAgICAgICAgJzIwMCc6ICc4MENCQzQnLFxyXG4gICAgICAgICAgICAnMzAwJzogJzREQjZBQycsXHJcbiAgICAgICAgICAgICc0MDAnOiAnMjZBNjlBJyxcclxuICAgICAgICAgICAgJzUwMCc6ICcwMDk2ODgnLFxyXG4gICAgICAgICAgICAnNjAwJzogJzAwODk3QicsXHJcbiAgICAgICAgICAgICc3MDAnOiAnMDA3OTZCJyxcclxuICAgICAgICAgICAgJzgwMCc6ICcwMDY5NUMnLFxyXG4gICAgICAgICAgICAnOTAwJzogJzAwNEQ0MCcsXHJcbiAgICAgICAgICAgICdBMTAwJzogJ0E3RkZFQicsXHJcbiAgICAgICAgICAgICdBMjAwJzogJzY0RkZEQScsXHJcbiAgICAgICAgICAgICdBNDAwJzogJzFERTlCNicsXHJcbiAgICAgICAgICAgICdBNzAwJzogJzAwQkZBNScsXHJcbiAgICAgICAgICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsICAgIC8vIHdoZXRoZXIsIGJ5IGRlZmF1bHQsIHRleHQgKGNvbnRyYXN0KVxyXG4gICAgICAgICAgICAvLyBvbiB0aGlzIHBhbGV0dGUgc2hvdWxkIGJlIGRhcmsgb3IgbGlnaHRcclxuICAgICAgICAgICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6IFsnNTAnLCAnMTAwJywgLy9odWVzIHdoaWNoIGNvbnRyYXN0IHNob3VsZCBiZSAnZGFyaycgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgJzIwMCcsICczMDAnLCAnNDAwJywgJ0ExMDAnXSxcclxuICAgICAgICAgICAgJ2NvbnRyYXN0TGlnaHRDb2xvcnMnOiB1bmRlZmluZWRcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGNvbG9yIHBhbGV0dGUgbWFwIHdpdGggdGhlIG5hbWUgPGNvZGU+bmVvblJlZDwvY29kZT5cclxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgndGVhbCcsIG5lb25SZWRNYXApO1xyXG4gICAgICAgIC8vIFVzZSB0aGF0IHRoZW1lIGZvciB0aGUgcHJpbWFyeSBpbnRlbnRpb25zXHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcclxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCd0ZWFsJylcclxuICAgICAgICAgICAgLmFjY2VudFBhbGV0dGUoJ2dyZWVuJyk7XHJcbiAgICB9XHJcblxyXG5cclxufSkoKTsiLCJcclxuKGZ1bmN0aW9uKCl7XHJcblxyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhdXRoU2VydmljZScsIFtdKVxyXG5cdFx0LmZhY3RvcnkoJ0F1dGgnLCBmdW5jdGlvbigkaHR0cCwgJHEsIEF1dGhUb2tlbikge1xyXG5cdFx0XHR2YXIgYXV0aEZhY3RvcnkgPSB7fTtcclxuXHRcdFx0YXV0aEZhY3RvcnkubG9naW4gPSBmdW5jdGlvbihlbWFpbCwgcGFzc3dvcmQpIHtcclxuXHRcdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9sb2dpbicsIHtcclxuXHRcdFx0XHRcdGVtYWlsOiBlbWFpbCxcclxuXHRcdFx0XHRcdHBhc3N3b3JkOiBwYXNzd29yZFxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcblx0XHRcdFx0XHRcdEF1dGhUb2tlbi5zZXRUb2tlbihkYXRhLnRva2VuKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGF1dGhGYWN0b3J5LmxvZ291dCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdEF1dGhUb2tlbi5zZXRUb2tlbigpO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0YXV0aEZhY3RvcnkuaXNMb2dnZWRJbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmKEF1dGhUb2tlbi5nZXRUb2tlbigpKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0YXV0aEZhY3RvcnkuZ2V0VXNlciA9IGZ1bmN0aW9uKGlkKSB7XHJcblx0XHRcdFx0aWYoQXV0aFRva2VuLmdldFRva2VuKCkpIHtcclxuXHRcdFx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWUvP3VzZXJpZD0nICsgaWQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdHJldHVybiAkcS5yZWplY3Qoe21lc3NhZ2U6IFwiVXNlciBoYXMgbm8gdG9rZW5cIn0pO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH07XHJcblx0XHRcdHJldHVybiBhdXRoRmFjdG9yeTtcclxuXHRcdH0pXHJcblx0XHQuZmFjdG9yeSgnQXV0aFRva2VuJywgZnVuY3Rpb24oJHdpbmRvdykge1xyXG5cclxuXHRcdFx0dmFyIGF1dGhUb2tlbkZhY3RvcnkgPSB7fTtcclxuXHJcblx0XHRcdGF1dGhUb2tlbkZhY3RvcnkuZ2V0VG9rZW4gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGF1dGhUb2tlbkZhY3Rvcnkuc2V0VG9rZW4gPSBmdW5jdGlvbih0b2tlbikge1xyXG5cclxuXHRcdFx0XHRpZiAodG9rZW4pIHtcclxuXHRcdFx0XHRcdCR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgdG9rZW4pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0JHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9rZW4nKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9O1xyXG5cdFx0XHRyZXR1cm4gYXV0aFRva2VuRmFjdG9yeTtcclxuXHRcdH0pXHJcblx0XHQuZmFjdG9yeSgnQXV0aEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsICRsb2NhdGlvbiwgQXV0aFRva2VuKSB7XHJcblx0XHRcdHZhciBpbnRlcmNlcHRvckZhY3RvcnkgPSB7fTtcclxuXHRcdFx0aW50ZXJjZXB0b3JGYWN0b3J5LnJlcXVlc3QgPSBmdW5jdGlvbihjb25maWcpIHtcclxuXHRcdFx0XHR2YXIgdG9rZW4gPSBBdXRoVG9rZW4uZ2V0VG9rZW4oKTtcclxuXHRcdFx0XHRpZih0b2tlbikge1xyXG5cdFx0XHRcdFx0Y29uZmlnLmhlYWRlcnNbJ3gtYWNjZXNzLXRva2VuJ10gPSB0b2tlbjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGNvbmZpZztcclxuXHRcdFx0fTtcclxuXHRcdFx0cmV0dXJuIGludGVyY2VwdG9yRmFjdG9yeTtcclxuXHRcdH0pO1xyXG59KSgpOyIsIlxyXG5cclxuYW5ndWxhci5tb2R1bGUoJ0Ryb3BEU0MnLFtdKVxyXG4gICAgLmRpcmVjdGl2ZSgnZHJhZ2dhYmxlJywgZnVuY3Rpb24oJGRvY3VtZW50LFNvY2tldCwkd2luZG93KSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgaWYoZXZlbnQudGFyZ2V0LmlkLnN1YnN0cmluZygwLDExKSA9PSBcInN0YWtlaG9sZGVyXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCBkcmFnZ2luZyBvZiBzZWxlY3RlZCBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3Rha2Vob2xkZXIubG9jYWxjb2RlID0gICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvY2FsY29kZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LmJpbmQoJ21vdXNlbW92ZScsIG1vdXNlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LmJpbmQoJ21vdXNldXAnLCBtb3VzZXVwKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbW91c2Vtb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgaWRfZGl2ID0gZXZlbnQudGFyZ2V0LmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGlkX2RpdiA9PSAnc3ZnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlkX2RpdiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zdGFrZWhvbGRlci5vbmlvbmxheWVyID0gaWRfZGl2O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIHkgPSBldmVudC5wYWdlWTtcclxuICAgICAgICAgICAgICAgICAgICAgIHggPSBldmVudC5wYWdlWDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB5ICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAgeCArICdweCdcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgLypTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25Qb3NpdGlvbicsIGZ1bmN0aW9uIChzdGFrZWhvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBzdGFrZWhvbGRlci55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAgc3Rha2Vob2xkZXIueFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnN0YWtlaG9sZGVyLnggPSB4ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnN0YWtlaG9sZGVyLnkgPSB5ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgIC8vU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE9uaW9uUG9zaXRpb24nLCBzY29wZS5zdGFrZWhvbGRlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbW91c2V1cCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC51bmJpbmQoJ21vdXNlbW92ZScsIG1vdXNlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQudW5iaW5kKCdtb3VzZXVwJywgbW91c2V1cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0TW92ZScsIHNjb3BlLnN0YWtlaG9sZGVyKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9KTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgamVzdXMgb24gMjEvMDMvMjAxNi5cclxuICovXHJcbjsoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcFJ4RHJhZycsIFsncngnXSlcclxuICAgICAgICAuZGlyZWN0aXZlKCdyeGRyYWdnYWJsZScsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHdpbmRvdywgcngsIFNvY2tldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRocmVlIG1ham9yIGV2ZW50c1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsY29kZSA9ICAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsb2NhbGNvZGUnKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb3VzZXVwICAgPSByeC5PYnNlcnZhYmxlLmZyb21FdmVudChlbGVtZW50LCAgICdtb3VzZXVwJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW91c2Vtb3ZlID0gcnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoJGRvY3VtZW50LCAnbW91c2Vtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW91c2Vkb3duID0gcnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZWxlbWVudCwgICAnbW91c2Vkb3duJykubWFwKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBvZmZzZXRzIHdoZW4gbW91c2UgZG93blxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogZXZlbnQuY2xpZW50WCAtIGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAgZXZlbnQuY2xpZW50WSAtIGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb21iaW5lIG1vdXNlIGRvd24gd2l0aCBtb3VzZSBtb3ZlIHVudGlsIG1vdXNlIHVwXHJcbiAgICAgICAgICAgICAgICB2YXIgbW91c2VkcmFnID0gbW91c2Vkb3duLnNlbGVjdE1hbnkoZnVuY3Rpb24oaW1hZ2VPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW91c2Vtb3ZlLm1hcChmdW5jdGlvbiAocG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBvZmZzZXRzIGZyb20gbW91c2UgZG93biB0byBtb3VzZSBtb3Zlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcG9zLmNsaWVudFggLSBpbWFnZU9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAgcG9zLmNsaWVudFkgLSBpbWFnZU9mZnNldC50b3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50YWtlVW50aWwobW91c2V1cCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBtb3VzZWRyYWcuc3Vic2NyaWJlIChmdW5jdGlvbiAocG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jc3Moe3RvcDogcG9zLnRvcCArICdweCcsIGxlZnQ6IHBvcy5sZWZ0ICsgJ3B4J30pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcy5sb2NhbGNvZGUgPSBsb2NhbGNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE1vdmUnLHBvcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG5cclxufS5jYWxsKHRoaXMpKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI1LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignbG9naW5Db250cm9sbGVyJyxsb2dpbkNvbnRyb2xsZXIpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsb2dpbkNvbnRyb2xsZXIoJHRyYW5zbGF0ZSwgJHJvb3RTY29wZSwgJHN0YXRlLCBBdXRoLCAkd2luZG93LCAkZmlsdGVyLCB0b2FzdEFwcCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0TGFuZyA9IHNldExhbmc7XHJcbiAgICAgICAgICAgIHNlbGYuZG9Mb2dvdXQgPSBkb0xvZ291dDtcclxuICAgICAgICAgICAgc2VsZi5kb0xvZ2luID0gZG9Mb2dpbjtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldExhbmcobGFuZ0tleSkge1xyXG4gICAgICAgICAgICAgICAgICR0cmFuc2xhdGUudXNlKGxhbmdLZXkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRMb2NhbENvZGUoKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHNlbGYubG9nZ2VkSW4gPSBBdXRoLmlzTG9nZ2VkSW4oKTtcclxuXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2dnZWRJbiA9IEF1dGguaXNMb2dnZWRJbigpO1xyXG4gICAgICAgICAgICAgICAgQXV0aC5nZXRVc2VyKClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXNlciA9IGRhdGEuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBkb0xvZ2luKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHNlbGYuZXJyb3IgPSAnJztcclxuICAgICAgICAgICAgICAgIEF1dGgubG9naW4odXNlci5lbWFpbCwgdXNlci5wYXNzd29yZClcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyZW1haWxcIixkYXRhLmVtYWlsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXJpZFwiLGRhdGEuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibG9jYWxjb2RlXCIsZGF0YS5pZCArICctJyArIGdldExvY2FsQ29kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm5pY2tuYW1lXCIsZGF0YS5uaWNrbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0TGFuZyhkYXRhLmxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXV0aC5nZXRVc2VyKGRhdGEuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbih1c2VyRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZSgkZmlsdGVyKCd0cmFuc2xhdGUnKSgnV0VMQ09NRV9TWVNURU0nKSArIFwiOiBcIiArIGRhdGEubmlja25hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwaG90b1wiLHVzZXJEYXRhLmRhdGEucGhvdG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzdGFydHByb2JsZW0nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlVzdcOhcmlvIGUgc2VuaGEgbsOjbyBjb25mZXJlbS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBkb0xvZ291dCgpIHtcclxuICAgICAgICAgICAgICAgIEF1dGgubG9nb3V0KCk7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUoJ2luaXQnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyMS8wNi8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuc2VydmljZSgnU29ja2V0JyxcclxuICAgICAgICBbJyRsb2NhdGlvbicsICckdGltZW91dCcsXHJcbiAgICBmdW5jdGlvbigkbG9jYXRpb24sICR0aW1lb3V0KSB7XHJcbiAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBpbygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uID0gZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zb2NrZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5lbWl0ID0gZnVuY3Rpb24oZXZlbnROYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNvY2tldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdChldmVudE5hbWUsIGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zb2NrZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LnJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5dKVxyXG5cclxufSkoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
