function toastApp(e){function o(o){this.message=o,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top left",hideDelay:5e3})}var t={message:"",errorMessage:o};return t}function chatDSC(e,o,t,r,a,n){var i=this;i.newmsg="",i.messages=[],i.replay=!1,i.nickname="",i.close=function(){t("chat").close().then(function(){r.debug("close chat")})},i.initHistoryChat=function(){i.idProblem=n.localStorage.getItem("problemid"),i.nickname=n.localStorage.getItem("nickname"),a.gethistorychat(i.idProblem).success(function(e){if(e.success)for(var o=0;o<e.historychat.length;o++){var t=new Date(e.historychat[o].time),r={nickname:e.historychat[o].nickname,msg:e.historychat[o].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "};i.messages.push(r)}})},i.showReplay=function(){i.replay=i.replay?!1:!0},o.on("onBroadcastChat",function(e){var o=new Date(e[e.length-1].time);i.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "})}),i.sendMessage=function(e){o.emit("broadcastChat",e),i.newmsg=""}}function dscReportController(){function e(e){var o=document.getElementById("projectResport"),t=new jsPDF("l","px");t.addHTML(o,0,0,{pagesplit:!0},function(e){t.save("test.pdf")})}var o=this;o.idproblem="ajflajfljalfjaljf",o.buidReport=e}function evaluationframeworkController(e,o,t,r){function a(){n.idproblem=e.localStorage.getItem("problemid"),o.getevaluation(n.idproblem).success(function(e){e.success?n.evaluationframeworkList=e.evaluationframework:toastApp.errorMessage(e.message)})}var n=this;n.evaluationframeworkList=[],n.initEvaluation=a,t.on("onBroadcastFrameSave",function(e){angular.forEach(n.evaluationframeworkList,function(o){o.onionlayer==e.onionlayer&&angular.forEach(o.stakeholders,function(o){o._id==e._id&&(o.name=e.name,o.onionlayer=e.onionlayer,o.description=e.description,o.openEdit=e.openEdit,o.problems=e.problems,o.solutions=e.solutions)})})}),r.saveDiscution=function(e){t.emit("broadcastFrameSave",e)},t.on("onUpdateStakeholder",function(e){console.log(e)}),r.setOpenEditDiscution=function(e){e.openEdit=!0}}function semioticframeworkController(e,o,t){function r(){u.idproblem=o.localStorage.getItem("problemid"),t.getsemiotic(u.idproblem).success(function(e){e.success?u.semioticframework=e.semioticframework:toastApp.errorMessage(e.message)})}function a(o,t){var r={text:o,update:t};e.emit("updateSocialWorld",r)}function n(o,t){var r={text:o,update:t};e.emit("updatePragmatic",r)}function i(o,t){var r={text:o,update:t};e.emit("updateSemantic",r)}function s(o,t){var r={text:o,update:t};e.emit("updateSyntatic",r)}function l(o,t){var r={text:o,update:t};e.emit("updateEmpirical",r)}function c(o,t){var r={text:o,update:t};e.emit("updatePhysical",r)}var u=this;u.idproblem="",u.saveSocialWorld=a,u.savePragmatic=n,u.saveSemantic=i,u.saveSyntatic=s,u.saveEmpirical=l,u.savePhysical=c,u.semioticframework="",u.initSemioticFramework=r,e.on("onUpdateSocialWorld",function(e){u.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){u.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){u.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,o){u.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){u.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){u.semioticframework.physical=e})}function stakeholderController(e,o,t,r){function a(){n.idproblem=t.localStorage.getItem("problemid"),r.getonion(n.idproblem).success(function(e){e.success?n.stakeholderList=e.stakeholders:toastApp.errorMessage(e.message)}),n.inProcessing=!1}var n=this;n.idproblem="",n.stakeholderList=[],n.stakeholder="",n.intitOnion=a,n.move=!1,n.inProcessing=!0,e.on("onBroadcastOnionSave",function(e){angular.forEach(n.stakeholderList,function(o){o._id==e._id&&(o.stakeholder=e.stakeholder,o.name=e.name,o.description=e.description,o.openEdit=e.dadaopenEdit,o.x=e.x,o.y=e.y)})}),o.saveStakeholder=function(o){e.emit("broadcastOnionSave",o)},e.on("onBroadcastOnionEdit",function(e){angular.forEach(n.stakeholderList,function(o){o._id==e&&(o.openEdit=!0)})}),o.setOpenEdit=function(o){e.emit("broadcastOnionEdit",o)},e.on("onBroadcastOnionRemove",function(e){var o=document.getElementById("stakeholder"+n.stakeholderList[e]._id);o.style.display="none",n.stakeholderList.splice(e,1)}),o.setValue=function(){console.log("Chamando para trocar para true....")},o.delPostIt=function(o,t){var r={index:o,stakeholder:t};e.emit("broadcastOnionRemove",r)},e.on("onBroadcastOnionAdd",function(e){n.stakeholderList.push(e)}),o.addPostIt=function(o,t){var r=n.stakeholderList.length+1,a={_id:r,onionlayer:t,name:"",description:"",openEdit:!0,x:o.pageX+"px",y:o.pageY+"px"};e.emit("broadcastOnionAdd",a)},n.acende=function(e){e.target.setAttribute("opacity","0.8")},n.apaga=function(e){e.target.setAttribute("opacity","1.0")}}function valueIdentificationFrameController(e,o,t,r){var a=this;a.inProcessing=!0,a.idProblem="",a.useremail="",a.newvalues="",a.stakeholderList=[{onionlayer:"Community",stakeholders:[]},{onionlayer:"Market",stakeholders:[]},{onionlayer:"Source",stakeholders:[]},{onionlayer:"Contruibuition",stakeholders:[]},{onionlayer:"Technico",stakeholders:[]}],a.sugestionValues="",a.sugestionValuesArray=["Acessibilidade","Adaptabilidade","Est�tica","Autonomia","Disponibilidade","Consci�ncia","Colabora��o","Conversa��o","Emo��o e Afeto","Grupos","Identidade","Consentimento informado","Meta-comunica��o","Normas","Objeto","Portabilidade","Presen�a","Privacidade","Propriedade","Reciprocidade, Relacionamento, Reputa��o,Escalabilidade","Seguran�a","Compartilhamento","Confian�a","Usabilidade","Visibilidade"],a.initValueIdentificationFrame=function(){a.idproblem=e.localStorage.getItem("problemid"),o.getonion(a.idproblem).success(function(e){if(e.success){if(e.stakeholders.length>0){for(var o=1;o<a.sugestionValuesArray.length;o++)a.sugestionValues+=a.sugestionValuesArray[o]+", ";a.sugestionValues[a.sugestionValuesArray[a.sugestionValuesArray.length-1]]+".";for(var r=0;r<e.stakeholders.length;r++)for(var n=0;n<a.stakeholderList.length;n++){var i={_id:e.stakeholders[r]._id,onionlayer:e.stakeholders[r].onionlayer,values:e.stakeholders[r].values,name:e.stakeholders[r].name,description:e.stakeholders[r].description,openEdit:e.stakeholders[r].openEdit,newValues:[]};e.stakeholders[r].onionlayer!=a.stakeholderList[n].onionlayer||a.stakeholderList[n].stakeholders.push(i)}}a.inProcessing=!1}else t.errorMessage(e.message)})},r.on("onBroadcastOnionSave",function(e){angular.forEach(a.stakeholderList,function(o){o._id==e._id&&(o.onionlayer=e.onionlayer,o.values=e.values,o.name=e.name,o.description=e.description,o.openEdit=e.openEdit,o.newValues=[])})}),a.setSuggestionShow=function(e){e.openEdit=!0},a.leaveSuggestionShow=function(e){e.openEdit=!1},a.removeValueIdentication=function(e,o){for(var t=[],a=0;a<o.values.length;a++)o.values[a]!=e&&t.push(o.values[a]);o.values=t,r.emit("broadcastOnionSave",o)},a.setValueIdentication=function(e){if(console.log(e.values),""===e.newValues||void 0===e.newValues)t.errorMessage("Valor n�o especificado.");else{for(var o=e.newValues.split(","),a=0;a<o.length;a++)e.values.push(o[a]);console.log(e.values),e.newValues="",e.openEdit=!1,r.emit("broadcastOnionSave",e)}}}!function(){"use strict";angular.module("app",["toastService","textAngular","luegg.directives","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,o){var t=this;t.message=o.message,t.closeToast=function(){e.hide()}}]).factory("toastApp",toastApp),toastApp.$inject=["$mdToast"],function(){"use strict";function e(e,o){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.dscreport",{url:"/dscreport",views:{"problem-description":{templateUrl:"views/pages/dscreport.html",controller:"dscReportController as vm"}}}).state("problem.description",{url:"/description",views:{"problem-description":{templateUrl:"views/pages/problemdescription.html",controller:"editProblemController as vm"}}}).state("problem.collaborators",{url:"/collaborators",views:{"problem-description":{templateUrl:"views/pages/collaborators.html",controller:"controllerCollaborators as vm"}}}).state("problem.stakeholders",{url:"stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}).state("problem.vif",{url:"vif",views:{"dsc-artifact":{templateUrl:"views/pages/vif.html",controller:"valueIdentificationFrameController as vm"}}}),o.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,o,t,r){function a(){i.idProblem=e.localStorage.getItem("problemid"),t.getcarf(i.idProblem).success(function(e){e.success&&(i.localStakeholders=e.stakeholders,i.stakeholderList=i.localStakeholders,i.carfList=e.carf,i.carfPriorityList=i.localPriorityList)}),i.inProcessing=!1}function n(){i.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},i.valueList=[]}var i=this;i.idProblem="",i.inProcessing=!0,i.valueList=[],i.stakeholderList=[],i.localStakeholders=[],i.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},i.initCarf=a,i.carfList=[],i.carfPriorityList=[],o.on("onBroadcastCARFadd",function(e){i.carfList.push(e),n(),i.stakeholderList=i.localStakeholders,i.carfPriorityList=i.localPriorityList}),i.addpmsvalue=function(e){""==e.pms?r.errorMessage("Select PMS"):e.values.length<1?r.errorMessage("Select one or more Value"):e.stakeholders.length<1?r.errorMessage("Select one or more Stakeholder(s)"):""==e.priority?r.errorMessage("Select priority [Low, Medium or High]"):(o.emit("broadcastCARFadd",e),i.stakeholderList=[],i.carfPriorityList=[])},o.on("onBroadcastCARFremove",function(e){i.carfList.splice(e,1)}),i.removeCARF=function(e,t){var r={index:e,carf:t};o.emit("broadcastCARFremove",r)},i.selectPMSValue=function(e){void 0!=e&&angular.forEach(i.carfPMSValue,function(o){return o.pms==e?(i.carf.values=[],void(i.valueList=o.values)):void 0})},i.setPriotity=function(e){i.carf.priority=e},i.addListValue=function(e){if(0==i.carf.values.length)i.carf.values.push(e);else{for(var o=0;o<i.carf.values.length;o++)if(e==i.carf.values[o])return void i.carf.values.splice(o,1);i.carf.values.push(e)}},i.addStakeholder=function(e){if(0==i.carf.stakeholders.length)i.carf.stakeholders.push(e);else{for(var o=0;o<i.carf.stakeholders.length;o++)if(e==i.carf.stakeholders[o])return void i.carf.stakeholders.splice(o,1);i.carf.stakeholders.push(e)}},i.localPriorityList=["Low","Medium","High"],i.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),angular.module("app").controller("chatDSC",chatDSC),chatDSC.$inject=["$timeout","Socket","$mdSidenav","$log","problemService","$window"],function(){"use strict";function e(e,o,t){function r(e){for(var o=0;o<a.collaborators.length;o++)if(e==a.collaborators[o].email)return!0;return!1}var a=this;a.idProblem="",a.collaborators=[],a.useremail="",a.initCollaborators=function(){a.idProblem=e.localStorage.getItem("problemid"),a.useremail=e.localStorage.getItem("useremail"),o.getcollaborators(a.idProblem).success(function(e){e.success?a.collaborators=e.collaborators:t.errorMessage(e.message)})},a.addCollaborator=function(e){if(a.useremail==e)t.errorMessage(a.useremail+" is email of owner.");else if(r(e))t.errorMessage("Usuario Cadastrado.");else{var n={idproblem:a.idProblem,email:e};o.invite(n).success(function(e){e.success?a.collaborators=e.collaborators:t.errorMessage(e.message)})}},a.removeCollaborator=function(e){var r={idproblem:a.idProblem,email:e.email};o.removecollaborators(r).success(function(e){e.success?(t.errorMessage("Colaborador foi removido do projeto."),a.collaborators=e.collaborators):t.errorMessage(e.message)})}}angular.module("app").controller("controllerCollaborators",e),e.$inject=["$window","problemService","toastApp"]}(),angular.module("app").controller("dscReportController",dscReportController),angular.module("app").controller("evaluationframeworkController",evaluationframeworkController),evaluationframeworkController.$inject=["$window","problemService","Socket","$scope"],function(){"use strict";function e(e,o,t,r,a,n){function i(e){var o=a.debounce(function(){r(e).toggle().then(function(){n.debug("toggle "+e+" is done")})},300);return o}var s=this;s.openChat=i("chat"),s.formAddCollaborators=function(){t.go("problem.collaborators")},s.openReport=function(){t.go("problem.dscreport")},s.editDescriptionProblem=function(){t.go("problem.description")},s.doLogout=function(){e.logout(),t.go("init.login")}}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$timeout","$state","$mdSidenav","$mdUtil","$log"]}(),function(){"use strict";function e(e,o,t,r,a,n){var i=this,s=!0;i.problem="",i.tabsdsc=['<md-tab data-ui-sref="problem.stakeholders" md-active="$state.is(\'problem.stakeholders\')" label="{{\'LABEL_ARTIFACT_STAKEHOLDER\' | translate }}"></md-tab>','<md-tab data-ui-sref="problem.evaluationframework" md-active="$state.is(\'problem.evaluationframework\')" label="{{\'LABEL_ARTIFACT_EVALUATION_FRAMEWORK\' | translate }}"></md-tab>','<md-tab data-ui-sref="problem.semioticframework" md-active="$state.is(\'problem.semioticframework\')" label="{{\'LABEL_ARTIFACT_SEMIOTIC_FRAMEWORK\' | translate }}"></md-tab>','<md-tab data-ui-sref="problem.carf" md-active="$state.is(\'problem.carf\')" label="CARF"></md-tab></md-tabs>'],i.getCurrentProblem=function(){i.idProblem=a.localStorage.getItem("problemid"),n.getproblem(i.idProblem).success(function(e){e.success?i.problem=e.problem:r.errorMessage(e.message)})};var l=function(){s=!0};o.on("onAtualizarProblema",function(e){console.log("=========================================================================retorno...."+e),i.problem.description=e.description,i.problem.update=s}),e.problemUpdate=function(e){e.update=s,o.emit("atualizarProblema",e),s&&(s=!1,t(l,2e3))},e.saveDescription=function(e){console.log("============================================================================="),e.update=s,o.emit("atualizarProblema",e)}}angular.module("app").controller("editProblemController",e),e.$injectre=["$scope","Socket"],e.$inject=["$scope","Socket","$timeout","toastApp","$window","problemService"]}(),function(){"use strict";function e(e,o){function t(o){return e.post(v,o)}function r(o){return e.get(h+"?idproblem="+o)}function a(o){return e.get(f+"?email="+o)}function n(o){return e.get(k+"?idproblem="+o)}function i(o){return e.post(w,o)}function s(o){return e.get(S+"?idproblem="+o)}function l(o){return e.get(y+"?idproblem="+o)}function c(o){return e.get(P+"?idproblem="+o)}function u(o){return e.get(C+"?idproblem="+o)}function m(o){return e.get($+"?idproblem="+o)}function p(o){return e.get(b+"?email="+o)}function d(o){return e.get(L+"?idproblem="+o.idproblem+"&email="+o.email)}function g(o){return e.get(A+"?idproblem="+o)}var f="/api/problem/getproblems",b="/api/problem/getproblemscollaborator",v="/api/problem/newproblem",h="/api/problem/getproblem",k="/api/problem/getcollaborators",w="/api/problem/invite",S="/api/problem/getonion",y="/api/problem/getevaluation",P="/api/problem/getsemiotic",C="/api/problem/getcarf",$="/api/problem/removeproblem",L="/api/problem/removecollaborator",A="/api/problem/historychat",I={newproblem:t,getuserproblems:a,getproblem:r,getcollaborators:n,invite:i,getonion:s,getevaluation:l,getsemiotic:c,getcarf:u,removeproblem:m,getproblemscollaborator:p,removecollaborators:d,gethistorychat:g};return I}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),angular.module("app").controller("semioticframeworkController",semioticframeworkController),semioticframeworkController.$inject=["Socket","$window","problemService"],angular.module("app").controller("stakeholderController",stakeholderController),stakeholderController.$inject=["Socket","$scope","$window","problemService"],function(){"use strict";function e(e,o,t,r,a,n,i){function s(e){n.removeproblem(e).success(function(o){if(o.success){for(var t=0;t<c.problemList.length;t++)if(c.problemList[t]._id==e){c.problemList.splice(t,1);break}}else i.errorMessage(o.message)})}function l(e,o){e.hide=function(){o.hide()},e.cancel=function(){o.cancel()},e.addNewProblem=function(e){c.startNewProblem(e),o.cancel()}}var c=this;c.nickname="",c.userid="",c.useremail="",c.problemList=[],c.problemCollaboratorList=[],c.loginInProgress=!0,c.getProblems=function(){c.userid=a.localStorage.getItem("userid"),c.nickname=a.localStorage.getItem("nickname"),c.useremail=a.localStorage.getItem("useremail"),n.getuserproblems(c.useremail).success(function(e){if(e.success){for(var o=0;o<e.problems.length;o++)e.problems[o].description=e.problems[o].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);c.problemList=e.problems}else i.errorMessage(e.message)}),n.getproblemscollaborator(c.useremail).success(function(e){if(e.success){for(var o=0;o<e.problems.length;o++)e.problems[o].description=e.problems[o].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);c.problemCollaboratorList=e.problems}else i.errorMessage(e.message)}),c.loginInProgress=!1},c.revomveProblem=function(o,t){var r=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+t.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(o);e.show(r).then(function(){s(t._id)})},c.startNewProblem=function(e){e.userid=c.userid,n.newproblem(e).success(function(e){e.success?c.editProblem(e.problem):i.errorMessage(e.message)})},c.editProblem=function(e){a.localStorage.setItem("problemid",e._id);var t={idproblem:e._id,nickname:c.nickname};r.emit("initProblem",t),o.go("problem.stakeholders")},c.doLogout=function(){t.logout(),o.go("init.login")},c.newProblem=function(o){e.show({controller:l,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:o})},l.$inject=["$scope","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),angular.module("app").controller("valueIdentificationFrameController",valueIdentificationFrameController),valueIdentificationFrameController.$inject=["$window","problemService","toastApp","Socket"],function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function o(e){this.setLang=function(o){e.use(o)}}function t(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",o).directive("changeLanguage",t),e.$inject=["$translateProvider"],o.$inject=["$translate"]}(),function(){"use strict";function e(e,o,t,r,a,n,i,s,l){function c(e){t.create(e).success(function(t){t.success?(n.setToken(t.token),i.getUser().then(function(t){d.user=t.data,d.loginInProgress=!1,o.localStorage.setItem("useremail",e.email),o.localStorage.setItem("userid",e.id),o.localStorage.setItem("nickname",e.nickname),d.setLang(e.language),a.errorMessage(s("translate")("WELCOME_SYSTEM")+": "+d.user.nickname),r.go("startproblem")})):a.errorMessage("Email Já cadastrado")})}function u(o){e.use(o)}function m(e){t.rescuePassword(e).success(function(e){console.log(e),a.errorMessage(e.success?"Email com instruções enviado":"Error")})}function p(e){t.changePassword(e).success(function(e){e.success?(a.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),r.go("init")):a.errorMessage("Error")})}var d=this;d.message="",d.save=c,d.rescuePassword=m,d.changePassword=p,d.setLang=u,d.loginInProgress=!1}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,o){function t(o){return e.post(n,o)}function r(o){return e.post(i,o)}function a(t){var r=o.search();return e.get(s+"?mytoken="+r.mytoken+"&password="+t.password)}var n="/api/signup/",i="/api/rescuepasswd/",s="/api/rescuepasswd/newpasswd/",l={create:t,rescuePassword:r,changePassword:a};return l}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,o){var t=e.extendPalette("teal",{contrastDefaultColor:"light",contrastDarkColors:["50"],50:"E0F2F1"});e.definePalette("customGreen",t),e.theme("default").primaryPalette("customGreen",{"default":"500","hue-1":"50"}).accentPalette("teal"),e.theme("input","default").primaryPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,o,t){var r={};return r.login=function(o,r){return e.post("/api/login",{email:o,password:r}).success(function(e){return t.setToken(e.token),e})},r.logout=function(){t.setToken()},r.isLoggedIn=function(){return t.getToken()?!0:!1},r.getUser=function(){return t.getToken()?e.get("/api/me"):o.reject({message:"User has no token"})},r}]).factory("AuthToken",["$window",function(e){var o={};return o.getToken=function(){return e.localStorage.getItem("token")},o.setToken=function(o){o?e.localStorage.setItem("token",o):e.localStorage.removeItem("token")},o}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,o,t){var r={};return r.request=function(e){var o=t.getToken();return o&&(e.headers["x-access-token"]=o),e},r}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket",function(e,o){return{restrict:"A",replace:!0,link:function(o,t,r){function a(e){var r=e.target.id;"svg"==r&&(r=""),o.stakeholder.onionlayer=r,y=e.pageY,x=e.pageX,t.css({top:y+"px",left:x+"px"}),o.stakeholder.x=x+"px",o.stakeholder.y=y+"px"}function n(){e.unbind("mousemove",a),e.unbind("mouseup",n)}t.on("mousedown",function(o){"stakeholder"==o.target.id.substring(0,11)&&(o.preventDefault(),e.bind("mousemove",a),e.bind("mouseup",n))})}}}]),function(){"use strict";function e(e,o,t,r,a,n,i){var s=this;s.loginInProgress=!1,s.setLang=function(o){e.use(o)},s.loggedIn=r.isLoggedIn(),o.$on("$routeChangeStart",function(){s.loggedIn=r.isLoggedIn(),r.getUser().then(function(e){s.user=e.data})}),s.doLogin=function(e){s.loginInProgress=!0,s.error="",r.login(e.email,e.password).success(function(e){a.localStorage.setItem("useremail",e.email),a.localStorage.setItem("userid",e.id),a.localStorage.setItem("nickname",e.nickname),s.setLang(e.language),s.loginInProgress=!1,r.getUser().then(function(e){s.user=e.data,i.errorMessage(n("translate")("WELCOME_SYSTEM")+": "+s.user.nickname)}),e.success?t.go("startproblem"):s.error=e.message})},s.doLogout=function(){r.logout(),t("init")}}angular.module("app").controller("loginController",e),e.$inject=["$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),angular.module("app").service("Socket",["$location","$timeout",function(e,o){this.socket=io(),this.on=function(e,t){this.socket&&this.socket.on(e,function(e){o(function(){t(e)})})},this.emit=function(e,o){this.socket&&this.socket.emit(e,o)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}]);
//# sourceMappingURL=data:application/json;base64,