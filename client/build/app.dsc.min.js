!function(){"use strict";angular.module("app",["ngImgCrop","toastService","textAngular","luegg.directives","appRxDrag","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),function(){"use strict";function e(e){function t(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:2e3})}function o(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"bottom left",hideDelay:1e3})}var n={message:"",errorMessage:t,errorMessageBottom:o};return n}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,t){var o=this;o.message=t.message,o.closeToast=function(){e.hide()}}]).factory("toastApp",e),e.$inject=["$mdToast"]}(),function(){"use strict";function e(e,t){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("profile",{url:"/profile",templateUrl:"views/pages/profile.html",controller:"profileController as vm"}).state("dscreport",{url:"/dscreport",templateUrl:"views/pages/problemreport.html",controller:"problemReportController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.stakeholders",{url:"/stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"/evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"/semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"/carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}).state("problem.vif",{url:"/vif",views:{"dsc-artifact":{templateUrl:"views/pages/vif.html",controller:"valueIdentificationFrameController as vm"}}}).state("problem.onion",{url:"/onion",views:{"dsc-artifact":{templateUrl:"views/pages/onion.html",controller:"onion3LayerController as vm"}}}),t.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function t(e){function t(t){e.use(t)}var o=this;o.setLang=t}function o(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",t).directive("changeLanguage",o),e.$inject=["$translateProvider"],t.$inject=["$translate"]}(),function(){"use strict";function e(e,t,o,n,r,a){function i(){e.emit("disconnectProblem",t.localStorage.getItem("nickname")),o.go("startproblem")}function s(){c.userid=t.localStorage.getItem("userid"),void 0!==c.userid}function l(e){var o={userid:t.localStorage.getItem("userid"),photo:e};a.uploadPhoto(o).success(function(o){o.success?t.localStorage.setItem("photo",e):n.errorMessage("-----")})}var c=this;c.startProfile=s,c.uploadInProgress=!0,c.uploadProgress=0,c.userid,c.savePhoto=l,c.systemReturn=i,c.myImage="",c.myCroppedImage="";var u=function(e){var t=e.currentTarget.files[0],o=new FileReader;o.onload=function(e){r.$apply(function(t){t.myImage=e.target.result})},o.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",u)}angular.module("app").controller("profileController",e),e.$inject=["Socket","$window","$state","toastApp","$scope","signupService"]}(),function(){"use strict";function e(e,t,o,n,r,a,i,s,l){function c(e){o.create(e).success(function(t){t.success?(r.errorMessage(s("translate")("WELCOME_SYSTEM")+e.nickname),n.go("init.login")):r.errorMessage("Email Já cadastrado")})}function u(t){e.use(t)}function m(e){o.rescuePassword(e).success(function(t){t.success?(r.errorMessage("Email com instruções enviado para "+e.email),n.go("init.login")):r.errorMessage("Error")})}function d(e){o.changePassword(e).success(function(e){e.success?(r.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),n.go("init.login")):r.errorMessage("Error")})}var p=this;p.message="",p.saveUser=c,p.rescuePassword=m,p.changePassword=d,p.setLang=u,p.loginInProgress=!1}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(i,t)}function n(t){return e.post(s,t)}function r(o){var n=t.search();return e.get(l+"?mytoken="+n.mytoken+"&password="+o.password)}function a(t){return e.post(c,t)}var i="/api/signup/",s="/api/rescuepasswd/",l="/api/rescuepasswd/newpasswd/",c="/api/profile/photo/",u={create:o,rescuePassword:n,changePassword:r,uploadPhoto:a};return u}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t,o,n){function r(){d.idProblem=e.localStorage.getItem("problemid"),o.getcarf(d.idProblem).success(function(e){e.success&&(d.localStakeholders=e.stakeholders,d.stakeholderList=d.localStakeholders,d.carfList=e.carf,d.carfPriorityList=d.localPriorityList)}),d.inProcessing=!1}function a(){d.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},d.valueList=[]}function i(e){""===e.pms?n.errorMessage("Select PMS"):e.values.length<1?n.errorMessage("Select one or more Value"):e.stakeholders.length<1?n.errorMessage("Select one or more Stakeholder(s)"):""===e.priority?n.errorMessage("Select priority [Low, Medium or High]"):(t.emit("broadcastCARFadd",e),d.stakeholderList=[],d.carfPriorityList=[])}function s(e,o){var n={index:e,carf:o};t.emit("broadcastCARFremove",n)}function l(e){void 0!==e&&angular.forEach(d.carfPMSValue,function(t){return t.pms==e?(d.carf.values=[],void(d.valueList=t.values)):void 0})}function c(e){d.carf.priority=e}function u(e){if(0===d.carf.values.length)d.carf.values.push(e);else{for(var t=0;t<d.carf.values.length;t++)if(e==d.carf.values[t])return void d.carf.values.splice(t,1);d.carf.values.push(e)}}function m(e){if(0===d.carf.stakeholders.length)d.carf.stakeholders.push(e);else{for(var t=0;t<d.carf.stakeholders.length;t++)if(e==d.carf.stakeholders[t])return void d.carf.stakeholders.splice(t,1);d.carf.stakeholders.push(e)}}var d=this;d.idProblem="",d.inProcessing=!0,d.valueList=[],d.stakeholderList=[],d.localStakeholders=[],d.addpmsvalue=i,d.removeCARF=s,d.selectPMSValue=l,d.setPriotity=c,d.addListValue=u,d.addStakeholder=m,d.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},d.initCarf=r,d.carfList=[],d.carfPriorityList=[],t.on("onBroadcastCARFadd",function(e){d.carfList.push(e),a(),d.stakeholderList=d.localStakeholders,d.carfPriorityList=d.localPriorityList}),t.on("onBroadcastCARFremove",function(e){d.carfList.splice(e,1)}),d.localPriorityList=["Low","Medium","High"],d.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,n,r,a){function i(){g.usersOnLine.length>1&&(g.showUser=!g.showUser)}function s(){g.isOpenChat=!g.isOpenChat,document.getElementById("message").focus()}function l(){g.idProblem=a.localStorage.getItem("problemid"),g.nickname=a.localStorage.getItem("nickname"),g.photo=a.localStorage.getItem("photo"),r.gethistorychat(g.idProblem).success(function(e){if(e.success)for(var t=0;t<e.historychat.length;t++){var o=new Date(e.historychat[t].time),n={nickname:e.historychat[t].nickname,msg:e.historychat[t].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "};g.messages.push(n)}})}function c(e){for(var t=0;t<g.usersOnLine.length;t++)if(g.usersOnLine[t]===e)return;g.usersOnLine.push(e),g.usersOnLine.sort()}function u(){g.replay?g.replay=!1:g.replay=!0}function m(e){void 0===e||e.length<2||(n.emit("broadcastChat",e),g.newmsg="",g.contador=0)}function d(){g.contador=0}function p(t,o){13==t.keyCode&&(g.contador++,1==g.contador&&e(d,2e3),g.contador>1&&m(o))}var g=this;g.newmsg="",g.messages=[],g.replay=!1,g.nickname="",g.usersOnLine=[],g.initHistoryChat=l,g.showReplay=u,g.sendMessage=m,g.photo="",g.openChat=s,g.isOpenChat=!1,g.keypressChat=p,g.contador=0,g.showUsersOnLine=i,g.showUser=!1,n.on("onUserON",function(e){e!==g.nickname&&c(e)}),n.on("onNotifyON",function(e){return g.nickname!==e.nickname?(o.errorMessageBottom(e.nickname+", "+t("translate")(e.msg)),c(e.nickname),void n.emit("userON",g.nickname)):(g.usersOnLine=[],void g.usersOnLine.push(g.nickname))}),n.on("onNotifyOFF",function(e){e.nickname!==g.nickname&&o.errorMessageBottom(e.nickname+", "+t("translate")(e.msg));for(var n=0;n<g.usersOnLine.length;n++)e.nickname===g.usersOnLine[n]&&g.usersOnLine.splice(n,1)}),n.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);g.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})}),n.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);g.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})})}angular.module("app").controller("chatDSC",e),e.$inject=["$timeout","$filter","toastApp","Socket","problemService","$window"]}(),function(){"use strict";function e(){function e(e){var t=document.getElementById("projectResport"),o=new jsPDF("l","px");o.addHTML(t,0,0,{pagesplit:!0},function(e){o.save("test.pdf")})}var t=this;t.idproblem="ajflajfljalfjaljf",t.buidReport=e}angular.module("app").controller("dscReportController",e)}(),function(){"use strict";function e(e,t,o,n){function r(){s.idproblem=e.localStorage.getItem("problemid"),t.getevaluation(s.idproblem).success(function(e){e.success?s.evaluationframeworkList=e.evaluationframework:n.errorMessage(e.message)})}function a(e){o.emit("broadcastFrameSave",e)}function i(e){e.openEdit=!0}var s=this;s.evaluationframeworkList=[],s.initEvaluation=r,s.setOpenEditDiscution=i,s.saveFrame=a,o.on("onBroadcastFrameEdit",function(e){angular.forEach(s.evaluationframeworkList,function(t){t.onionlayer==e.onionlayer&&angular.forEach(t.stakeholders,function(t){t._id==e._id&&(t.name=e.name,t.onionlayer=e.onionlayer,t.description=e.description,t.openEdit=e.openEdit,t.problems=e.problems,t.solutions=e.solutions)})})}),o.on("onUpdateStakeholder",function(e){})}angular.module("app").controller("evaluationframeworkController",e),e.$inject=["$window","problemService","Socket","toastApp"]}(),function(){"use strict";function e(e,t,o,n,r,a,i,s,l){function c(e){e.localcode=w,l.emit("atualizarProblema",e)}function u(e){t.show({controller:m,templateUrl:"views/pages/problemdescription.html",parent:angular.element(document.body),targetEvent:e})}function m(e,t,o){function n(){t.nickname=a.localStorage.getItem("nickname"),t.idProblem=a.localStorage.getItem("problemid"),i.getproblem(y.idProblem).success(function(e){e.success?t.problem=e.problem:s.errorMessage(e.message)})}function r(){m=!0}function l(t){console.log(t);var o={update:m,description:t};c(o),m&&(m=!1,e(r,2e3))}function u(e){var t={update:!0,description:e};c(t)}var m=!0;t.problem,t.problemUpdate=l,t.getProblemEdit=n,t.saveDescription=u,t.nickname="",t.hide=function(){o.hide()},t.cancel=function(){o.cancel()}}function d(e){t.show({controller:p,templateUrl:"views/pages/collaborators.html",parent:angular.element(document.body),targetEvent:e})}function p(e,t){function o(){e.idProblem=a.localStorage.getItem("problemid"),e.useremail=a.localStorage.getItem("useremail"),i.getcollaborators(e.idProblem).success(function(t){t.success?e.collaborators=t.collaborators:s.errorMessage(t.message)})}function n(t){for(var o=0;o<e.collaborators.length;o++)if(t==e.collaborators[o].email)return!0;return!1}function r(t){if(e.useremail==t)s.errorMessage(e.useremail+" is email of owner.");else if(n(t))s.errorMessage("Usuario Cadastrado.");else{var o={idproblem:e.idProblem,email:t};i.invite(o).success(function(t){t.success?(e.collaborators=t.collaborators,e.email=""):s.errorMessage(t.message)})}}function l(e){e.isDeleted=!e.isDeleted}function c(t){t.idproblem=e.idProblem,i.removecollaborators(t).success(function(o){o.success?(e.collaborators=o.collaborators,e.isDeleteCollaborator=!e.isDeleteCollaborator,s.errorMessage("Colaborador "+t.nickname+" foi removido do projeto.")):s.errorMessage(o.message)})}e.idProblem="",e.collaborators=[],e.useremail="",e.initCollaborators=o,e.addCollaborator=r,e.removeCollaborator=c,e.alertDeleteCollaborator=l,e.email="",e.hide=function(){t.hide()},e.cancel=function(){t.cancel()}}function g(){y.nickname=a.localStorage.getItem("nickname"),y.idProblem=a.localStorage.getItem("problemid"),w=a.localStorage.getItem("localcode"),i.getproblem(y.idProblem).success(function(e){e.success?(y.problem=e.problem,angular.forEach(e.problem.artifacts,function(e){var t=e.split("_");y.dsc_artifacts.push({name:"problem."+t[2].toLowerCase(),label:n("translate")(e)})})):s.errorMessage(e.message)});var e={idproblem:y.idProblem,nickname:y.nickname};l.emit("initProblem",e)}function f(){l.emit("disconnectProblem",y.nickname),r.go("startproblem")}function h(){r.go("problem.collaborators")}function b(){r.go("dscreport")}function v(){r.go("problem.description")}function k(){l.emit("disconnectProblem",y.nickname),e.logout(),r.go("init.login")}var y=this;y.formAddCollaborators=h,y.editDescriptionProblem=v,y.doLogout=k,y.systemReturn=f,y.formProblemReport=b,y.getCurrentProblem=g,y.nickname,y.dsc_artifacts=[],y.formEditProblem=u,y.formInviteCollaborator=d;var w="";l.on("onAtualizarProblema",function(e){w!==e.localcode&&setDescrition(e.description)}),m.$inject=["$timeout","$scope","$mdDialog"],p.$inject=["$scope","$mdDialog"],y.selectedIndex=0;var S=null,L=null;o.$watch("selectedIndex",function(e){L=S,S=y.dsc_artifacts[e],y.selectedIndex=e})}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$mdDialog","$scope","$filter","$state","$window","problemService","toastApp","Socket"]}(),function(e){"use strict";function t(e,t,o,n,r){function a(){p.idproblem=t.localStorage.getItem("problemid"),p.localcode=t.localStorage.getItem("localcode"),p.inProcessing=!1}function i(t){e.emit("broadcastOnion3LayerSave",t)}function s(t){e.emit("broadcastOnion3LayerEdit",t)}function l(t,o){var n={index:t,postit:o};e.emit("broadcastOnion3LayerRemove",n)}function c(e,t,o){var r=n.confirm().parent(angular.element(document.body)).title("Detete Postit?").content("Title: "+onion.title).ariaLabel("Remove postit").ok("Yes!").cancel("Cancel").targetEvent(e);n.show(r).then(function(){l(t,o)})}function u(t,o){var n={onionlayer:o,title:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px",zindex:9999};e.emit("broadcastOnion3LayerAdd",n)}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline; fill: #8FBC8F;"),document.getElementById(e).setAttribute("style","fill: #8FBC8F;"),document.getElementById("legend"+e).setAttribute("opacity","0.7"),document.getElementById(e).setAttribute("opacity","0.7")}function d(e,t){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById(e).setAttribute("style","fill: "+t+";"),document.getElementById("legend"+e).setAttribute("opacity","1.0"),document.getElementById(e).setAttribute("opacity","1.0")}var p=this;p.idproblem="",p.initOnion3Layer=a,p.move=!1,p.onion3LayerList=[],p.inProcessing=!0,p.saveOnion3Layer=i,p.setOpenEdit=s,p.delPostIt=c,p.addPostIt=u,p.acende=m,p.apaga=d,p.localcode="",e.on("onBroadcastOnion3LayerSave",function(e){angular.forEach(p.onion3LayerList,function(t){t._id==e._id&&(t.title=e.title,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.zindex=9999)})}),e.on("onBroadcastOnion3LayerEdit",function(e){angular.forEach(p.onion3LayerList,function(t){t._id===e&&(t.openEdit=!0,t.zindex=9999)})}),e.on("onBroadcastOnion3LayerRemove",function(e){document.getElementById("postit"+p.onion3LayerList[e]._id);onion3Layer.style.display="none",p.onion3LayerList.splice(e,1)}),e.on("onBroadcastOnion3LayerMove",function(e){p.localcode!==e.localcode&&(document.getElementById("postit"+e._id).style.left=e.x,document.getElementById("postit"+e._id).style.top=e.y)}),e.on("onBroadcastOnion3LayerAdd",function(e){p.onion3LayerList.push(e)})}angular.module("app").controller("onion3LayerController",t),t.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,t,o,n){function r(){i.idProblem=e.localStorage.getItem("problemid"),t.getproblemreport(i.idProblem).success(function(e){e.success?(angular.forEach(e.problem.stakeholders,function(e){e.x=parseInt(e.x.substring(0,e.x.length-2))-100+"px",e.y=parseInt(e.y.substring(0,e.y.length-2))+400+"px"}),i.problem=e.problem):o.errorMessage(e.message)})}function a(){n.go("problem.stakeholders")}var i=this;i.idProblem,i.problem,i.initProblemPeport=r,i.systemReturn=a}angular.module("app").controller("problemReportController",e),e.$inject=["$window","problemService","toastApp","$state"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(v,t)}function n(t){return e.get(y+"?idproblem="+t)}function r(t){return e.get(k+"?idproblem="+t)}function a(t){return e.get(h+"?email="+t)}function i(t){return e.get(w+"?idproblem="+t)}function s(t){return e.post(S,t)}function l(t){return e.get(L+"?idproblem="+t)}function c(t){return e.get(A+"?idproblem="+t)}function u(t){return e.get(E+"?idproblem="+t)}function m(t){return e.get(P+"?idproblem="+t)}function d(t){return e.get(I+"?idproblem="+t)}function p(t){return e.get(b+"?email="+t)}function g(t){return e.get(C+"?idproblem="+t.idproblem+"&email="+t.email)}function f(t){return e.get($+"?idproblem="+t)}var h="/api/problem/getproblems",b="/api/problem/getproblemscollaborator",v="/api/problem/newproblem",k="/api/problem/getproblem",y="/api/problem/getproblemreport",w="/api/problem/getcollaborators",S="/api/problem/invite",L="/api/problem/getonion",A="/api/problem/getevaluation",E="/api/problem/getsemiotic",P="/api/problem/getcarf",I="/api/problem/removeproblem",C="/api/problem/removecollaborator",$="/api/problem/historychat",M={newproblem:o,getuserproblems:a,getproblem:r,getcollaborators:i,invite:s,getonion:l,getevaluation:c,getsemiotic:u,getcarf:m,removeproblem:d,getproblemscollaborator:p,removecollaborators:g,gethistorychat:f,getproblemreport:n};return M}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t,o,n){function r(){m.idproblem=t.localStorage.getItem("problemid"),o.getsemiotic(m.idproblem).success(function(e){e.success?m.semioticframework=e.semioticframework:n.errorMessage(e.message)})}function a(t,o){var n={text:t,update:o};e.emit("updateSocialWorld",n)}function i(t,o){var n={text:t,update:o};e.emit("updatePragmatic",n)}function s(t,o){var n={text:t,update:o};e.emit("updateSemantic",n)}function l(t,o){var n={text:t,update:o};e.emit("updateSyntatic",n)}function c(t,o){var n={text:t,update:o};e.emit("updateEmpirical",n)}function u(t,o){var n={text:t,update:o};e.emit("updatePhysical",n)}var m=this;m.idproblem="",m.saveSocialWorld=a,m.savePragmatic=i,m.saveSemantic=s,m.saveSyntatic=l,m.saveEmpirical=c,m.savePhysical=u,m.semioticframework="",m.initSemioticFramework=r,e.on("onUpdateSocialWorld",function(e){m.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){m.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){m.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,t){m.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){m.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){m.semioticframework.physical=e})}angular.module("app").controller("semioticframeworkController",e),e.$inject=["Socket","$window","problemService","toastApp"]}(),function(e){"use strict";function t(e,t,o,n,r){function a(){p.idproblem=t.localStorage.getItem("problemid"),p.localcode=t.localStorage.getItem("localcode"),o.getonion(p.idproblem).success(function(e){e.success?p.stakeholderList=e.stakeholders:r.errorMessage(e.message)}),p.inProcessing=!1}function i(t){e.emit("broadcastOnionSave",t)}function s(t){e.emit("broadcastOnionEdit",t)}function l(t,o){var n={index:t,stakeholder:o};e.emit("broadcastOnionRemove",n)}function c(e,t,o){var r=n.confirm().parent(angular.element(document.body)).title("Detete Stakeholder?").content("Title: "+o.name).ariaLabel("Remove Stakeholder").ok("Yes!").cancel("Cancel").targetEvent(e);n.show(r).then(function(){l(t,o)})}function u(t,o){var n={onionlayer:o,name:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px",zindex:9999};e.emit("broadcastOnionAdd",n)}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline;"),document.getElementById("legend"+e).setAttribute("opacity","0.7"),document.getElementById(e).setAttribute("opacity","0.7")}function d(e){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById("legend"+e).setAttribute("opacity","1.0"),document.getElementById(e).setAttribute("opacity","1.0")}var p=this;p.idproblem="",p.stakeholderList=[],p.stakeholder="",p.intitOnion=a,p.move=!1,p.inProcessing=!0,p.saveStakeholder=i,p.setOpenEdit=s,p.delPostIt=c,p.addPostIt=u,p.acende=m,p.apaga=d,p.localcode="",e.on("onBroadcastOnionSave",function(e){angular.forEach(p.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.zindex=9999)})}),e.on("onBroadcastOnionEdit",function(e){angular.forEach(p.stakeholderList,function(t){t._id===e&&(t.openEdit=!0,t.zindex=9999)})}),e.on("onBroadcastOnionRemove",function(e){var t=document.getElementById("stakeholder"+p.stakeholderList[e]._id);t.style.display="none",p.stakeholderList.splice(e,1)}),e.on("onBroadcastMove",function(e){p.localcode!==e.localcode&&(document.getElementById("stakeholder"+e._id).style.left=e.x,document.getElementById("stakeholder"+e._id).style.top=e.y)}),e.on("onBroadcastOnionAdd",function(e){p.stakeholderList.push(e)})}angular.module("app").controller("stakeholderController",t),t.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,t,o,n,r,a,i){function s(){h.userid=r.localStorage.getItem("userid"),h.nickname=r.localStorage.getItem("nickname"),h.useremail=r.localStorage.getItem("useremail"),h.photo=r.localStorage.getItem("photo"),a.getuserproblems(h.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description.length>300?e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,280):e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"");h.problemList=e.problems,a.getproblemscollaborator(h.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)null!==e.problems[t].description&&(e.problems[t].description.length>300?e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,280):e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,""));h.problemCollaboratorList=e.problems}else i.errorMessage(e.message)})}else i.errorMessage(e.message)}),h.loginInProgress=!1}function l(e){a.removeproblem(e).success(function(t){if(t.success){for(var o=0;o<h.problemList.length;o++)if(h.problemList[o]._id==e){h.problemList.splice(o,1);break}}else i.errorMessage(t.message)})}function c(t,o){var n=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+o.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(t);e.show(n).then(function(){l(o._id)})}function u(e){e.userid=h.userid,a.newproblem(e).success(function(e){e.success?h.editProblem(e.problem):i.errorMessage(e.message)})}function m(e){r.localStorage.setItem("problemid",e._id),t.go("problem.stakeholders")}function d(){o.logout(),t.go("init.login")}function p(){t.go("profile")}function g(t){e.show({controller:f,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:t})}function f(e,t,o){e.items=["LABEL_ARTIFACT_STAKEHOLDERS","LABEL_ARTIFACT_EVALUATIONFRAMEWORK","LABEL_ARTIFACT_SEMIOTICFRAMEWORK","LABEL_ARTIFACT_VIF","LABEL_ARTIFACT_CARF"],e.selected=[],e.toggle=function(e,o){var n=o.indexOf(e);n>-1?"LABEL_ARTIFACT_STAKEHOLDERS"!==e?o.splice(n,1):1==o.length?o.splice(n,1):i.errorMessage(t("translate")("LABEL_ARTIFACT_STAKEHOLDERS_NECESSARY")):(o.push(e),"LABEL_ARTIFACT_SEMIOTICFRAMEWORK"!=e&&(n=o.indexOf("LABEL_ARTIFACT_STAKEHOLDERS"),-1===n&&o.push("LABEL_ARTIFACT_STAKEHOLDERS")))},e.exists=function(e,t){return t.indexOf(e)>-1},e.isIndeterminate=function(){return 0!==e.selected.length&&e.selected.length!==e.items.length},e.isChecked=function(){return e.selected.length===e.items.length},e.toggleAll=function(){e.selected.length===e.items.length?e.selected=[]:(0===e.selected.length||e.selected.length>0)&&(e.selected=e.items.slice(0))},e.artifactList=[],e.hide=function(){o.hide()},e.cancel=function(){o.cancel()},e.addNewProblem=function(n){return e.selected.length<1?void i.errorMessage(t("translate")("LABEL_CHOICE_ARTIFACTS")):(n.artifacts=e.selected,h.startNewProblem(n),void o.cancel())}}var h=this;h.nickname="",h.userid="",h.useremail="",h.problemList=[],h.problemCollaboratorList=[],h.loginInProgress=!0,h.getProblems=s,h.revomveProblem=c,h.startNewProblem=u,h.editProblem=m,h.doLogout=d,h.newProblem=g,h.editProfile=p,h.photo,f.$inject=["$scope","$filter","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,n){function r(){u.idproblem=e.localStorage.getItem("problemid"),t.getonion(u.idproblem).success(function(e){if(e.success){if(e.stakeholders.length>0){for(var t=1;t<u.sugestionValuesArray.length;t++)u.sugestionValues+=u.sugestionValuesArray[t]+", ";u.sugestionValues[u.sugestionValuesArray[u.sugestionValuesArray.length-1]]+".";for(var n=0;n<e.stakeholders.length;n++)for(var r=0;r<u.stakeholderList.length;r++){var a={_id:e.stakeholders[n]._id,onionlayer:e.stakeholders[n].onionlayer,values:e.stakeholders[n].values,name:e.stakeholders[n].name,description:e.stakeholders[n].description,openEdit:e.stakeholders[n].openEdit,x:e.stakeholders[n].x,y:e.stakeholders[n].y,newValues:[]};e.stakeholders[n].onionlayer!=u.stakeholderList[r].onionlayer||u.stakeholderList[r].stakeholders.push(a)}}u.inProcessing=!1}else o.errorMessage(e.message)})}function a(e){e.openEdit=!0}function i(e){e.openEdit=!1}function s(e,t){for(var o=[],r=0;r<t.values.length;r++)t.values[r]!=e&&o.push(t.values[r]);t.values=o,n.emit("broadcastOnionSave",t)}function l(e){if(""===e.newValues||void 0===e.newValues)o.errorMessage("Valor não especificado.");else{for(var t=e.newValues.split(","),r=0;r<t.length;r++)c(e.values,t[r])?o.errorMessage("Duplicate value: "+t[r]):e.values.push(t[r]);e.newValues="",e.openEdit=!1,n.emit("broadcastOnionSave",e)}}function c(e,t){for(var o=0;o<e.length;o++)if(t===e[o])return!0;return!1}var u=this;u.inProcessing=!0,u.idProblem="",u.useremail="",u.newvalues="",u.initValueIdentificationFrame=r,u.setSuggestionShow=a,u.leaveSuggestionShow=i,u.removeValueIdentication=s,u.setValueIdentication=l,u.sugestionValues="",u.stakeholderList=[{onionlayer:"Community",stakeholders:[]},{onionlayer:"Market",stakeholders:[]},{onionlayer:"Source",stakeholders:[]},{onionlayer:"Contribution",stakeholders:[]},{onionlayer:"Technico",stakeholders:[]}],u.sugestionValuesArray=["Acessibilidade","Adaptabilidade","Estética","Autonomia","Disponibilidade","Consciência","Colaboração","Conversação","Emoção e Afeto","Grupos","Identidade","Consentimento informado","Meta-comunicação","Normas","Objeto","Portabilidade","Presença","Privacidade","Propriedade","Reciprocidade, Relacionamento, Reputação","Escalabilidade","Segurança","Compartilhamento","Confiança","Usabilidade","Visibilidade"],n.on("onBroadcastOnionSave",function(e){angular.forEach(u.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.newValues=[])})})}angular.module("app").controller("valueIdentificationFrameController",e),e.$inject=["$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e){var t=e.extendPalette("teal",{50:"E0F2F1",100:"B2DFDB",200:"80CBC4",300:"4DB6AC",400:"26A69A",500:"009688",600:"00897B",700:"00796B",800:"00695C",900:"004D40",A100:"A7FFEB",A200:"64FFDA",A400:"1DE9B6",A700:"00BFA5",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0});e.definePalette("teal",t),e.theme("default").primaryPalette("teal").accentPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,t,o){var n={};return n.login=function(t,n){return e.post("/api/login",{email:t,password:n}).success(function(e){return o.setToken(e.token),e})},n.logout=function(){o.setToken()},n.isLoggedIn=function(){return o.getToken()?!0:!1},n.getUser=function(n){return o.getToken()?e.get("/api/me/?userid="+n):t.reject({message:"User has no token"})},n}]).factory("AuthToken",["$window",function(e){var t={};return t.getToken=function(){return e.localStorage.getItem("token")},t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token")},t}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,t,o){var n={};return n.request=function(e){var t=o.getToken();return t&&(e.headers["x-access-token"]=t),e},n}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket","$window",function(e,t,o){return{restrict:"A",replace:!0,link:function(n,r,a){function i(e){var t=e.target.id;"svg"==t&&(t=""),n.stakeholder.onionlayer=t,y=e.pageY,x=e.pageX,
r.css({top:y+"px",left:x+"px"}),n.stakeholder.x=x+"px",n.stakeholder.y=y+"px"}function s(){e.unbind("mousemove",i),e.unbind("mouseup",s),t.emit("broadcastMove",n.stakeholder)}r.on("mousedown",function(t){"stakeholder"==t.target.id.substring(0,11)&&(n.stakeholder.localcode=o.localStorage.getItem("localcode"),t.preventDefault(),e.bind("mousemove",i),e.bind("mouseup",s))})}}}]),function(e){angular.module("appRxDrag",["rx"]).directive("rxdraggable",["$document","$window","rx","Socket",function(e,t,o,n){return function(r,a,i){var s=t.localStorage.getItem("localcode"),l=o.Observable.fromEvent(a,"mouseup"),c=o.Observable.fromEvent(e,"mousemove"),u=o.Observable.fromEvent(a,"mousedown").map(function(e){return e.preventDefault(),{left:e.clientX-a[0].getBoundingClientRect().left,top:e.clientY-a[0].getBoundingClientRect().top}}),m=u.selectMany(function(e){return c.map(function(t){return{left:t.clientX-e.left,top:t.clientY-e.top}}).takeUntil(l)});m.subscribe(function(e){a.css({top:e.top+"px",left:e.left+"px"}),e.localcode=s,n.emit("broadcastMove",e)})}}])}.call(this),function(){"use strict";function e(e,t,o,n,r,a,i,s){function l(e){t.use(e)}function c(){return Math.random()+Math.floor(10*Math.random())}function u(e){d.inProcessing=!0,d.error="",r.login(e.email,e.password).success(function(e){a.localStorage.setItem("useremail",e.email),a.localStorage.setItem("userid",e.id),a.localStorage.setItem("localcode",e.id+"-"+c()),a.localStorage.setItem("nickname",e.nickname),d.setLang(e.language),d.inProcessing=!1,r.getUser(e.id).then(function(t){s.errorMessage(i("translate")("WELCOME_SYSTEM")+": "+e.nickname),e.success?(a.localStorage.setItem("photo",t.data.photo),n.go("startproblem")):s.errorMessage("Usuário e senha não conferem.")})})}function m(){r.logout(),n("init")}var d=this;d.inProcessing=!1,d.setLang=l,d.doLogout=m,d.doLogin=u,d.loggedIn=r.isLoggedIn(),o.$on("$routeChangeStart",function(){d.loggedIn=r.isLoggedIn(),r.getUser().then(function(e){d.user=e.data})})}angular.module("app").controller("loginController",e),e.$inject=["Socket","$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),function(){"use strict";angular.module("app").service("Socket",["$location","$timeout",function(e,t){this.socket=io(),this.on=function(e,o){this.socket&&this.socket.on(e,function(e){t(function(){o(e)})})},this.emit=function(e,t){this.socket&&this.socket.emit(e,t)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}])}();
//# sourceMappingURL=data:application/json;base64,
