!function(){"use strict";angular.module("app",["ngImgCrop","toastService","textAngular","luegg.directives","appRxDrag","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),function(){"use strict";function e(e){function t(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:500})}var o={message:"",errorMessage:t};return o}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,t){var o=this;o.message=t.message,o.closeToast=function(){e.hide()}}]).factory("toastApp",e),e.$inject=["$mdToast"]}(),function(){"use strict";function e(e,t){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("profile",{url:"/profile",templateUrl:"views/pages/profile.html",controller:"profileController as vm"}).state("dscreport",{url:"/dscreport",templateUrl:"views/pages/problemreport.html",controller:"problemReportController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.description",{url:"/description",views:{"problem-description":{templateUrl:"views/pages/problemdescription.html",controller:"editProblemController as vm"}}}).state("problem.collaborators",{url:"/collaborators",views:{"problem-description":{templateUrl:"views/pages/collaborators.html",controller:"controllerCollaborators as vm"}}}).state("problem.stakeholders",{url:"/stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"/evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"/semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"/carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}).state("problem.vif",{url:"/vif",views:{"dsc-artifact":{templateUrl:"views/pages/vif.html",controller:"valueIdentificationFrameController as vm"}}}).state("problem.onion",{url:"/onion",views:{"dsc-artifact":{templateUrl:"views/pages/onion.html",controller:"onionController as vm"}}}),t.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function t(e){function t(t){e.use(t)}var o=this;o.setLang=t}function o(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",t).directive("changeLanguage",o),e.$inject=["$translateProvider"],t.$inject=["$translate"]}(),function(){"use strict";function e(e,t,o,r){function n(){p.idProblem=e.localStorage.getItem("problemid"),o.getcarf(p.idProblem).success(function(e){e.success&&(p.localStakeholders=e.stakeholders,p.stakeholderList=p.localStakeholders,p.carfList=e.carf,p.carfPriorityList=p.localPriorityList)}),p.inProcessing=!1}function a(){p.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},p.valueList=[]}function i(e){""===e.pms?r.errorMessage("Select PMS"):e.values.length<1?r.errorMessage("Select one or more Value"):e.stakeholders.length<1?r.errorMessage("Select one or more Stakeholder(s)"):""===e.priority?r.errorMessage("Select priority [Low, Medium or High]"):(t.emit("broadcastCARFadd",e),p.stakeholderList=[],p.carfPriorityList=[])}function s(e,o){var r={index:e,carf:o};t.emit("broadcastCARFremove",r)}function l(e){void 0!==e&&angular.forEach(p.carfPMSValue,function(t){return t.pms==e?(p.carf.values=[],void(p.valueList=t.values)):void 0})}function c(e){p.carf.priority=e}function u(e){if(0===p.carf.values.length)p.carf.values.push(e);else{for(var t=0;t<p.carf.values.length;t++)if(e==p.carf.values[t])return void p.carf.values.splice(t,1);p.carf.values.push(e)}}function m(e){if(0===p.carf.stakeholders.length)p.carf.stakeholders.push(e);else{for(var t=0;t<p.carf.stakeholders.length;t++)if(e==p.carf.stakeholders[t])return void p.carf.stakeholders.splice(t,1);p.carf.stakeholders.push(e)}}var p=this;p.idProblem="",p.inProcessing=!0,p.valueList=[],p.stakeholderList=[],p.localStakeholders=[],p.addpmsvalue=i,p.removeCARF=s,p.selectPMSValue=l,p.setPriotity=c,p.addListValue=u,p.addStakeholder=m,p.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},p.initCarf=n,p.carfList=[],p.carfPriorityList=[],t.on("onBroadcastCARFadd",function(e){p.carfList.push(e),a(),p.stakeholderList=p.localStakeholders,p.carfPriorityList=p.localPriorityList}),t.on("onBroadcastCARFremove",function(e){p.carfList.splice(e,1)}),p.localPriorityList=["Low","Medium","High"],p.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,r){function n(){u.isOpenChat=!u.isOpenChat,document.getElementById("message").focus()}function a(){u.idProblem=r.localStorage.getItem("problemid"),u.nickname=r.localStorage.getItem("nickname"),u.photo=r.localStorage.getItem("photo"),o.gethistorychat(u.idProblem).success(function(e){if(e.success)for(var t=0;t<e.historychat.length;t++){var o=new Date(e.historychat[t].time),r={nickname:e.historychat[t].nickname,msg:e.historychat[t].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "};u.messages.push(r)}}),t.emit("checkUsers")}function i(){u.replay?u.replay=!1:u.replay=!0}function s(e){void 0===e||e.length<2||(t.emit("broadcastChat",e),u.newmsg="",u.contador=0)}function l(){u.contador=0}function c(t,o){13==t.keyCode&&(u.contador++,1==u.contador&&e(l,2e3),u.contador>1&&s(o))}var u=this;u.newmsg="",u.messages=[],u.replay=!1,u.nickname="",u.userList=[],u.initHistoryChat=a,u.showReplay=i,u.sendMessage=s,u.photo="",u.openChat=n,u.isOpenChat=!1,u.keypressChat=c,u.contador=0,t.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);u.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})}),t.on("onCheckUsers",function(e){u.userList=e})}angular.module("app").controller("chatDSC",e),e.$inject=["$timeout","Socket","problemService","$window"]}(),function(){"use strict";function e(e,t,o,r){function n(){l.idProblem=e.localStorage.getItem("problemid"),l.useremail=e.localStorage.getItem("useremail"),o.getcollaborators(l.idProblem).success(function(e){e.success?l.collaborators=e.collaborators:r.errorMessage(e.message)})}function a(e){for(var t=0;t<l.collaborators.length;t++)if(e==l.collaborators[t].email)return!0;return!1}function i(e){if(l.useremail==e)r.errorMessage(l.useremail+" is email of owner.");else if(a(e))r.errorMessage("Usuario Cadastrado.");else{var t={idproblem:l.idProblem,email:e};o.invite(t).success(function(e){e.success?l.collaborators=e.collaborators:r.errorMessage(e.message)})}}function s(e){var t={idproblem:l.idProblem,email:e.email};o.removecollaborators(t).success(function(e){e.success?(r.errorMessage("Colaborador foi removido do projeto."),l.collaborators=e.collaborators):r.errorMessage(e.message)})}var l=this;l.idProblem="",l.collaborators=[],l.useremail="",l.initCollaborators=n,l.addCollaborator=i,l.removeCollaborator=s}angular.module("app").controller("controllerCollaborators",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(){function e(e){var t=document.getElementById("projectResport"),o=new jsPDF("l","px");o.addHTML(t,0,0,{pagesplit:!0},function(e){o.save("test.pdf")})}var t=this;t.idproblem="ajflajfljalfjaljf",t.buidReport=e}angular.module("app").controller("dscReportController",e)}(),function(){"use strict";function e(e,t,o,r){function n(){s.idproblem=e.localStorage.getItem("problemid"),t.getevaluation(s.idproblem).success(function(e){e.success?s.evaluationframeworkList=e.evaluationframework:r.errorMessage(e.message)})}function a(e){o.emit("broadcastFrameSave",e)}function i(e){e.openEdit=!0}var s=this;s.evaluationframeworkList=[],s.initEvaluation=n,s.setOpenEditDiscution=i,s.saveFrame=a,o.on("onBroadcastFrameEdit",function(e){angular.forEach(s.evaluationframeworkList,function(t){t.onionlayer==e.onionlayer&&angular.forEach(t.stakeholders,function(t){t._id==e._id&&(t.name=e.name,t.onionlayer=e.onionlayer,t.description=e.description,t.openEdit=e.openEdit,t.problems=e.problems,t.solutions=e.solutions)})})}),o.on("onUpdateStakeholder",function(e){})}angular.module("app").controller("evaluationframeworkController",e),e.$inject=["$window","problemService","Socket","toastApp"]}(),function(){"use strict";function e(e,t,o,r,n,a,i){function s(){d.nickname=r.localStorage.getItem("nickname"),d.idProblem=r.localStorage.getItem("problemid"),n.getproblem(d.idProblem).success(function(e){e.success?(d.problem=e.problem,angular.forEach(e.problem.artifacts,function(e){var o=e.split("_");d.dsc_artifacts.push({name:"problem."+o[2].toLowerCase(),label:t("translate")(e)})})):a.errorMessage(e.message)})}function l(){o.go("startproblem")}function c(){o.go("problem.collaborators")}function u(){o.go("dscreport")}function m(){o.go("problem.description")}function p(){e.logout(),o.go("init.login")}var d=this;d.formAddCollaborators=c,d.editDescriptionProblem=m,d.doLogout=p,d.systemReturn=l,d.formProblemReport=u,d.getCurrentProblem=s,d.nickname,d.dsc_artifacts=[]}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$filter","$state","$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,t,o,r,n){var a=this;a.idproblem="",a.intiMytOnion=intiMytOnion,a.savePostItOnion=savePostItOnion,a.editPostItOnion=editPostItOnion,a.delPostItOnion=delPostItOnion,a.addPostItOnion=addPostItOnion,a.onOnion=onOnion,a.offOnion=offOnion}angular.module("app").controller("onionController",e),e.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(),function(){"use strict";function e(e,t,o,r,n){function a(){c.nickname=r.localStorage.getItem("nickname"),c.idProblem=r.localStorage.getItem("problemid"),c.localcode=r.localStorage.getItem("localcode"),n.getproblem(c.idProblem).success(function(e){e.success?c.problem=e.problem:o.errorMessage(e.message)})}function i(){u=!0}function s(o){o.update=u,o.localcode=c.localcode,e.emit("atualizarProblema",o),u&&(u=!1,t(i,2e3))}function l(t){t.localcode=c.localcode,t.update=u,e.emit("atualizarProblema",t)}var c=this,u=!0;c.problem="",c.problemUpdate=s,c.getCurrentProblem=a,c.saveDescription=l,c.nickname="",c.localcode="",e.on("onAtualizarProblema",function(e){c.localcode!==e.localcode&&(c.problem.description=e.description),c.problem.update=u})}angular.module("app").controller("editProblemController",e),e.$injectre=["$scope","Socket"],e.$inject=["Socket","$timeout","toastApp","$window","problemService"]}(),function(){"use strict";function e(e,t,o,r){function n(){i.idProblem=e.localStorage.getItem("problemid"),t.getproblemreport(i.idProblem).success(function(e){e.success?(angular.forEach(e.problem.stakeholders,function(e){e.x=parseInt(e.x.substring(0,e.x.length-2))-100+"px",e.y=parseInt(e.y.substring(0,e.y.length-2))+400+"px"}),i.problem=e.problem):o.errorMessage(e.message)})}function a(){r.go("problem.stakeholders")}var i=this;i.idProblem,i.problem,i.initProblemPeport=n,i.systemReturn=a}angular.module("app").controller("problemReportController",e),e.$inject=["$window","problemService","toastApp","$state"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(v,t)}function r(t){return e.get(w+"?idproblem="+t)}function n(t){return e.get(k+"?idproblem="+t)}function a(t){return e.get(b+"?email="+t)}function i(t){return e.get(y+"?idproblem="+t)}function s(t){return e.post(S,t)}function l(t){return e.get(P+"?idproblem="+t)}function c(t){return e.get(C+"?idproblem="+t)}function u(t){return e.get($+"?idproblem="+t)}function m(t){return e.get(I+"?idproblem="+t)}function p(t){return e.get(L+"?idproblem="+t)}function d(t){return e.get(h+"?email="+t)}function g(t){return e.get(A+"?idproblem="+t.idproblem+"&email="+t.email)}function f(t){return e.get(E+"?idproblem="+t)}var b="/api/problem/getproblems",h="/api/problem/getproblemscollaborator",v="/api/problem/newproblem",k="/api/problem/getproblem",w="/api/problem/getproblemreport",y="/api/problem/getcollaborators",S="/api/problem/invite",P="/api/problem/getonion",C="/api/problem/getevaluation",$="/api/problem/getsemiotic",I="/api/problem/getcarf",L="/api/problem/removeproblem",A="/api/problem/removecollaborator",E="/api/problem/historychat",M={newproblem:o,getuserproblems:a,getproblem:n,getcollaborators:i,invite:s,getonion:l,getevaluation:c,getsemiotic:u,getcarf:m,removeproblem:p,getproblemscollaborator:d,removecollaborators:g,gethistorychat:f,getproblemreport:r};return M}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t,o,r){function n(){m.idproblem=t.localStorage.getItem("problemid"),o.getsemiotic(m.idproblem).success(function(e){e.success?m.semioticframework=e.semioticframework:r.errorMessage(e.message)})}function a(t,o){var r={text:t,update:o};e.emit("updateSocialWorld",r)}function i(t,o){var r={text:t,update:o};e.emit("updatePragmatic",r)}function s(t,o){var r={text:t,update:o};e.emit("updateSemantic",r)}function l(t,o){var r={text:t,update:o};e.emit("updateSyntatic",r)}function c(t,o){var r={text:t,update:o};e.emit("updateEmpirical",r)}function u(t,o){var r={text:t,update:o};e.emit("updatePhysical",r)}var m=this;m.idproblem="",m.saveSocialWorld=a,m.savePragmatic=i,m.saveSemantic=s,m.saveSyntatic=l,m.saveEmpirical=c,m.savePhysical=u,m.semioticframework="",m.initSemioticFramework=n,e.on("onUpdateSocialWorld",function(e){m.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){m.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){m.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,t){m.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){m.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){m.semioticframework.physical=e})}angular.module("app").controller("semioticframeworkController",e),e.$inject=["Socket","$window","problemService","toastApp"]}(),function(e){"use strict";function t(e,t,o,r,n){function a(){d.idproblem=t.localStorage.getItem("problemid"),d.localcode=t.localStorage.getItem("localcode"),o.getonion(d.idproblem).success(function(e){e.success?d.stakeholderList=e.stakeholders:n.errorMessage(e.message)}),d.inProcessing=!1}function i(t){e.emit("broadcastOnionSave",t)}function s(t){e.emit("broadcastOnionEdit",t)}function l(t,o){var r={index:t,stakeholder:o};e.emit("broadcastOnionRemove",r)}function c(e,t,o){var n=r.confirm().parent(angular.element(document.body)).title("Detete Stakeholder?").content("Title: "+o.name).ariaLabel("Remove Stakeholder").ok("Yes!").cancel("Cancel").targetEvent(e);r.show(n).then(function(){l(t,o)})}function u(t,o){var r={onionlayer:o,name:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px",zindex:9999};e.emit("broadcastOnionAdd",r)}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline;"),document.getElementById("legend"+e).setAttribute("opacity","0.7"),document.getElementById(e).setAttribute("opacity","0.7")}function p(e){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById("legend"+e).setAttribute("opacity","1.0"),document.getElementById(e).setAttribute("opacity","1.0")}var d=this;d.idproblem="",d.stakeholderList=[],d.stakeholder="",d.intitOnion=a,d.move=!1,d.inProcessing=!0,d.saveStakeholder=i,d.setOpenEdit=s,d.delPostIt=c,d.addPostIt=u,d.acende=m,d.apaga=p,d.localcode="",e.on("onBroadcastOnionSave",function(e){angular.forEach(d.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.zindex=9999)})}),e.on("onBroadcastOnionEdit",function(e){angular.forEach(d.stakeholderList,function(t){t._id===e&&(t.openEdit=!0,t.zindex=9999)})}),e.on("onBroadcastOnionRemove",function(e){var t=document.getElementById("stakeholder"+d.stakeholderList[e]._id);t.style.display="none",d.stakeholderList.splice(e,1)}),e.on("onBroadcastMove",function(e){d.localcode!==e.localcode&&(document.getElementById("stakeholder"+e._id).style.left=e.x,document.getElementById("stakeholder"+e._id).style.top=e.y)}),e.on("onBroadcastOnionAdd",function(e){d.stakeholderList.push(e)})}angular.module("app").controller("stakeholderController",t),t.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,t,o,r,n,a,i){function s(){b.userid=n.localStorage.getItem("userid"),b.nickname=n.localStorage.getItem("nickname"),b.useremail=n.localStorage.getItem("useremail"),b.photo=n.localStorage.getItem("photo"),a.getuserproblems(b.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description.length>300?e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,280):e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"");b.problemList=e.problems,a.getproblemscollaborator(b.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)console.log("Descrição: "+e.problems[t].description),console.log(e.problems[t].description.length),e.problems[t].description.length>300?e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,280):e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"");b.problemCollaboratorList=e.problems}else i.errorMessage(e.message)})}else i.errorMessage(e.message)}),b.loginInProgress=!1}function l(e){a.removeproblem(e).success(function(t){if(t.success){for(var o=0;o<b.problemList.length;o++)if(b.problemList[o]._id==e){b.problemList.splice(o,1);break}}else i.errorMessage(t.message)})}function c(t,o){var r=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+o.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(t);e.show(r).then(function(){l(o._id)})}function u(e){e.userid=b.userid,a.newproblem(e).success(function(e){e.success?b.editProblem(e.problem):i.errorMessage(e.message)})}function m(e){n.localStorage.setItem("problemid",e._id);var o={idproblem:e._id,nickname:b.nickname};r.emit("initProblem",o),t.go("problem.stakeholders")}function p(){o.logout(),t.go("init.login")}function d(){t.go("profile")}function g(t){e.show({controller:f,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:t})}function f(e,t,o){e.artifactList=[],e.hide=function(){o.hide()},e.cancel=function(){o.cancel()},e.addNewProblem=function(r){return e.artifactList.length<1?void i.errorMessage(t("translate")("LABEL_CHOICE_ARTIFACTS")):(r.artifacts=e.artifactList,b.startNewProblem(r),void o.cancel())},e.addArtifact=function(t){for(var o=0;o<e.artifactList.length;o++)if(e.artifactList[o]===t)return void e.artifactList.splice(o,1);e.artifactList.push(t)}}var b=this;b.nickname="",b.userid="",b.useremail="",b.problemList=[],b.problemCollaboratorList=[],b.loginInProgress=!0,b.getProblems=s,b.revomveProblem=c,b.startNewProblem=u,b.editProblem=m,b.doLogout=p,b.newProblem=g,b.editProfile=d,b.photo,f.$inject=["$scope","$filter","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,r){function n(){u.idproblem=e.localStorage.getItem("problemid"),t.getonion(u.idproblem).success(function(e){if(e.success){if(e.stakeholders.length>0){for(var t=1;t<u.sugestionValuesArray.length;t++)u.sugestionValues+=u.sugestionValuesArray[t]+", ";u.sugestionValues[u.sugestionValuesArray[u.sugestionValuesArray.length-1]]+".";for(var r=0;r<e.stakeholders.length;r++)for(var n=0;n<u.stakeholderList.length;n++){var a={_id:e.stakeholders[r]._id,onionlayer:e.stakeholders[r].onionlayer,values:e.stakeholders[r].values,name:e.stakeholders[r].name,description:e.stakeholders[r].description,openEdit:e.stakeholders[r].openEdit,x:e.stakeholders[r].x,y:e.stakeholders[r].y,newValues:[]};e.stakeholders[r].onionlayer!=u.stakeholderList[n].onionlayer||u.stakeholderList[n].stakeholders.push(a)}}u.inProcessing=!1}else o.errorMessage(e.message)})}function a(e){e.openEdit=!0}function i(e){e.openEdit=!1}function s(e,t){for(var o=[],n=0;n<t.values.length;n++)t.values[n]!=e&&o.push(t.values[n]);t.values=o,r.emit("broadcastOnionSave",t)}function l(e){if(""===e.newValues||void 0===e.newValues)o.errorMessage("Valor não especificado.");else{for(var t=e.newValues.split(","),n=0;n<t.length;n++)c(e.values,t[n])?o.errorMessage("Duplicate value: "+t[n]):e.values.push(t[n]);e.newValues="",e.openEdit=!1,r.emit("broadcastOnionSave",e)}}function c(e,t){for(var o=0;o<e.length;o++)if(t===e[o])return!0;return!1}var u=this;u.inProcessing=!0,u.idProblem="",u.useremail="",u.newvalues="",u.initValueIdentificationFrame=n,u.setSuggestionShow=a,u.leaveSuggestionShow=i,u.removeValueIdentication=s,u.setValueIdentication=l,u.sugestionValues="",u.stakeholderList=[{onionlayer:"Community",stakeholders:[]},{onionlayer:"Market",stakeholders:[]},{onionlayer:"Source",stakeholders:[]},{onionlayer:"Contribution",stakeholders:[]},{onionlayer:"Technico",stakeholders:[]}],u.sugestionValuesArray=["Acessibilidade","Adaptabilidade","Estética","Autonomia","Disponibilidade","Consciência","Colaboração","Conversação","Emoção e Afeto","Grupos","Identidade","Consentimento informado","Meta-comunicação","Normas","Objeto","Portabilidade","Presença","Privacidade","Propriedade","Reciprocidade, Relacionamento, Reputação","Escalabilidade","Segurança","Compartilhamento","Confiança","Usabilidade","Visibilidade"],r.on("onBroadcastOnionSave",function(e){angular.forEach(u.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.newValues=[])})})}angular.module("app").controller("valueIdentificationFrameController",e),e.$inject=["$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,t,o,r){function n(){t.go("startproblem")}function a(){s.userid=e.localStorage.getItem("userid"),void 0!==s.userid}function i(t){var o={userid:e.localStorage.getItem("userid"),photo:t};r.uploadPhoto(o).success(function(o){o.success?e.localStorage.setItem("photo",t):toastApp.errorMessage("-----")})}var s=this;s.startProfile=a,s.uploadInProgress=!0,s.uploadProgress=0,s.userid,s.savePhoto=i,s.systemReturn=n,s.myImage="",s.myCroppedImage="";var l=function(e){var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){o.$apply(function(t){t.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",l)}angular.module("app").controller("profileController",e),e.$inject=["$window","$state","$scope","signupService"]}(),function(){"use strict";function e(e,t,o,r,n,a,i,s,l){function c(e){o.create(e).success(function(t){t.success?(n.errorMessage(s("translate")("WELCOME_SYSTEM")+e.nickname),r.go("init.login")):n.errorMessage("Email Já cadastrado")})}function u(t){e.use(t)}function m(e){o.rescuePassword(e).success(function(t){t.success?(n.errorMessage("Email com instruções enviado para "+e.email),r.go("init.login")):n.errorMessage("Error")})}function p(e){o.changePassword(e).success(function(e){e.success?(n.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),r.go("init.login")):n.errorMessage("Error")})}var d=this;d.message="",d.saveUser=c,d.rescuePassword=m,d.changePassword=p,d.setLang=u,d.loginInProgress=!1}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(i,t)}function r(t){return e.post(s,t)}function n(o){var r=t.search();return e.get(l+"?mytoken="+r.mytoken+"&password="+o.password)}function a(t){return e.post(c,t)}var i="/api/signup/",s="/api/rescuepasswd/",l="/api/rescuepasswd/newpasswd/",c="/api/profile/photo/",u={create:o,rescuePassword:r,changePassword:n,uploadPhoto:a};return u}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e){var t=e.extendPalette("teal",{50:"E0F2F1",100:"B2DFDB",200:"80CBC4",300:"4DB6AC",400:"26A69A",500:"009688",600:"00897B",700:"00796B",800:"00695C",900:"004D40",A100:"A7FFEB",A200:"64FFDA",A400:"1DE9B6",A700:"00BFA5",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0});e.definePalette("teal",t),e.theme("default").primaryPalette("teal").accentPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,t,o){var r={};return r.login=function(t,r){return e.post("/api/login",{email:t,password:r}).success(function(e){return o.setToken(e.token),e})},r.logout=function(){o.setToken()},r.isLoggedIn=function(){return o.getToken()?!0:!1},r.getUser=function(r){return o.getToken()?e.get("/api/me/?userid="+r):t.reject({message:"User has no token"})},r}]).factory("AuthToken",["$window",function(e){var t={};return t.getToken=function(){return e.localStorage.getItem("token")},t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token")},t}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,t,o){var r={};return r.request=function(e){var t=o.getToken();return t&&(e.headers["x-access-token"]=t),e},r}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket","$window",function(e,t,o){return{restrict:"A",replace:!0,link:function(r,n,a){function i(e){var t=e.target.id;"svg"==t&&(t=""),r.stakeholder.onionlayer=t,y=e.pageY,x=e.pageX,n.css({top:y+"px",left:x+"px"}),r.stakeholder.x=x+"px",r.stakeholder.y=y+"px"}function s(){e.unbind("mousemove",i),e.unbind("mouseup",s),t.emit("broadcastMove",r.stakeholder)}n.on("mousedown",function(t){"stakeholder"==t.target.id.substring(0,11)&&(r.stakeholder.localcode=o.localStorage.getItem("localcode"),t.preventDefault(),e.bind("mousemove",i),e.bind("mouseup",s))})}}}]),function(e){angular.module("appRxDrag",["rx"]).directive("rxdraggable",["$document","$window","rx","Socket",function(e,t,o,r){return function(n,a,i){var s=t.localStorage.getItem("localcode"),l=o.Observable.fromEvent(a,"mouseup"),c=o.Observable.fromEvent(e,"mousemove"),u=o.Observable.fromEvent(a,"mousedown").map(function(e){return e.preventDefault(),{left:e.clientX-a[0].getBoundingClientRect().left,top:e.clientY-a[0].getBoundingClientRect().top}}),m=u.selectMany(function(e){return c.map(function(t){return{left:t.clientX-e.left,top:t.clientY-e.top}}).takeUntil(l)});m.subscribe(function(e){a.css({top:e.top+"px",left:e.left+"px"}),e.localcode=s,r.emit("broadcastMove",e)})}}])}.call(this),function(){"use strict";function e(e,t,o,r,n,a,i){function s(t){e.use(t)}function l(){return Math.random()+Math.floor(10*Math.random())}function c(e){m.inProcessing=!0,m.error="",r.login(e.email,e.password).success(function(e){n.localStorage.setItem("useremail",e.email),n.localStorage.setItem("userid",e.id),n.localStorage.setItem("localcode",e.id+"-"+l()),n.localStorage.setItem("nickname",e.nickname),m.setLang(e.language),m.inProcessing=!1,r.getUser(e.id).then(function(t){i.errorMessage(a("translate")("WELCOME_SYSTEM")+": "+e.nickname),e.success?(n.localStorage.setItem("photo",t.data.photo),o.go("startproblem")):i.errorMessage("Usuário e senha não conferem.")})})}function u(){r.logout(),o("init")}var m=this;m.inProcessing=!1,m.setLang=s,m.doLogout=u,m.doLogin=c,m.loggedIn=r.isLoggedIn(),t.$on("$routeChangeStart",function(){m.loggedIn=r.isLoggedIn(),r.getUser().then(function(e){m.user=e.data})})}angular.module("app").controller("loginController",e),e.$inject=["$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),function(){"use strict";angular.module("app").service("Socket",["$location","$timeout",function(e,t){this.socket=io(),this.on=function(e,o){this.socket&&this.socket.on(e,function(e){t(function(){o(e)})})},this.emit=function(e,t){this.socket&&this.socket.emit(e,t)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}])}();
//# sourceMappingURL=data:application/json;base64,
