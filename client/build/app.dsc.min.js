function toastApp(e){function t(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top left",hideDelay:5e3})}var o={message:"",errorMessage:t};return o}function chatDSC(e,t,o,r,a,n){var i=this;i.newmsg="",i.messages=[],i.replay=!1,i.close=function(){o("chat").close().then(function(){r.debug("close chat")})},i.initHistoryChat=function(){console.log("--------------------------------------------------------"),i.idProblem=n.localStorage.getItem("problemid"),a.gethistorychat(i.idProblem).success(function(e){if(e.success){console.log(e.historychat);for(var t=0;t<e.historychat.length;t++){var o=new Date(e.historychat[t].time),r={nickname:e.historychat[t].nickname,msg:e.historychat[t].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "};i.messages.push(r)}}})},i.showReplay=function(){i.replay=i.replay?!1:!0},t.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);i.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})}),i.sendMessage=function(e){t.emit("broadcastChat",e),i.newmsg=""}}function evaluationframeworkController(e,t,o,r){function a(){n.idproblem=e.localStorage.getItem("problemid"),t.getevaluation(n.idproblem).success(function(e){e.success?n.evaluationframeworkList=e.evaluationframework:toastApp.errorMessage(e.message)})}var n=this;n.evaluationframeworkList=[],n.initEvaluation=a,o.on("onBroadcastFrameSave",function(e){angular.forEach(n.evaluationframeworkList,function(t){t.onionlayer==e.onionlayer&&angular.forEach(t.stakeholders,function(t){t._id==e._id&&(t.name=e.name,t.onionlayer=e.onionlayer,t.description=e.description,t.openEdit=e.openEdit,t.problems=e.problems,t.solutions=e.solutions)})})}),r.saveDiscution=function(e){o.emit("broadcastFrameSave",e)},o.on("onUpdateStakeholder",function(e){console.log(e)}),r.setOpenEditDiscution=function(e){e.openEdit=!0}}function semioticframeworkController(e,t,o){function r(){u.idproblem=t.localStorage.getItem("problemid"),o.getsemiotic(u.idproblem).success(function(e){e.success?u.semioticframework=e.semioticframework:toastApp.errorMessage(e.message)})}function a(t,o){var r={text:t,update:o};e.emit("updateSocialWorld",r)}function n(t,o){var r={text:t,update:o};e.emit("updatePragmatic",r)}function i(t,o){var r={text:t,update:o};e.emit("updateSemantic",r)}function s(t,o){var r={text:t,update:o};e.emit("updateSyntatic",r)}function l(t,o){var r={text:t,update:o};e.emit("updateEmpirical",r)}function c(t,o){var r={text:t,update:o};e.emit("updatePhysical",r)}var u=this;u.idproblem="",u.saveSocialWorld=a,u.savePragmatic=n,u.saveSemantic=i,u.saveSyntatic=s,u.saveEmpirical=l,u.savePhysical=c,u.semioticframework="",u.initSemioticFramework=r,e.on("onUpdateSocialWorld",function(e){u.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){u.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){u.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,t){u.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){u.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){u.semioticframework.physical=e})}function stakeholderController(e,t,o,r){function a(){n.idproblem=o.localStorage.getItem("problemid"),r.getonion(n.idproblem).success(function(e){e.success?n.stakeholderList=e.stakeholders:toastApp.errorMessage(e.message)})}var n=this;n.idproblem="",n.stakeholderList=[],n.stakeholder="",n.intitOnion=a,n.move=!1,e.on("onBroadcastOnionSave",function(e){angular.forEach(n.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.dadaopenEdit,t.x=e.x,t.y=e.y)})}),t.saveStakeholder=function(t){e.emit("broadcastOnionSave",t)},e.on("onBroadcastOnionEdit",function(e){angular.forEach(n.stakeholderList,function(t){t._id==e&&(t.openEdit=!0)})}),t.setOpenEdit=function(t){e.emit("broadcastOnionEdit",t)},e.on("onBroadcastOnionRemove",function(e){var t=document.getElementById("stakeholder"+n.stakeholderList[e]._id);t.style.display="none",n.stakeholderList.splice(e,1)}),t.setValue=function(){console.log("Chamando para trocar para true....")},t.delPostIt=function(t,o){var r={index:t,stakeholder:o};e.emit("broadcastOnionRemove",r)},e.on("onBroadcastOnionAdd",function(e){n.stakeholderList.push(e)}),t.addPostIt=function(t,o){var r=n.stakeholderList.length+1,a={_id:r,onionlayer:o,name:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px"};e.emit("broadcastOnionAdd",a)},n.acende=function(e){e.target.setAttribute("opacity","0.8")},n.apaga=function(e){e.target.setAttribute("opacity","1.0")}}!function(){"use strict";angular.module("app",["toastService","textAngular","luegg.directives","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,t){var o=this;o.message=t.message,o.closeToast=function(){e.hide()}}]).factory("toastApp",toastApp),toastApp.$inject=["$mdToast"],function(){"use strict";function e(e,t){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.description",{url:"/description",views:{"problem-description":{templateUrl:"views/pages/problemdescription.html",controller:"editProblemController as vm"}}}).state("problem.collaborators",{url:"/collaborators",views:{"problem-description":{templateUrl:"views/pages/collaborators.html",controller:"controllerCollaborators as vm"}}}).state("problem.stakeholders",{url:"stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}),t.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t,o,r){function a(){i.idProblem=e.localStorage.getItem("problemid"),o.getcarf(i.idProblem).success(function(e){e.success&&(i.localStakeholders=e.stakeholders,i.stakeholderList=i.localStakeholders,i.carfList=e.carf,i.carfPriorityList=i.localPriorityList)})}function n(){i.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},i.valueList=[]}var i=this;i.idProblem="",i.valueList=[],i.stakeholderList=[],i.localStakeholders=[],i.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},i.initCarf=a,i.carfList=[],i.carfPriorityList=[],t.on("onBroadcastCARFadd",function(e){i.carfList.push(e),n(),i.stakeholderList=i.localStakeholders,i.carfPriorityList=i.localPriorityList}),i.addpmsvalue=function(e){""==e.pms?r.errorMessage("Select PMS"):e.values.length<1?r.errorMessage("Select one or more Value"):e.stakeholders.length<1?r.errorMessage("Select one or more Stakeholder(s)"):""==e.priority?r.errorMessage("Select priority [Low, Medium or High]"):(t.emit("broadcastCARFadd",e),i.stakeholderList=[],i.carfPriorityList=[])},t.on("onBroadcastCARFremove",function(e){i.carfList.splice(e,1)}),i.removeCARF=function(e,o){var r={index:e,carf:o};t.emit("broadcastCARFremove",r)},i.selectPMSValue=function(e){void 0!=e&&angular.forEach(i.carfPMSValue,function(t){return t.pms==e?(i.carf.values=[],void(i.valueList=t.values)):void 0})},i.setPriotity=function(e){i.carf.priority=e},i.addListValue=function(e){if(0==i.carf.values.length)i.carf.values.push(e);else{for(var t=0;t<i.carf.values.length;t++)if(e==i.carf.values[t])return void i.carf.values.splice(t,1);i.carf.values.push(e)}},i.addStakeholder=function(e){if(0==i.carf.stakeholders.length)i.carf.stakeholders.push(e);else{for(var t=0;t<i.carf.stakeholders.length;t++)if(e==i.carf.stakeholders[t])return void i.carf.stakeholders.splice(t,1);i.carf.stakeholders.push(e)}},i.localPriorityList=["Low","Medium","High"],i.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),angular.module("app").controller("chatDSC",chatDSC),chatDSC.$inject=["$timeout","Socket","$mdSidenav","$log","problemService","$window"],function(){"use strict";function e(e,t,o){function r(e){for(var t=0;t<a.collaborators.length;t++)if(e==a.collaborators[t].email)return!0;return!1}var a=this;a.idProblem="",a.collaborators=[],a.useremail="",a.initCollaborators=function(){a.idProblem=e.localStorage.getItem("problemid"),a.useremail=e.localStorage.getItem("useremail"),t.getcollaborators(a.idProblem).success(function(e){e.success?a.collaborators=e.collaborators:o.errorMessage(e.message)})},a.addCollaborator=function(e){if(a.useremail==e)o.errorMessage(a.useremail+" is email of owner.");else if(r(e))o.errorMessage("Usuario Cadastrado.");else{var n={idproblem:a.idProblem,email:e};t.invite(n).success(function(e){e.success?a.collaborators=e.collaborators:o.errorMessage(e.message)})}},a.removeCollaborator=function(e){var r={idproblem:a.idProblem,email:e.email};t.removecollaborators(r).success(function(e){e.success?(o.errorMessage("Colaborador foi removido do projeto."),a.collaborators=e.collaborators):o.errorMessage(e.message)})}}angular.module("app").controller("controllerCollaborators",e),e.$inject=["$window","problemService","toastApp"]}(),angular.module("app").controller("evaluationframeworkController",evaluationframeworkController),evaluationframeworkController.$inject=["$window","problemService","Socket","$scope"],function(){"use strict";function e(e,t,o,r,a,n){function i(e){var t=a.debounce(function(){r(e).toggle().then(function(){n.debug("toggle "+e+" is done")})},300);return t}var s=this;s.openChat=i("chat"),s.formAddCollaborators=function(){o.go("problem.collaborators")},s.editDescriptionProblem=function(){o.go("problem.description")},s.doLogout=function(){e.logout(),o.go("init.login")}}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$timeout","$state","$mdSidenav","$mdUtil","$log"]}(),function(){"use strict";function e(e,t,o,r,a,n){var i=this,s=!0;i.problem="",i.tabs=["problem.stakeholders","problem.evaluationframework","problem.semioticframework","problem.carf"],i.getCurrentProblem=function(){i.idProblem=a.localStorage.getItem("problemid"),n.getproblem(i.idProblem).success(function(e){e.success?i.problem=e.problem:r.errorMessage(e.message)})};var l=function(){s=!0};t.on("onAtualizarProblema",function(e){console.log("=========================================================================retorno...."+e),i.problem.description=e.description,i.problem.update=s}),e.problemUpdate=function(e){e.update=s,t.emit("atualizarProblema",e),s&&(s=!1,o(l,2e3))},e.saveDescription=function(e){console.log("============================================================================="),e.update=s,t.emit("atualizarProblema",e)}}angular.module("app").controller("editProblemController",e),e.$injectre=["$scope","Socket"],e.$inject=["$scope","Socket","$timeout","toastApp","$window","problemService"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(h,t)}function r(t){return e.get(v+"?idproblem="+t)}function a(t){return e.get(f+"?email="+t)}function n(t){return e.get(k+"?idproblem="+t)}function i(t){return e.post(w,t)}function s(t){return e.get(S+"?idproblem="+t)}function l(t){return e.get(y+"?idproblem="+t)}function c(t){return e.get(P+"?idproblem="+t)}function u(t){return e.get($+"?idproblem="+t)}function m(t){return e.get(C+"?idproblem="+t)}function p(t){return e.get(b+"?email="+t)}function d(t){return e.get(L+"?idproblem="+t.idproblem+"&email="+t.email)}function g(t){return e.get(A+"?idproblem="+t)}var f="/api/problem/getproblems",b="/api/problem/getproblemscollaborator",h="/api/problem/newproblem",v="/api/problem/getproblem",k="/api/problem/getcollaborators",w="/api/problem/invite",S="/api/problem/getonion",y="/api/problem/getevaluation",P="/api/problem/getsemiotic",$="/api/problem/getcarf",C="/api/problem/removeproblem",L="/api/problem/removecollaborator",A="/api/problem/historychat",M={newproblem:o,getuserproblems:a,getproblem:r,getcollaborators:n,invite:i,getonion:s,getevaluation:l,getsemiotic:c,getcarf:u,removeproblem:m,getproblemscollaborator:p,removecollaborators:d,gethistorychat:g};return M}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),angular.module("app").controller("semioticframeworkController",semioticframeworkController),semioticframeworkController.$inject=["Socket","$window","problemService"],angular.module("app").controller("stakeholderController",stakeholderController),stakeholderController.$inject=["Socket","$scope","$window","problemService"],function(){"use strict";function e(e,t,o,r,a,n,i){function s(e){n.removeproblem(e).success(function(t){if(t.success){for(var o=0;o<c.problemList.length;o++)if(c.problemList[o]._id==e){c.problemList.splice(o,1);break}}else i.errorMessage(t.message)})}function l(e,t){e.hide=function(){t.hide()},e.cancel=function(){t.cancel()},e.addNewProblem=function(e){c.startNewProblem(e),t.cancel()}}var c=this;c.nickname="",c.userid="",c.useremail="",c.problemList=[],c.problemCollaboratorList=[],c.getProblems=function(){c.userid=a.localStorage.getItem("userid"),c.nickname=a.localStorage.getItem("nickname"),c.useremail=a.localStorage.getItem("useremail"),n.getuserproblems(c.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"");c.problemList=e.problems}else i.errorMessage(e.message)}),n.getproblemscollaborator(c.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"");c.problemCollaboratorList=e.problems}else i.errorMessage(e.message)})},c.revomveProblem=function(t,o){var r=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+o.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(t);e.show(r).then(function(){s(o._id)})},c.startNewProblem=function(e){e.userid=c.userid,n.newproblem(e).success(function(e){e.success?c.editProblem(e.problem):i.errorMessage(e.message)})},c.editProblem=function(e){a.localStorage.setItem("problemid",e._id);var o={idproblem:e._id,nickname:c.nickname};r.emit("initProblem",o),t.go("problem.stakeholders")},c.doLogout=function(){o.logout(),t.go("init.login")},c.newProblem=function(t){e.show({controller:l,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:t})},l.$inject=["$scope","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function t(e){this.setLang=function(t){e.use(t)}}function o(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",t).directive("changeLanguage",o),e.$inject=["$translateProvider"],t.$inject=["$translate"]}(),function(){"use strict";function e(e,t,o,r,a,n,i){function s(i){e.create(i).success(function(e){e.success?(r.setToken(e.token),a.getUser().then(function(e){u.user=e.data,o.errorMessage(n("translate")("WELCOME_SYSTEM")+": "+u.user.nickname),t.go("startproblem")})):o.errorMessage("Email Já cadastrado")})}function l(t){e.rescuePassword(t).success(function(e){console.log(e),o.errorMessage(e.success?"Email com instruções enviado":"Error")})}function c(r){e.changePassword(r).success(function(e){e.success?(o.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),t.go("init")):o.errorMessage("Error")})}var u=this;u.message="",u.save=s,u.rescuePassword=l,u.changePassword=c}angular.module("app").controller("signupController",e),e.$inject=["signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(n,t)}function r(t){return e.post(i,t)}function a(o){var r=t.search();return e.get(s+"?mytoken="+r.mytoken+"&password="+o.password)}var n="/api/signup/",i="/api/rescuepasswd/",s="/api/rescuepasswd/newpasswd/",l={create:o,rescuePassword:r,changePassword:a};return l}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t){var o=e.extendPalette("teal",{contrastDefaultColor:"light",contrastDarkColors:["50"],50:"E0F2F1"});e.definePalette("customGreen",o),e.theme("default").primaryPalette("customGreen",{"default":"500","hue-1":"50"}).accentPalette("teal"),e.theme("input","default").primaryPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,t,o){var r={};return r.login=function(t,r){return e.post("/api/login",{email:t,password:r}).success(function(e){return o.setToken(e.token),e})},r.logout=function(){o.setToken()},r.isLoggedIn=function(){return o.getToken()?!0:!1},r.getUser=function(){return o.getToken()?e.get("/api/me"):t.reject({message:"User has no token"})},r}]).factory("AuthToken",["$window",function(e){var t={};return t.getToken=function(){return e.localStorage.getItem("token")},t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token")},t}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,t,o){var r={};return r.request=function(e){var t=o.getToken();return t&&(e.headers["x-access-token"]=t),e},r}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket",function(e,t){return{restrict:"A",replace:!0,link:function(t,o,r){function a(e){var r=e.target.id;"svg"==r&&(r=""),t.stakeholder.onionlayer=r,y=e.pageY,x=e.pageX,o.css({top:y+"px",left:x+"px"}),t.stakeholder.x=x+"px",t.stakeholder.y=y+"px"}function n(){e.unbind("mousemove",a),e.unbind("mouseup",n)}o.on("mousedown",function(t){"stakeholder"==t.target.id.substring(0,11)&&(t.preventDefault(),e.bind("mousemove",a),e.bind("mouseup",n))})}}}]),function(){"use strict";function e(e,t,o,r,a,n){var i=this;i.loggedIn=o.isLoggedIn(),e.$on("$routeChangeStart",function(){i.loggedIn=o.isLoggedIn(),o.getUser().then(function(e){i.user=e.data})}),i.doLogin=function(e){i.processing=!0,i.error="",o.login(e.email,e.password).success(function(e){r.localStorage.setItem("useremail",e.email),r.localStorage.setItem("userid",e.id),r.localStorage.setItem("nickname",e.nickname),i.processing=!1,o.getUser().then(function(e){i.user=e.data,n.errorMessage(a("translate")("WELCOME_SYSTEM")+": "+i.user.nickname)}),e.success?t.go("startproblem"):i.error=e.message})},i.doLogout=function(){o.logout(),t("init")}}angular.module("app").controller("loginController",e),e.$inject=["$rootScope","$state","Auth","$window","$filter","toastApp"]}(),angular.module("app").service("Socket",["$location","$timeout",function(e,t){this.socket=io(),this.on=function(e,o){this.socket&&this.socket.on(e,function(e){t(function(){o(e)})})},this.emit=function(e,t){this.socket&&this.socket.emit(e,t)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}]);
//# sourceMappingURL=data:application/json;base64,