!function(){"use strict";angular.module("app",["ngImgCrop","toastService","textAngular","luegg.directives","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),function(){"use strict";function e(e){function t(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top left",hideDelay:5e3})}var o={message:"",errorMessage:t};return o}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,t){var o=this;o.message=t.message,o.closeToast=function(){e.hide()}}]).factory("toastApp",e),e.$inject=["$mdToast"]}(),function(){"use strict";function e(e,t){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("profile",{url:"/profile",templateUrl:"views/pages/profile.html",controller:"profileController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.dscreport",{url:"/dscreport",views:{"problem-description":{templateUrl:"views/pages/dscreport.html",controller:"dscReportController as vm"}}}).state("problem.description",{url:"/description",views:{"problem-description":{templateUrl:"views/pages/problemdescription.html",controller:"editProblemController as vm"}}}).state("problem.collaborators",{url:"/collaborators",views:{"problem-description":{templateUrl:"views/pages/collaborators.html",controller:"controllerCollaborators as vm"}}}).state("problem.stakeholders",{url:"stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}).state("problem.vif",{url:"vif",views:{"dsc-artifact":{templateUrl:"views/pages/vif.html",controller:"valueIdentificationFrameController as vm"}}}),t.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function t(e){function t(t){e.use(t)}var o=this;o.setLang=t}function o(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",t).directive("changeLanguage",o),e.$inject=["$translateProvider"],t.$inject=["$translate"]}(),function(){"use strict";function e(e,t,o,r){function a(){p.idProblem=e.localStorage.getItem("problemid"),o.getcarf(p.idProblem).success(function(e){e.success&&(p.localStakeholders=e.stakeholders,p.stakeholderList=p.localStakeholders,p.carfList=e.carf,p.carfPriorityList=p.localPriorityList)}),p.inProcessing=!1}function n(){p.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},p.valueList=[]}function i(e){""===e.pms?r.errorMessage("Select PMS"):e.values.length<1?r.errorMessage("Select one or more Value"):e.stakeholders.length<1?r.errorMessage("Select one or more Stakeholder(s)"):""===e.priority?r.errorMessage("Select priority [Low, Medium or High]"):(t.emit("broadcastCARFadd",e),p.stakeholderList=[],p.carfPriorityList=[])}function s(e,o){var r={index:e,carf:o};t.emit("broadcastCARFremove",r)}function l(e){void 0!==e&&angular.forEach(p.carfPMSValue,function(t){return t.pms==e?(p.carf.values=[],void(p.valueList=t.values)):void 0})}function c(e){p.carf.priority=e}function u(e){if(0===p.carf.values.length)p.carf.values.push(e);else{for(var t=0;t<p.carf.values.length;t++)if(e==p.carf.values[t])return void p.carf.values.splice(t,1);p.carf.values.push(e)}}function m(e){if(0===p.carf.stakeholders.length)p.carf.stakeholders.push(e);else{for(var t=0;t<p.carf.stakeholders.length;t++)if(e==p.carf.stakeholders[t])return void p.carf.stakeholders.splice(t,1);p.carf.stakeholders.push(e)}}var p=this;p.idProblem="",p.inProcessing=!0,p.valueList=[],p.stakeholderList=[],p.localStakeholders=[],p.addpmsvalue=i,p.removeCARF=s,p.selectPMSValue=l,p.setPriotity=c,p.addListValue=u,p.addStakeholder=m,p.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},p.initCarf=a,p.carfList=[],p.carfPriorityList=[],t.on("onBroadcastCARFadd",function(e){p.carfList.push(e),n(),p.stakeholderList=p.localStakeholders,p.carfPriorityList=p.localPriorityList}),t.on("onBroadcastCARFremove",function(e){p.carfList.splice(e,1)}),p.localPriorityList=["Low","Medium","High"],p.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,r){function a(){l.isOpenChat=!l.isOpenChat,document.getElementById("message").focus()}function n(){l.idProblem=r.localStorage.getItem("problemid"),l.nickname=r.localStorage.getItem("nickname"),l.photo=r.localStorage.getItem("photo"),o.gethistorychat(l.idProblem).success(function(e){if(e.success)for(var t=0;t<e.historychat.length;t++){var o=new Date(e.historychat[t].time),r={nickname:e.historychat[t].nickname,msg:e.historychat[t].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "};l.messages.push(r)}}),t.emit("checkUsers")}function i(){l.replay=l.replay?!1:!0}function s(e){void 0===e||e.length<2||(t.emit("broadcastChat",e),l.newmsg="")}var l=this;l.newmsg="",l.messages=[],l.replay=!1,l.nickname="",l.userList=[],l.initHistoryChat=n,l.showReplay=i,l.sendMessage=s,l.photo="",l.openChat=a,l.isOpenChat=!1,t.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);l.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})}),t.on("onCheckUsers",function(e){l.userList=e})}angular.module("app").controller("chatDSC",e),e.$inject=["$timeout","Socket","problemService","$window"]}(),function(){"use strict";function e(e,t,o,r){function a(){l.idProblem=e.localStorage.getItem("problemid"),l.useremail=e.localStorage.getItem("useremail"),o.getcollaborators(l.idProblem).success(function(e){e.success?l.collaborators=e.collaborators:r.errorMessage(e.message)})}function n(e){for(var t=0;t<l.collaborators.length;t++)if(e==l.collaborators[t].email)return!0;return!1}function i(e){if(l.useremail==e)r.errorMessage(l.useremail+" is email of owner.");else if(n(e))r.errorMessage("Usuario Cadastrado.");else{var t={idproblem:l.idProblem,email:e};o.invite(t).success(function(e){e.success?l.collaborators=e.collaborators:r.errorMessage(e.message)})}}function s(e){var t={idproblem:l.idProblem,email:e.email};o.removecollaborators(t).success(function(e){e.success?(r.errorMessage("Colaborador foi removido do projeto."),l.collaborators=e.collaborators):r.errorMessage(e.message)})}var l=this;l.idProblem="",l.collaborators=[],l.useremail="",l.initCollaborators=a,l.addCollaborator=i,l.removeCollaborator=s}angular.module("app").controller("controllerCollaborators",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(){function e(e){var t=document.getElementById("projectResport"),o=new jsPDF("l","px");o.addHTML(t,0,0,{pagesplit:!0},function(e){o.save("test.pdf")})}var t=this;t.idproblem="ajflajfljalfjaljf",t.buidReport=e}angular.module("app").controller("dscReportController",e)}(),function(){"use strict";function e(e,t,o,r){function a(){s.idproblem=e.localStorage.getItem("problemid"),t.getevaluation(s.idproblem).success(function(e){e.success?s.evaluationframeworkList=e.evaluationframework:r.errorMessage(e.message)})}function n(e){o.emit("broadcastFrameSave",e)}function i(e){e.openEdit=!0}var s=this;s.evaluationframeworkList=[],s.initEvaluation=a,s.setOpenEditDiscution=i,s.saveDiscution=n,o.on("onBroadcastFrameSave",function(e){angular.forEach(s.evaluationframeworkList,function(t){t.onionlayer==e.onionlayer&&angular.forEach(t.stakeholders,function(t){t._id==e._id&&(t.name=e.name,t.onionlayer=e.onionlayer,t.description=e.description,t.openEdit=e.openEdit,t.problems=e.problems,t.solutions=e.solutions)})})}),o.on("onUpdateStakeholder",function(e){console.log(e)})}angular.module("app").controller("evaluationframeworkController",e),e.$inject=["$window","problemService","Socket","toastApp"]}(),function(){"use strict";function e(e,t){function o(){t.go("startproblem")}function r(){t.go("problem.collaborators")}function a(){t.go("problem.description")}function n(){e.logout(),t.go("init.login")}var i=this;i.formAddCollaborators=r,i.editDescriptionProblem=a,i.doLogout=n,i.systemReturn=o}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$state"]}(),function(){"use strict";function e(e,t,o,r,a){function n(){c.idProblem=r.localStorage.getItem("problemid"),a.getproblem(c.idProblem).success(function(e){e.success?c.problem=e.problem:o.errorMessage(e.message)})}function i(){u=!0}function s(o){o.update=u,e.emit("atualizarProblema",o),u&&(u=!1,t(i,2e3))}function l(t){t.update=u,e.emit("atualizarProblema",t)}var c=this,u=!0;c.problem="",c.problemUpdate=s,c.getCurrentProblem=n,c.saveDescription=l,e.on("onAtualizarProblema",function(e){c.problem.description=e.description,c.problem.update=u})}angular.module("app").controller("editProblemController",e),e.$injectre=["$scope","Socket"],e.$inject=["Socket","$timeout","toastApp","$window","problemService"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(v,t)}function r(t){return e.get(b+"?idproblem="+t)}function a(t){return e.get(f+"?email="+t)}function n(t){return e.get(k+"?idproblem="+t)}function i(t){return e.post(w,t)}function s(t){return e.get(y+"?idproblem="+t)}function l(t){return e.get(S+"?idproblem="+t)}function c(t){return e.get(P+"?idproblem="+t)}function u(t){return e.get(C+"?idproblem="+t)}function m(t){return e.get($+"?idproblem="+t)}function p(t){return e.get(h+"?email="+t)}function d(t){return e.get(L+"?idproblem="+t.idproblem+"&email="+t.email)}function g(t){return e.get(I+"?idproblem="+t)}var f="/api/problem/getproblems",h="/api/problem/getproblemscollaborator",v="/api/problem/newproblem",b="/api/problem/getproblem",k="/api/problem/getcollaborators",w="/api/problem/invite",y="/api/problem/getonion",S="/api/problem/getevaluation",P="/api/problem/getsemiotic",C="/api/problem/getcarf",$="/api/problem/removeproblem",L="/api/problem/removecollaborator",I="/api/problem/historychat",A={newproblem:o,getuserproblems:a,getproblem:r,getcollaborators:n,invite:i,getonion:s,getevaluation:l,getsemiotic:c,getcarf:u,removeproblem:m,getproblemscollaborator:p,removecollaborators:d,gethistorychat:g};return A}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t,o,r){function a(){m.idproblem=t.localStorage.getItem("problemid"),o.getsemiotic(m.idproblem).success(function(e){e.success?m.semioticframework=e.semioticframework:r.errorMessage(e.message)})}function n(t,o){var r={text:t,update:o};e.emit("updateSocialWorld",r)}function i(t,o){var r={text:t,update:o};e.emit("updatePragmatic",r)}function s(t,o){var r={text:t,update:o};e.emit("updateSemantic",r)}function l(t,o){var r={text:t,update:o};e.emit("updateSyntatic",r)}function c(t,o){var r={text:t,update:o};e.emit("updateEmpirical",r)}function u(t,o){var r={text:t,update:o};e.emit("updatePhysical",r)}var m=this;m.idproblem="",m.saveSocialWorld=n,m.savePragmatic=i,m.saveSemantic=s,m.saveSyntatic=l,m.saveEmpirical=c,m.savePhysical=u,m.semioticframework="",m.initSemioticFramework=a,e.on("onUpdateSocialWorld",function(e){m.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){m.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){m.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,t){m.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){m.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){m.semioticframework.physical=e})}angular.module("app").controller("semioticframeworkController",e),e.$inject=["Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,r,a){function n(){d.idproblem=t.localStorage.getItem("problemid"),o.getonion(d.idproblem).success(function(e){e.success?d.stakeholderList=e.stakeholders:a.errorMessage(e.message)}),d.inProcessing=!1}function i(t){console.log("Salvar...."+t.name),console.log("Salvar...."+t.description),e.emit("broadcastOnionSave",t)}function s(t){e.emit("broadcastOnionEdit",t)}function l(t,o){var r={index:t,stakeholder:o};e.emit("broadcastOnionRemove",r)}function c(e,t,o){var a=r.confirm().parent(angular.element(document.body)).title("Detete Stakeholder?").content("Title: "+o.name).ariaLabel("Remove Stakeholder").ok("Yes!").cancel("Cancel").targetEvent(e);r.show(a).then(function(){l(t,o)})}function u(t,o){var r={onionlayer:o,name:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px"};e.emit("broadcastOnionAdd",r)}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline;"),document.getElementById("legend"+e).setAttribute("opacity","0.7"),document.getElementById(e).setAttribute("opacity","0.7")}function p(e){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById("legend"+e).setAttribute("opacity","1.0"),document.getElementById(e).setAttribute("opacity","1.0")}var d=this;d.idproblem="",d.stakeholderList=[],d.stakeholder="",d.intitOnion=n,d.move=!1,d.inProcessing=!0,d.saveStakeholder=i,d.setOpenEdit=s,d.delPostIt=c,d.addPostIt=u,d.acende=m,d.apaga=p,e.on("onBroadcastOnionSave",function(e){angular.forEach(d.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y)})}),e.on("onBroadcastOnionEdit",function(e){angular.forEach(d.stakeholderList,function(t){t._id===e&&(t.openEdit=!0)})}),e.on("onBroadcastOnionRemove",function(e){var t=document.getElementById("stakeholder"+d.stakeholderList[e]._id);t.style.display="none",d.stakeholderList.splice(e,1)}),e.on("onBroadcastOnionAdd",function(e){d.stakeholderList.push(e)})}angular.module("app").controller("stakeholderController",e),e.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(),function(){"use strict";function e(e,t,o,r,a,n,i){function s(){h.userid=a.localStorage.getItem("userid"),h.nickname=a.localStorage.getItem("nickname"),h.useremail=a.localStorage.getItem("useremail"),h.photo=a.localStorage.getItem("photo"),n.getuserproblems(h.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);h.problemList=e.problems}else i.errorMessage(e.message)}),n.getproblemscollaborator(h.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);h.problemCollaboratorList=e.problems}else i.errorMessage(e.message)}),h.loginInProgress=!1}function l(e){n.removeproblem(e).success(function(t){if(t.success){for(var o=0;o<h.problemList.length;o++)if(h.problemList[o]._id==e){h.problemList.splice(o,1);break}}else i.errorMessage(t.message)})}function c(t,o){var r=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+o.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(t);e.show(r).then(function(){l(o._id)})}function u(e){e.userid=h.userid,n.newproblem(e).success(function(e){e.success?h.editProblem(e.problem):i.errorMessage(e.message)})}function m(e){a.localStorage.setItem("problemid",e._id);var o={idproblem:e._id,nickname:h.nickname};r.emit("initProblem",o),t.go("problem.stakeholders")}function p(){o.logout(),t.go("init.login")}function d(){t.go("profile")}function g(t){e.show({controller:f,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:t})}function f(e,t){e.hide=function(){t.hide()},e.cancel=function(){t.cancel()},e.addNewProblem=function(e){h.startNewProblem(e),t.cancel()}}var h=this;h.nickname="",h.userid="",h.useremail="",h.problemList=[],h.problemCollaboratorList=[],h.loginInProgress=!0,h.getProblems=s,h.revomveProblem=c,h.startNewProblem=u,h.editProblem=m,h.doLogout=p,h.newProblem=g,h.editProfile=d,h.photo,f.$inject=["$scope","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,r){function a(){u.idproblem=e.localStorage.getItem("problemid"),t.getonion(u.idproblem).success(function(e){if(e.success){if(e.stakeholders.length>0){for(var t=1;t<u.sugestionValuesArray.length;t++)u.sugestionValues+=u.sugestionValuesArray[t]+", ";u.sugestionValues[u.sugestionValuesArray[u.sugestionValuesArray.length-1]]+".";for(var r=0;r<e.stakeholders.length;r++)for(var a=0;a<u.stakeholderList.length;a++){var n={_id:e.stakeholders[r]._id,onionlayer:e.stakeholders[r].onionlayer,values:e.stakeholders[r].values,name:e.stakeholders[r].name,description:e.stakeholders[r].description,openEdit:e.stakeholders[r].openEdit,x:e.stakeholders[r].x,y:e.stakeholders[r].y,newValues:[]};e.stakeholders[r].onionlayer!=u.stakeholderList[a].onionlayer||u.stakeholderList[a].stakeholders.push(n)}}u.inProcessing=!1}else o.errorMessage(e.message)})}function n(e){e.openEdit=!0}function i(e){e.openEdit=!1}function s(e,t){for(var o=[],a=0;a<t.values.length;a++)t.values[a]!=e&&o.push(t.values[a]);t.values=o,r.emit("broadcastOnionSave",t)}function l(e){if(""===e.newValues||void 0===e.newValues)o.errorMessage("Valor n�o especificado.");else{for(var t=e.newValues.split(","),a=0;a<t.length;a++)c(e.values,t[a])?o.errorMessage("Duplicate value: "+t[a]):e.values.push(t[a]);e.newValues="",e.openEdit=!1,r.emit("broadcastOnionSave",e)}}function c(e,t){for(var o=0;o<e.length;o++)if(t===e[o])return!0;return!1}var u=this;u.inProcessing=!0,u.idProblem="",u.useremail="",u.newvalues="",u.initValueIdentificationFrame=a,u.setSuggestionShow=n,u.leaveSuggestionShow=i,u.removeValueIdentication=s,u.setValueIdentication=l,u.sugestionValues="",u.stakeholderList=[{onionlayer:"Community",stakeholders:[]},{onionlayer:"Market",stakeholders:[]},{onionlayer:"Source",stakeholders:[]},{onionlayer:"Contruibuition",stakeholders:[]},{onionlayer:"Technico",stakeholders:[]}],u.sugestionValuesArray=["Acessibilidade","Adaptabilidade","Estética","Autonomia","Disponibilidade","Consciência","Colaboração","Conversação","Emoção e Afeto","Grupos","Identidade","Consentimento informado","Meta-comunicação","Normas","Objeto","Portabilidade","Presença","Privacidade","Propriedade","Reciprocidade, Relacionamento, Reputação","Escalabilidade","Segurança","Compartilhamento","Confiança","Usabilidade","Visibilidade"],r.on("onBroadcastOnionSave",function(e){console.log(e),angular.forEach(u.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.newValues=[])})})}angular.module("app").controller("valueIdentificationFrameController",e),e.$inject=["$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,t,o,r){function a(){t.go("startproblem")}function n(){s.userid=e.localStorage.getItem("userid"),void 0!==s.userid}function i(t){var o={userid:e.localStorage.getItem("userid"),photo:t};r.uploadPhoto(o).success(function(o){o.success?e.localStorage.setItem("photo",t):toastApp.errorMessage("-----")})}var s=this;s.startProfile=n,s.uploadInProgress=!0,s.uploadProgress=0,s.userid,s.savePhoto=i,s.systemReturn=a,s.myImage="",s.myCroppedImage="";var l=function(e){var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){o.$apply(function(t){t.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",l)}angular.module("app").controller("profileController",e),e.$inject=["$window","$state","$scope","signupService"]}(),function(){"use strict";function e(e,t,o,r,a,n,i,s,l){function c(e){o.create(e).success(function(t){t.success?(a.errorMessage(s("translate")("WELCOME_SYSTEM")+e.nickname),r.go("init.login")):a.errorMessage("Email Já cadastrado")})}function u(t){e.use(t)}function m(e){o.rescuePassword(e).success(function(e){a.errorMessage(e.success?"Email com instruções enviado":"Error")})}function p(e){o.changePassword(e).success(function(e){e.success?(a.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),r.go("init.login")):a.errorMessage("Error")})}var d=this;d.message="",d.save=c,d.rescuePassword=m,d.changePassword=p,d.setLang=u,d.loginInProgress=!1}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(i,t)}function r(t){return e.post(s,t)}function a(o){var r=t.search();return e.get(l+"?mytoken="+r.mytoken+"&password="+o.password)}function n(t){return e.post(c,t)}var i="/api/signup/",s="/api/rescuepasswd/",l="/api/rescuepasswd/newpasswd/",c="/api/profile/photo/",u={create:o,rescuePassword:r,changePassword:a,uploadPhoto:n};return u}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t){var o=e.extendPalette("teal",{contrastDefaultColor:"light",contrastDarkColors:["50"],50:"E0F2F1"});e.definePalette("customGreen",o),e.theme("default").primaryPalette("customGreen",{"default":"500","hue-1":"50"}).accentPalette("teal"),e.theme("input","default").primaryPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,t,o){var r={};return r.login=function(t,r){return e.post("/api/login",{email:t,password:r}).success(function(e){return o.setToken(e.token),e})},r.logout=function(){o.setToken()},r.isLoggedIn=function(){return o.getToken()?!0:!1},r.getUser=function(r){return o.getToken()?e.get("/api/me/?userid="+r):t.reject({message:"User has no token"})},r}]).factory("AuthToken",["$window",function(e){var t={};return t.getToken=function(){return e.localStorage.getItem("token")},t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token")},t}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,t,o){var r={};return r.request=function(e){var t=o.getToken();return t&&(e.headers["x-access-token"]=t),e},r}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket",function(e,t){return{restrict:"A",replace:!0,link:function(t,o,r){function a(e){var r=e.target.id;"svg"==r&&(r=""),t.stakeholder.onionlayer=r,y=e.pageY,x=e.pageX,o.css({top:y+"px",left:x+"px"}),t.stakeholder.x=x+"px",t.stakeholder.y=y+"px"}function n(){e.unbind("mousemove",a),e.unbind("mouseup",n)}o.on("mousedown",function(t){"stakeholder"==t.target.id.substring(0,11)&&(t.preventDefault(),e.bind("mousemove",a),e.bind("mouseup",n))})}}}]),function(){"use strict";function e(e,t,o,r,a,n,i){function s(t){e.use(t)}function l(e){u.inProcessing=!0,u.error="",r.login(e.email,e.password).success(function(e){a.localStorage.setItem("useremail",e.email),a.localStorage.setItem("userid",e.id),a.localStorage.setItem("nickname",e.nickname),u.setLang(e.language),r.getUser(e.id).then(function(t){i.errorMessage(n("translate")("WELCOME_SYSTEM")+": "+u.user.nickname),e.success?(console.log(t),a.localStorage.setItem("photo",t.data.photo),u.inProcessing=!1,o.go("startproblem")):u.error=e.message})})}function c(){r.logout(),o("init")}var u=this;u.inProcessing=!1,u.setLang=s,u.doLogout=c,u.doLogin=l,u.loggedIn=r.isLoggedIn(),t.$on("$routeChangeStart",function(){u.loggedIn=r.isLoggedIn(),r.getUser().then(function(e){u.user=e.data})})}angular.module("app").controller("loginController",e),e.$inject=["$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),function(){"use strict";angular.module("app").service("Socket",["$location","$timeout",function(e,t){this.socket=io(),this.on=function(e,o){this.socket&&this.socket.on(e,function(e){t(function(){o(e)})})},this.emit=function(e,t){this.socket&&this.socket.emit(e,t)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}])}();
//# sourceMappingURL=data:application/json;base64,