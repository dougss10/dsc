function toastApp(e){function t(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top left",hideDelay:5e3})}var o={message:"",errorMessage:t};return o}function chatDSC(e,t,o,r,a,n){var i=this;i.newmsg="",i.messages=[],i.replay=!1,i.nickname="",i.close=function(){o("chat").close().then(function(){r.debug("close chat")})},i.initHistoryChat=function(){i.idProblem=n.localStorage.getItem("problemid"),i.nickname=n.localStorage.getItem("nickname"),a.gethistorychat(i.idProblem).success(function(e){if(e.success){console.log(e.historychat);for(var t=0;t<e.historychat.length;t++){var o=new Date(e.historychat[t].time),r={nickname:e.historychat[t].nickname,msg:e.historychat[t].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "};i.messages.push(r)}}})},i.showReplay=function(){i.replay=i.replay?!1:!0},t.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);i.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})}),i.sendMessage=function(e){t.emit("broadcastChat",e),i.newmsg=""}}function evaluationframeworkController(e,t,o,r){function a(){n.idproblem=e.localStorage.getItem("problemid"),t.getevaluation(n.idproblem).success(function(e){e.success?n.evaluationframeworkList=e.evaluationframework:toastApp.errorMessage(e.message)})}var n=this;n.evaluationframeworkList=[],n.initEvaluation=a,o.on("onBroadcastFrameSave",function(e){angular.forEach(n.evaluationframeworkList,function(t){t.onionlayer==e.onionlayer&&angular.forEach(t.stakeholders,function(t){t._id==e._id&&(t.name=e.name,t.onionlayer=e.onionlayer,t.description=e.description,t.openEdit=e.openEdit,t.problems=e.problems,t.solutions=e.solutions)})})}),r.saveDiscution=function(e){o.emit("broadcastFrameSave",e)},o.on("onUpdateStakeholder",function(e){console.log(e)}),r.setOpenEditDiscution=function(e){e.openEdit=!0}}function semioticframeworkController(e,t,o){function r(){u.idproblem=t.localStorage.getItem("problemid"),o.getsemiotic(u.idproblem).success(function(e){e.success?u.semioticframework=e.semioticframework:toastApp.errorMessage(e.message)})}function a(t,o){var r={text:t,update:o};e.emit("updateSocialWorld",r)}function n(t,o){var r={text:t,update:o};e.emit("updatePragmatic",r)}function i(t,o){var r={text:t,update:o};e.emit("updateSemantic",r)}function s(t,o){var r={text:t,update:o};e.emit("updateSyntatic",r)}function l(t,o){var r={text:t,update:o};e.emit("updateEmpirical",r)}function c(t,o){var r={text:t,update:o};e.emit("updatePhysical",r)}var u=this;u.idproblem="",u.saveSocialWorld=a,u.savePragmatic=n,u.saveSemantic=i,u.saveSyntatic=s,u.saveEmpirical=l,u.savePhysical=c,u.semioticframework="",u.initSemioticFramework=r,e.on("onUpdateSocialWorld",function(e){u.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){u.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){u.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,t){u.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){u.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){u.semioticframework.physical=e})}function stakeholderController(e,t,o,r){function a(){n.idproblem=o.localStorage.getItem("problemid"),r.getonion(n.idproblem).success(function(e){e.success?n.stakeholderList=e.stakeholders:toastApp.errorMessage(e.message)})}var n=this;n.idproblem="",n.stakeholderList=[],n.stakeholder="",n.intitOnion=a,n.move=!1,e.on("onBroadcastOnionSave",function(e){angular.forEach(n.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.dadaopenEdit,t.x=e.x,t.y=e.y)})}),t.saveStakeholder=function(t){e.emit("broadcastOnionSave",t)},e.on("onBroadcastOnionEdit",function(e){angular.forEach(n.stakeholderList,function(t){t._id==e&&(t.openEdit=!0)})}),t.setOpenEdit=function(t){e.emit("broadcastOnionEdit",t)},e.on("onBroadcastOnionRemove",function(e){var t=document.getElementById("stakeholder"+n.stakeholderList[e]._id);t.style.display="none",n.stakeholderList.splice(e,1)}),t.setValue=function(){console.log("Chamando para trocar para true....")},t.delPostIt=function(t,o){var r={index:t,stakeholder:o};e.emit("broadcastOnionRemove",r)},e.on("onBroadcastOnionAdd",function(e){n.stakeholderList.push(e)}),t.addPostIt=function(t,o){var r=n.stakeholderList.length+1,a={_id:r,onionlayer:o,name:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px"};e.emit("broadcastOnionAdd",a)},n.acende=function(e){e.target.setAttribute("opacity","0.8")},n.apaga=function(e){e.target.setAttribute("opacity","1.0")}}!function(){"use strict";angular.module("app",["toastService","textAngular","luegg.directives","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,t){var o=this;o.message=t.message,o.closeToast=function(){e.hide()}}]).factory("toastApp",toastApp),toastApp.$inject=["$mdToast"],function(){"use strict";function e(e,t){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.description",{url:"/description",views:{"problem-description":{templateUrl:"views/pages/problemdescription.html",controller:"editProblemController as vm"}}}).state("problem.collaborators",{url:"/collaborators",views:{"problem-description":{templateUrl:"views/pages/collaborators.html",controller:"controllerCollaborators as vm"}}}).state("problem.stakeholders",{url:"stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}),t.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function t(e){this.setLang=function(t){e.use(t)}}function o(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",t).directive("changeLanguage",o),e.$inject=["$translateProvider"],t.$inject=["$translate"]}(),function(){"use strict";function e(e,t,o,r){function a(){i.idProblem=e.localStorage.getItem("problemid"),o.getcarf(i.idProblem).success(function(e){e.success&&(i.localStakeholders=e.stakeholders,i.stakeholderList=i.localStakeholders,i.carfList=e.carf,i.carfPriorityList=i.localPriorityList)})}function n(){i.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},i.valueList=[]}var i=this;i.idProblem="",i.valueList=[],i.stakeholderList=[],i.localStakeholders=[],i.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},i.initCarf=a,i.carfList=[],i.carfPriorityList=[],t.on("onBroadcastCARFadd",function(e){i.carfList.push(e),n(),i.stakeholderList=i.localStakeholders,i.carfPriorityList=i.localPriorityList}),i.addpmsvalue=function(e){""==e.pms?r.errorMessage("Select PMS"):e.values.length<1?r.errorMessage("Select one or more Value"):e.stakeholders.length<1?r.errorMessage("Select one or more Stakeholder(s)"):""==e.priority?r.errorMessage("Select priority [Low, Medium or High]"):(t.emit("broadcastCARFadd",e),i.stakeholderList=[],i.carfPriorityList=[])},t.on("onBroadcastCARFremove",function(e){i.carfList.splice(e,1)}),i.removeCARF=function(e,o){var r={index:e,carf:o};t.emit("broadcastCARFremove",r)},i.selectPMSValue=function(e){void 0!=e&&angular.forEach(i.carfPMSValue,function(t){return t.pms==e?(i.carf.values=[],void(i.valueList=t.values)):void 0})},i.setPriotity=function(e){i.carf.priority=e},i.addListValue=function(e){if(0==i.carf.values.length)i.carf.values.push(e);else{for(var t=0;t<i.carf.values.length;t++)if(e==i.carf.values[t])return void i.carf.values.splice(t,1);i.carf.values.push(e)}},i.addStakeholder=function(e){if(0==i.carf.stakeholders.length)i.carf.stakeholders.push(e);else{for(var t=0;t<i.carf.stakeholders.length;t++)if(e==i.carf.stakeholders[t])return void i.carf.stakeholders.splice(t,1);i.carf.stakeholders.push(e)}},i.localPriorityList=["Low","Medium","High"],i.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),angular.module("app").controller("chatDSC",chatDSC),chatDSC.$inject=["$timeout","Socket","$mdSidenav","$log","problemService","$window"],function(){"use strict";function e(e,t,o){function r(e){for(var t=0;t<a.collaborators.length;t++)if(e==a.collaborators[t].email)return!0;return!1}var a=this;a.idProblem="",a.collaborators=[],a.useremail="",a.initCollaborators=function(){a.idProblem=e.localStorage.getItem("problemid"),a.useremail=e.localStorage.getItem("useremail"),t.getcollaborators(a.idProblem).success(function(e){e.success?a.collaborators=e.collaborators:o.errorMessage(e.message)})},a.addCollaborator=function(e){if(a.useremail==e)o.errorMessage(a.useremail+" is email of owner.");else if(r(e))o.errorMessage("Usuario Cadastrado.");else{var n={idproblem:a.idProblem,email:e};t.invite(n).success(function(e){e.success?a.collaborators=e.collaborators:o.errorMessage(e.message)})}},a.removeCollaborator=function(e){var r={idproblem:a.idProblem,email:e.email};t.removecollaborators(r).success(function(e){e.success?(o.errorMessage("Colaborador foi removido do projeto."),a.collaborators=e.collaborators):o.errorMessage(e.message)})}}angular.module("app").controller("controllerCollaborators",e),e.$inject=["$window","problemService","toastApp"]}(),angular.module("app").controller("evaluationframeworkController",evaluationframeworkController),evaluationframeworkController.$inject=["$window","problemService","Socket","$scope"],function(){"use strict";function e(e,t,o,r,a,n){function i(e){var t=a.debounce(function(){r(e).toggle().then(function(){n.debug("toggle "+e+" is done")})},300);return t}var s=this;s.openChat=i("chat"),s.formAddCollaborators=function(){o.go("problem.collaborators")},s.editDescriptionProblem=function(){o.go("problem.description")},s.doLogout=function(){e.logout(),o.go("init.login")}}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$timeout","$state","$mdSidenav","$mdUtil","$log"]}(),function(){"use strict";function e(e,t,o,r,a,n){var i=this,s=!0;i.problem="",i.tabsdsc=['<md-tab data-ui-sref="problem.stakeholders" md-active="$state.is(\'problem.stakeholders\')" label="{{\'LABEL_ARTIFACT_STAKEHOLDER\' | translate }}"></md-tab>','<md-tab data-ui-sref="problem.evaluationframework" md-active="$state.is(\'problem.evaluationframework\')" label="{{\'LABEL_ARTIFACT_EVALUATION_FRAMEWORK\' | translate }}"></md-tab>','<md-tab data-ui-sref="problem.semioticframework" md-active="$state.is(\'problem.semioticframework\')" label="{{\'LABEL_ARTIFACT_SEMIOTIC_FRAMEWORK\' | translate }}"></md-tab>','<md-tab data-ui-sref="problem.carf" md-active="$state.is(\'problem.carf\')" label="CARF"></md-tab></md-tabs>'],i.getCurrentProblem=function(){i.idProblem=a.localStorage.getItem("problemid"),n.getproblem(i.idProblem).success(function(e){e.success?i.problem=e.problem:r.errorMessage(e.message)})};var l=function(){s=!0};t.on("onAtualizarProblema",function(e){console.log("=========================================================================retorno...."+e),i.problem.description=e.description,i.problem.update=s}),e.problemUpdate=function(e){e.update=s,t.emit("atualizarProblema",e),s&&(s=!1,o(l,2e3))},e.saveDescription=function(e){console.log("============================================================================="),e.update=s,t.emit("atualizarProblema",e)}}angular.module("app").controller("editProblemController",e),e.$injectre=["$scope","Socket"],e.$inject=["$scope","Socket","$timeout","toastApp","$window","problemService"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(h,t)}function r(t){return e.get(v+"?idproblem="+t)}function a(t){return e.get(f+"?email="+t)}function n(t){return e.get(k+"?idproblem="+t)}function i(t){return e.post(w,t)}function s(t){return e.get(S+"?idproblem="+t)}function l(t){return e.get(y+"?idproblem="+t)}function c(t){return e.get($+"?idproblem="+t)}function u(t){return e.get(P+"?idproblem="+t)}function m(t){return e.get(C+"?idproblem="+t)}function p(t){return e.get(b+"?email="+t)}function d(t){return e.get(L+"?idproblem="+t.idproblem+"&email="+t.email)}function g(t){return e.get(A+"?idproblem="+t)}var f="/api/problem/getproblems",b="/api/problem/getproblemscollaborator",h="/api/problem/newproblem",v="/api/problem/getproblem",k="/api/problem/getcollaborators",w="/api/problem/invite",S="/api/problem/getonion",y="/api/problem/getevaluation",$="/api/problem/getsemiotic",P="/api/problem/getcarf",C="/api/problem/removeproblem",L="/api/problem/removecollaborator",A="/api/problem/historychat",E={newproblem:o,getuserproblems:a,getproblem:r,getcollaborators:n,invite:i,getonion:s,getevaluation:l,getsemiotic:c,getcarf:u,removeproblem:m,getproblemscollaborator:p,removecollaborators:d,gethistorychat:g};return E}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),angular.module("app").controller("semioticframeworkController",semioticframeworkController),semioticframeworkController.$inject=["Socket","$window","problemService"],angular.module("app").controller("stakeholderController",stakeholderController),stakeholderController.$inject=["Socket","$scope","$window","problemService"],function(){"use strict";function e(e,t,o,r,a,n,i){function s(e){n.removeproblem(e).success(function(t){if(t.success){for(var o=0;o<c.problemList.length;o++)if(c.problemList[o]._id==e){c.problemList.splice(o,1);break}}else i.errorMessage(t.message)})}function l(e,t){e.hide=function(){t.hide()},e.cancel=function(){t.cancel()},e.addNewProblem=function(e){c.startNewProblem(e),t.cancel()}}var c=this;c.nickname="",c.userid="",c.useremail="",c.problemList=[],c.problemCollaboratorList=[],c.getProblems=function(){c.userid=a.localStorage.getItem("userid"),c.nickname=a.localStorage.getItem("nickname"),c.useremail=a.localStorage.getItem("useremail"),n.getuserproblems(c.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);c.problemList=e.problems}else i.errorMessage(e.message)}),n.getproblemscollaborator(c.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);c.problemCollaboratorList=e.problems}else i.errorMessage(e.message)})},c.revomveProblem=function(t,o){var r=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+o.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(t);e.show(r).then(function(){s(o._id)})},c.startNewProblem=function(e){e.userid=c.userid,n.newproblem(e).success(function(e){e.success?c.editProblem(e.problem):i.errorMessage(e.message)})},c.editProblem=function(e){a.localStorage.setItem("problemid",e._id);var o={idproblem:e._id,nickname:c.nickname};r.emit("initProblem",o),t.go("problem.stakeholders")},c.doLogout=function(){o.logout(),t.go("init.login")},c.newProblem=function(t){e.show({controller:l,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:t})},l.$inject=["$scope","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,r,a,n,i,s,l){function c(e){o.create(e).success(function(o){o.success?(n.setToken(o.token),i.getUser().then(function(o){d.user=o.data,t.localStorage.setItem("useremail",e.email),t.localStorage.setItem("userid",e.id),t.localStorage.setItem("nickname",e.nickname),d.setLang(e.language),a.errorMessage(s("translate")("WELCOME_SYSTEM")+": "+d.user.nickname),r.go("startproblem")})):a.errorMessage("Email Já cadastrado")})}function u(t){e.use(t)}function m(e){o.rescuePassword(e).success(function(e){console.log(e),a.errorMessage(e.success?"Email com instruções enviado":"Error")})}function p(e){o.changePassword(e).success(function(e){e.success?(a.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),r.go("init")):a.errorMessage("Error")})}var d=this;d.message="",d.save=c,d.rescuePassword=m,d.changePassword=p,d.setLang=u}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(n,t)}function r(t){return e.post(i,t)}function a(o){var r=t.search();return e.get(s+"?mytoken="+r.mytoken+"&password="+o.password)}var n="/api/signup/",i="/api/rescuepasswd/",s="/api/rescuepasswd/newpasswd/",l={create:o,rescuePassword:r,changePassword:a};return l}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t){var o=e.extendPalette("teal",{contrastDefaultColor:"light",contrastDarkColors:["50"],50:"E0F2F1"});e.definePalette("customGreen",o),e.theme("default").primaryPalette("customGreen",{"default":"500","hue-1":"50"}).accentPalette("teal"),e.theme("input","default").primaryPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,t,o){var r={};return r.login=function(t,r){return e.post("/api/login",{email:t,password:r}).success(function(e){return o.setToken(e.token),e})},r.logout=function(){o.setToken()},r.isLoggedIn=function(){return o.getToken()?!0:!1},r.getUser=function(){return o.getToken()?e.get("/api/me"):t.reject({message:"User has no token"})},r}]).factory("AuthToken",["$window",function(e){var t={};return t.getToken=function(){return e.localStorage.getItem("token")},t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token")},t}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,t,o){var r={};return r.request=function(e){var t=o.getToken();return t&&(e.headers["x-access-token"]=t),e},r}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket",function(e,t){return{restrict:"A",replace:!0,link:function(t,o,r){function a(e){var r=e.target.id;"svg"==r&&(r=""),t.stakeholder.onionlayer=r,y=e.pageY,x=e.pageX,o.css({top:y+"px",left:x+"px"}),t.stakeholder.x=x+"px",t.stakeholder.y=y+"px"}function n(){e.unbind("mousemove",a),e.unbind("mouseup",n)}o.on("mousedown",function(t){"stakeholder"==t.target.id.substring(0,11)&&(t.preventDefault(),e.bind("mousemove",a),e.bind("mouseup",n))})}}}]),function(){"use strict";function e(e,t,o,r,a,n,i){var s=this;s.setLang=function(t){e.use(t)},s.loggedIn=r.isLoggedIn(),t.$on("$routeChangeStart",function(){s.loggedIn=r.isLoggedIn(),r.getUser().then(function(e){s.user=e.data})}),s.doLogin=function(e){s.processing=!0,s.error="",r.login(e.email,e.password).success(function(e){a.localStorage.setItem("useremail",e.email),a.localStorage.setItem("userid",e.id),a.localStorage.setItem("nickname",e.nickname),s.setLang(e.language),s.processing=!1,r.getUser().then(function(e){s.user=e.data,i.errorMessage(n("translate")("WELCOME_SYSTEM")+": "+s.user.nickname)}),e.success?o.go("startproblem"):s.error=e.message})},s.doLogout=function(){r.logout(),o("init")}}angular.module("app").controller("loginController",e),e.$inject=["$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),angular.module("app").service("Socket",["$location","$timeout",function(e,t){this.socket=io(),this.on=function(e,o){this.socket&&this.socket.on(e,function(e){t(function(){o(e)})})},this.emit=function(e,t){this.socket&&this.socket.emit(e,t)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvYXN0LnNlcnZpY2UuanMiLCJwcm9ibGVtL2NoYXQuY29udHJvbGxlci5qcyIsInByb2JsZW0vZXZhbHVhdGlvbmZyYW1ld29yay5jb250cm9sbGVyLmpzIiwicHJvYmxlbS9zZW1pb3RpY2ZyYW1ld29yay5lZGl0LmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL3N0YWtlaG9sZGVyLmVkaXQuY29udHJvbGxlci5qcyIsImRzYy5hcHAuanMiLCJyb3V0ZXIuYXBwLmpzIiwiYXBwLmRzYy5taW4uanMiLCJsYW5ndWFnZS90cmFuc2xhdGUuY29udHJvbGxlci5qcyIsInByb2JsZW0vY2FyZi5jb250cm9sbGVyLmpzIiwicHJvYmxlbS9jb2xsYWJvcmF0b3JzLmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL21lbnUucHJvYmxlbS5jb250cm9sbGVyLmpzIiwicHJvYmxlbS9wcm9ibGVtLmVkaXQuY29udHJvbGxlci5qcyIsInByb2JsZW0vcHJvYmxlbS5zZXJ2aWNlLmpzIiwicHJvYmxlbS9zdGFydC5wcm9ibGVtLmNvbnRyb2xsZXIuanMiLCJ1c2VyL3NpZ251cC5jb250cm9sbGVyLmpzIiwidXNlci9zaWdudXAuc2VydmljZS5qcyIsImFwcC5jb25maWcuanMiLCJhdXRoLnNlcnZpY2UuanMiLCJkcmFnLmRzYy5qcyIsImxvZ2luLmNvbnRyb2xsZXIuanMiLCJzb2NrZXQuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJ0b2FzdEFwcCIsIiRtZFRvYXN0IiwiZXJyb3JNZXNzYWdlIiwidGhpcyIsIm1lc3NhZ2UiLCJzaG93IiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsInRlbXBsYXRlVXJsIiwiYWN0aW9uIiwiaGlnaGxpZ2h0QWN0aW9uIiwicG9zaXRpb24iLCJoaWRlRGVsYXkiLCJzZXJ2aWNlIiwiY2hhdERTQyIsIiR0aW1lb3V0IiwiU29ja2V0IiwiJG1kU2lkZW5hdiIsIiRsb2ciLCJwcm9ibGVtU2VydmljZSIsIiR3aW5kb3ciLCJ2bSIsIm5ld21zZyIsIm1lc3NhZ2VzIiwicmVwbGF5Iiwibmlja25hbWUiLCJjbG9zZSIsInRoZW4iLCJkZWJ1ZyIsImluaXRIaXN0b3J5Q2hhdCIsImlkUHJvYmxlbSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJnZXRoaXN0b3J5Y2hhdCIsInN1Y2Nlc3MiLCJkYXRhIiwiY29uc29sZSIsImxvZyIsImhpc3RvcnljaGF0IiwiaSIsImxlbmd0aCIsInRtcCIsIkRhdGUiLCJ0aW1lIiwibXNuIiwibXNnIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJwdXNoIiwic2hvd1JlcGxheSIsIm9uIiwib2JqIiwic2VuZE1lc3NhZ2UiLCJjaGF0bXNnIiwiZW1pdCIsImV2YWx1YXRpb25mcmFtZXdvcmtDb250cm9sbGVyIiwiJHNjb3BlIiwiaW5pdEV2YWx1YXRpb24iLCJpZHByb2JsZW0iLCJnZXRldmFsdWF0aW9uIiwiZXZhbHVhdGlvbmZyYW1ld29ya0xpc3QiLCJldmFsdWF0aW9uZnJhbWV3b3JrIiwiYW5ndWxhciIsImZvckVhY2giLCJvbmlvbmxheWVyIiwic3Rha2Vob2xkZXJzIiwic3Rha2Vob2xkZXIiLCJfaWQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJvcGVuRWRpdCIsInByb2JsZW1zIiwic29sdXRpb25zIiwic2F2ZURpc2N1dGlvbiIsInN0YWtlaG9sZGVyT25pb24iLCJzZXRPcGVuRWRpdERpc2N1dGlvbiIsImN1cnJlbnRTdGFrZWhvbGRlciIsInNlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlciIsImluaXRTZW1pb3RpY0ZyYW1ld29yayIsImdldHNlbWlvdGljIiwic2VtaW90aWNmcmFtZXdvcmsiLCJzYXZlU29jaWFsV29ybGQiLCJ0ZXh0IiwiZmxhZ1NhdmUiLCJ1cGRhdGUiLCJzYXZlUHJhZ21hdGljIiwic2F2ZVNlbWFudGljIiwic2F2ZVN5bnRhdGljIiwic2F2ZUVtcGlyaWNhbCIsInNhdmVQaHlzaWNhbCIsInNvY2lhbHdvcmxkIiwicHJhZ21hdGljIiwic2VtaW90aWNyYW1ld29yayIsInN5bnRhdGljIiwiZW1waXJpY2FsIiwicGh5c2ljYWwiLCJzdGFrZWhvbGRlckNvbnRyb2xsZXIiLCJpbnRpdE9uaW9uIiwiZ2V0b25pb24iLCJzdGFrZWhvbGRlckxpc3QiLCJtb3ZlIiwiZGFkYW9wZW5FZGl0IiwieCIsInkiLCJzYXZlU3Rha2Vob2xkZXIiLCJpZCIsInNldE9wZW5FZGl0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiZGlzcGxheSIsInNwbGljZSIsInNldFZhbHVlIiwiZGVsUG9zdEl0IiwiaW5kZXgiLCJyZXRvcm5vIiwiYWRkUG9zdEl0IiwiZSIsImNhbWFkYSIsIm5ld1N0YWtlaG9sZGVyIiwicGFnZVgiLCJwYWdlWSIsImFjZW5kZSIsImV2dCIsInRhcmdldCIsInNldEF0dHJpYnV0ZSIsImFwYWdhIiwibW9kdWxlIiwiY29uZmlnIiwiJGh0dHBQcm92aWRlciIsImludGVyY2VwdG9ycyIsImNsb3NlVG9hc3QiLCJoaWRlIiwiZmFjdG9yeSIsIiRpbmplY3QiLCJyb3V0ZXMiLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInN0YXRlIiwidXJsIiwidmlld3MiLCJjb250ZW50LXRhYiIsInByb2JsZW0tZGVzY3JpcHRpb24iLCJkc2MtYXJ0aWZhY3QiLCJvdGhlcndpc2UiLCJpbml0TGFuZ3VhZ2UiLCIkdHJhbnNsYXRlUHJvdmlkZXIiLCJ1c2VTdGF0aWNGaWxlc0xvYWRlciIsInByZWZpeCIsInN1ZmZpeCIsInByZWZlcnJlZExhbmd1YWdlIiwidXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5IiwidXNlTG9jYWxTdG9yYWdlIiwibGFuZ3VhZ2VDb250cm9sbGVyIiwiJHRyYW5zbGF0ZSIsInNldExhbmciLCJsYW5nS2V5IiwidXNlIiwiY2hhbmdlTGFuZ3VhZ2UiLCJyZXN0cmljdCIsImRpcmVjdGl2ZSIsImNhcmZDb250cm9sbGVyIiwiaW5pdENhcmYiLCJnZXRjYXJmIiwibG9jYWxTdGFrZWhvbGRlcnMiLCJjYXJmTGlzdCIsImNhcmYiLCJjYXJmUHJpb3JpdHlMaXN0IiwibG9jYWxQcmlvcml0eUxpc3QiLCJyZXNldENhcmYiLCJwbXMiLCJ2YWx1ZXMiLCJwcmlvcml0eSIsInJlcXVpcmVtZW50IiwidmFsdWVMaXN0IiwiYWRkcG1zdmFsdWUiLCJyZW1vdmVDQVJGIiwic2VsZWN0UE1TVmFsdWUiLCJ1bmRlZmluZWQiLCJjYXJmUE1TVmFsdWUiLCJwbXNfdmFsdWUiLCJzZXRQcmlvdGl0eSIsImFkZExpc3RWYWx1ZSIsIm5ld3ZhbHVlIiwiYWRkU3Rha2Vob2xkZXIiLCJjb250cm9sbGVyQ29sbGFib3JhdG9ycyIsInNlYXJjaENhbGxhYm9yYXRpb24iLCJlbWFpbCIsInNlbGYiLCJjb2xsYWJvcmF0b3JzIiwidXNlcmVtYWlsIiwiaW5pdENvbGxhYm9yYXRvcnMiLCJnZXRjb2xsYWJvcmF0b3JzIiwiYWRkQ29sbGFib3JhdG9yIiwiaW52aXRlIiwicmVtb3ZlQ29sbGFib3JhdG9yIiwicGVvcGxlIiwicmVtb3ZlY29sbGFib3JhdG9ycyIsIm1lbnVQcm9ibGVtYUNvbnRyb2xsZXIiLCJBdXRoIiwiJHN0YXRlIiwiJG1kVXRpbCIsImJ1aWxkVG9nZ2xlciIsIm5hdklEIiwiZGVib3VuY2VGbiIsImRlYm91bmNlIiwidG9nZ2xlIiwib3BlbkNoYXQiLCJmb3JtQWRkQ29sbGFib3JhdG9ycyIsImdvIiwiZWRpdERlc2NyaXB0aW9uUHJvYmxlbSIsImRvTG9nb3V0IiwibG9nb3V0IiwiZWRpdFByb2JsZW1hQ29udHJvbGxlciIsInVwZGF0ZVRydWUiLCJwcm9ibGVtIiwidGFic2RzYyIsImdldEN1cnJlbnRQcm9ibGVtIiwiZ2V0cHJvYmxlbSIsInNldFVwZGF0ZSIsInByb2JsZW1VcGRhdGUiLCJzYXZlRGVzY3JpcHRpb24iLCIkaW5qZWN0cmUiLCIkaHR0cCIsIiRsb2NhdGlvbiIsIm5ld3Byb2JsZW0iLCJwb3N0IiwiQVBJX1JPVVRFX05FV1BST0JMRU0iLCJnZXQiLCJBUElfUk9VVEVfR0VUUFJPQkxFTSIsImdldHVzZXJwcm9ibGVtcyIsIkFQSV9ST1VURV9HRVRVU0VSUFJPQkxFTVMiLCJBUElfUk9VVEVfR0VUQ09MTEFCT1JBVE9SUyIsIkFQSV9ST1VURV9JTlZJVEUiLCJBUElfUk9VVEVfR0VUT05JT04iLCJBUElfUk9VVEVfR0VURVZBTFVBVElPTiIsIkFQSV9ST1VURV9HRVRTRU1JT1RJQ0ZSQU1FV09SSyIsIkFQSV9ST1VURV9HRVRDQVJGIiwicmVtb3ZlcHJvYmxlbSIsIkFQSV9ST1VURV9SRU1PVkVQUk9CTEVNIiwiZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3IiLCJBUElfUk9VVEVfR0VUVVNFUlBST0JMRU1TQ09MTEFCT1JBVE9SIiwiQVBJX1JPVVRFX1JFTU9WRUNPTExBQk9SQVRPUiIsIkFQSV9ST1VURV9HRVRISVNUT1JZQ0hBVCIsInN0YXJ0UHJvYmxlbUNvbnRyb2xsZXIiLCIkbWREaWFsb2ciLCJyZW1vdmVQcm9ibGVtIiwicHJvYmxlbWlkIiwicHJvYmxlbUxpc3QiLCJEaWFsb2dDb250cm9sbGVyIiwiY2FuY2VsIiwiYWRkTmV3UHJvYmxlbSIsInN0YXJ0TmV3UHJvYmxlbSIsInVzZXJpZCIsInByb2JsZW1Db2xsYWJvcmF0b3JMaXN0IiwiZ2V0UHJvYmxlbXMiLCJyZXBsYWNlIiwic3Vic3RyaW5nIiwicmV2b212ZVByb2JsZW0iLCJldiIsImNvbmZpcm0iLCJwYXJlbnQiLCJlbGVtZW50IiwiYm9keSIsInRpdGxlIiwiY29udGVudCIsImFyaWFMYWJlbCIsIm9rIiwidGFyZ2V0RXZlbnQiLCJlZGl0UHJvYmxlbSIsInNldEl0ZW0iLCJpbml0c29ja2V0cHJvYmxlbSIsIm5ld1Byb2JsZW0iLCJzaWdudXBDb250cm9sbGVyIiwic2lnbnVwU2VydmljZSIsIkF1dGhUb2tlbiIsIiRmaWx0ZXIiLCIkc3RhdGVQYXJhbXMiLCJzYXZlVXNlciIsInVzZXIiLCJjcmVhdGUiLCJzZXRUb2tlbiIsInRva2VuIiwiZ2V0VXNlciIsImxhbmd1YWdlIiwicmVzY3VlUGFzc3dvcmQiLCJ1c2VyRW1haWwiLCJjaGFuZ2VQYXNzd29yZCIsInNhdmUiLCJBUElfUk9VVEVfVVNFUiIsIkFQSV9ST1VURV9SRVNDVUVQQVNTV09SRCIsIm15dG9rZW5VUkwiLCJzZWFyY2giLCJBUElfUk9VVEVfU0VUTkVXUEFTU1dPUkQiLCJteXRva2VuIiwicGFzc3dvcmQiLCJhcHBDb25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsImN1c3RvbUdyZWVuTWFwIiwiZXh0ZW5kUGFsZXR0ZSIsImNvbnRyYXN0RGVmYXVsdENvbG9yIiwiY29udHJhc3REYXJrQ29sb3JzIiwiNTAiLCJkZWZpbmVQYWxldHRlIiwidGhlbWUiLCJwcmltYXJ5UGFsZXR0ZSIsImRlZmF1bHQiLCJodWUtMSIsImFjY2VudFBhbGV0dGUiLCIkcSIsImF1dGhGYWN0b3J5IiwibG9naW4iLCJpc0xvZ2dlZEluIiwiZ2V0VG9rZW4iLCJyZWplY3QiLCJhdXRoVG9rZW5GYWN0b3J5IiwicmVtb3ZlSXRlbSIsImludGVyY2VwdG9yRmFjdG9yeSIsInJlcXVlc3QiLCJoZWFkZXJzIiwiJGRvY3VtZW50IiwibGluayIsInNjb3BlIiwiYXR0ciIsIm1vdXNlbW92ZSIsImV2ZW50IiwiaWRfZGl2IiwiY3NzIiwidG9wIiwibGVmdCIsIm1vdXNldXAiLCJ1bmJpbmQiLCJwcmV2ZW50RGVmYXVsdCIsImJpbmQiLCJsb2dpbkNvbnRyb2xsZXIiLCIkcm9vdFNjb3BlIiwibG9nZ2VkSW4iLCIkb24iLCJkb0xvZ2luIiwicHJvY2Vzc2luZyIsImVycm9yIiwic29ja2V0IiwiaW8iLCJldmVudE5hbWUiLCJjYWxsYmFjayIsInJlbW92ZUxpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFtQkEsUUFBQUEsVUFBQUMsR0FVQSxRQUFBQyxHQUFBQSxHQUNBQyxLQUFBQyxRQUFBRixFQUNBRCxFQUFBSSxNQUVBQyxXQUFBLGtCQUNBQyxhQUFBLEtBQ0FDLFlBQUEsNEJBQ0FDLE9BQUEsS0FDQUMsaUJBQUEs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TixHQUVBWixLQUFBc1YsT0FBQUMsS0FJQXZWLEtBQUFrRCxHQUFBLFNBQUFzUyxFQUFBQyxHQUNBelYsS0FBQXNWLFFBQ0F0VixLQUFBc1YsT0FBQXBTLEdBQUFzUyxFQUFBLFNBQUF4VCxHQUNBcEIsRUFBQSxXQUNBNlUsRUFBQXpULFFBS0FoQyxLQUFBc0QsS0FBQSxTQUFBa1MsRUFBQXhULEdBQ0FoQyxLQUFBc1YsUUFDQXRWLEtBQUFzVixPQUFBaFMsS0FBQWtTLEVBQUF4VCxJQUlBaEMsS0FBQTBWLGVBQUEsU0FBQUYsR0FDQXhWLEtBQUFzVixRQUNBdFYsS0FBQXNWLE9BQUFJLGVBQUFGIiwiZmlsZSI6ImFwcC5kc2MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyNy8wNi8yMDE1LlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ3RvYXN0U2VydmljZScsW10pXHJcbiAgICAuY29udHJvbGxlcigndG9hc3RDb250cm9sbGVyJywgZnVuY3Rpb24oJG1kVG9hc3QsdG9hc3RBcHApIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5tZXNzYWdlID0gIHRvYXN0QXBwLm1lc3NhZ2U7XHJcbiAgICAgICAgdm0uY2xvc2VUb2FzdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkbWRUb2FzdC5oaWRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9KVxyXG4gICAgLmZhY3RvcnkoICd0b2FzdEFwcCcsIHRvYXN0QXBwICk7XHJcblxyXG4gICAgdG9hc3RBcHAuJGluamVjdCA9IFsgJyRtZFRvYXN0JyBdO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRvYXN0QXBwICgkbWRUb2FzdCkge1xyXG5cclxuXHJcbiAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICBtZXNzYWdlOiAnJyxcclxuICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXJyb3JNZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3RvYXN0Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvZHNjdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIk9LXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QWN0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcCBsZWZ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZURlbGF5OiA1MDAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAvKmZ1bmN0aW9uIGVycm9yTWVzc2FnZShlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgJG1kVG9hc3Quc2hvdyhcclxuICAgICAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgICAgICAgIC5jb250ZW50KHRoaXMubWVzc2FnZSksXHJcbiAgICAgICAgICAgICAgICAuYWN0aW9uKCdPSycpXHJcbiAgICAgICAgICAgICAgICAuaGlnaGxpZ2h0QWN0aW9uKHRydWUpXHJcbiAgICAgICAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDkwMDApXHJcbiAgICAgICAgKTtcclxuICAgIH0qL1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAxNS8wNy8yMDE1LlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdjaGF0RFNDJyxjaGF0RFNDKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjaGF0RFNDKCR0aW1lb3V0LCBTb2NrZXQsICRtZFNpZGVuYXYsICRsb2cscHJvYmxlbVNlcnZpY2UsJHdpbmRvdykge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0ubmV3bXNnID0gXCJcIjtcclxuICAgICAgICB2bS5tZXNzYWdlcyA9IFtdO1xyXG4gICAgICAgIHZtLnJlcGxheSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLm5pY2tuYW1lID0gXCJcIixcclxuICAgICAgICB2bS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJG1kU2lkZW5hdignY2hhdCcpLmNsb3NlKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbG9nLmRlYnVnKFwiY2xvc2UgY2hhdFwiKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmluaXRIaXN0b3J5Q2hhdCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZtLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICAgICB2bS5uaWNrbmFtZSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25pY2tuYW1lJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGhpc3RvcnljaGF0KHZtLmlkUHJvYmxlbSlcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5oaXN0b3J5Y2hhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5oaXN0b3J5Y2hhdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBEYXRlKGRhdGEuaGlzdG9yeWNoYXRbaV0udGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNuID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pY2tuYW1lOiBkYXRhLmhpc3RvcnljaGF0W2ldLm5pY2tuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZzogZGF0YS5oaXN0b3J5Y2hhdFtpXS5tc2csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogdG1wLmdldERhdGUoKSArIFwiL1wiICsgKHRtcC5nZXRNb250aCgpICsgMSApKyBcIi9cIiArIHRtcC5nZXRGdWxsWWVhcigpICsgXCIgW1wiICsgdG1wLmdldEhvdXJzKCkgKyBcIjpcIiArIHRtcC5nZXRNaW51dGVzKCkgKyBcIl0gXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2VzLnB1c2gobXNuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5zaG93UmVwbGF5ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYodm0ucmVwbGF5KXtcclxuICAgICAgICAgICAgICAgIHZtLnJlcGxheSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHZtLnJlcGxheSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RDaGF0JywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBEYXRlKG9ialtvYmoubGVuZ3RoIC0xXS50aW1lKTtcclxuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIG5pY2tuYW1lOiBvYmpbb2JqLmxlbmd0aCAtMV0ubmlja25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbXNnOiBvYmpbb2JqLmxlbmd0aCAtMV0ubXNnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IHRtcC5nZXREYXRlKCkgKyBcIi9cIiArICh0bXAuZ2V0TW9udGgoKSArIDEpICsgXCIvXCIgKyB0bXAuZ2V0RnVsbFllYXIoKSArIFwiIFtcIiArIHRtcC5nZXRIb3VycygpICsgXCI6XCIgKyB0bXAuZ2V0TWludXRlcygpICsgXCJdIFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdm0uc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihjaGF0bXNnKXtcclxuICAgICAgICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RDaGF0JywgY2hhdG1zZyk7XHJcbiAgICAgICAgICAgIHZtLm5ld21zZyA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI5LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXInLGV2YWx1YXRpb25mcmFtZXdvcmtDb250cm9sbGVyKTtcclxuXHJcblxyXG5cclxuXHJcbiAgZnVuY3Rpb24gZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXIgKCR3aW5kb3cscHJvYmxlbVNlcnZpY2UsU29ja2V0LCRzY29wZSl7XHJcblxyXG4gICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICB2bS5ldmFsdWF0aW9uZnJhbWV3b3JrTGlzdCA9W107XHJcbiAgICAgIHZtLmluaXRFdmFsdWF0aW9uID0gaW5pdEV2YWx1YXRpb247XHJcblxyXG4gICAgICBmdW5jdGlvbiBpbml0RXZhbHVhdGlvbigpe1xyXG4gICAgICAgICAgdm0uaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGV2YWx1YXRpb24odm0uaWRwcm9ibGVtKVxyXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2bS5ldmFsdWF0aW9uZnJhbWV3b3JrTGlzdCA9IGRhdGEuZXZhbHVhdGlvbmZyYW1ld29yaztcclxuICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgIH07XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdEZyYW1lU2F2ZScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2godm0uZXZhbHVhdGlvbmZyYW1ld29ya0xpc3QsZnVuY3Rpb24oZXZhbHVhdGlvbmZyYW1ld29yayl7XHJcbiAgICAgICAgICAgICBpZiggZXZhbHVhdGlvbmZyYW1ld29yay5vbmlvbmxheWVyID09IGRhdGEub25pb25sYXllcil7XHJcbiAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGV2YWx1YXRpb25mcmFtZXdvcmsuc3Rha2Vob2xkZXJzLGZ1bmN0aW9uKHN0YWtlaG9sZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWtlaG9sZGVyLl9pZCA9PSBkYXRhLl9pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIub25pb25sYXllciA9IGRhdGEub25pb25sYXllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gZGF0YS5vcGVuRWRpdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnByb2JsZW1zID0gZGF0YS5wcm9ibGVtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnNvbHV0aW9ucyA9IGRhdGEuc29sdXRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgJHNjb3BlLnNhdmVEaXNjdXRpb24gPSBmdW5jdGlvbihzdGFrZWhvbGRlcikge1xyXG4gICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdEZyYW1lU2F2ZScsIHN0YWtlaG9sZGVyKTtcclxuICAgICAgfTtcclxuXHJcblxyXG4gICAgICBTb2NrZXQub24oJ29uVXBkYXRlU3Rha2Vob2xkZXInLCBmdW5jdGlvbiAoc3Rha2Vob2xkZXJPbmlvbikge1xyXG4gICAgICAgICBjb25zb2xlLmxvZyhzdGFrZWhvbGRlck9uaW9uKTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJHNjb3BlLnNldE9wZW5FZGl0RGlzY3V0aW9uID0gZnVuY3Rpb24oY3VycmVudFN0YWtlaG9sZGVyKXtcclxuICAgICAgICAgIGN1cnJlbnRTdGFrZWhvbGRlci5vcGVuRWRpdCA9IHRydWU7XHJcbiAgICAgIH07XHJcbiAgfVxyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyOS8wNi8yMDE1LlxyXG4gKi9cclxuXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdzZW1pb3RpY2ZyYW1ld29ya0NvbnRyb2xsZXInLHNlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlcik7XHJcblxyXG5cclxuZnVuY3Rpb24gc2VtaW90aWNmcmFtZXdvcmtDb250cm9sbGVyKFNvY2tldCwkd2luZG93LCBwcm9ibGVtU2VydmljZSl7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgdm0uaWRwcm9ibGVtID0gXCJcIjtcclxuICAgIHZtLnNhdmVTb2NpYWxXb3JsZCA9IHNhdmVTb2NpYWxXb3JsZDtcclxuICAgIHZtLnNhdmVQcmFnbWF0aWMgPSBzYXZlUHJhZ21hdGljO1xyXG4gICAgdm0uc2F2ZVNlbWFudGljID0gc2F2ZVNlbWFudGljO1xyXG4gICAgdm0uc2F2ZVN5bnRhdGljID0gc2F2ZVN5bnRhdGljO1xyXG4gICAgdm0uc2F2ZUVtcGlyaWNhbCA9IHNhdmVFbXBpcmljYWw7XHJcbiAgICB2bS5zYXZlUGh5c2ljYWwgPSBzYXZlUGh5c2ljYWw7XHJcbiAgICB2bS5zZW1pb3RpY2ZyYW1ld29yayA9IFwiXCI7XHJcbiAgICB2bS5pbml0U2VtaW90aWNGcmFtZXdvcmsgPSBpbml0U2VtaW90aWNGcmFtZXdvcms7XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFNlbWlvdGljRnJhbWV3b3JrKCl7XHJcbiAgICAgICAgdm0uaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcblxyXG4gICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHNlbWlvdGljKHZtLmlkcHJvYmxlbSlcclxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uc2VtaW90aWNmcmFtZXdvcmsgPSBkYXRhLnNlbWlvdGljZnJhbWV3b3JrO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVTb2NpYWxXb3JsZCcsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgdm0uc2VtaW90aWNmcmFtZXdvcmsuc29jaWFsd29ybGQgPSB0ZXh0O1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2F2ZVNvY2lhbFdvcmxkKHRleHQsZmxhZ1NhdmUpe1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZmxhZ1NhdmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCd1cGRhdGVTb2NpYWxXb3JsZCcsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvblVwZGF0ZVByYWdtYXRpYycsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgdm0uc2VtaW90aWNmcmFtZXdvcmsucHJhZ21hdGljID0gdGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVQcmFnbWF0aWModGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZVByYWdtYXRpYycsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvblVwZGF0ZVNlbWFudGljJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICB2bS5zZW1pb3RpY2ZyYW1ld29yay5zZW1pb3RpY3JhbWV3b3JrID0gdGV4dDtcclxuICAgIH0pO1xyXG4gICAgZnVuY3Rpb24gc2F2ZVNlbWFudGljKHRleHQsZmxhZ1NhdmUpe1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZmxhZ1NhdmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCd1cGRhdGVTZW1hbnRpYycsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvblVwZGF0ZVN5bnRhdGljJywgZnVuY3Rpb24gKHRleHQsZmxhZ1NhdmUpIHtcclxuICAgICAgICB2bS5zZW1pb3RpY2ZyYW1ld29yay5zeW50YXRpYyA9IHRleHQ7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIHNhdmVTeW50YXRpYyh0ZXh0LGZsYWdTYXZlKXtcclxuICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZsYWdTYXZlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgndXBkYXRlU3ludGF0aWMnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVFbXBpcmljYWwnLCBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgIHZtLnNlbWlvdGljZnJhbWV3b3JrLmVtcGlyaWNhbCA9IHRleHQ7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIHNhdmVFbXBpcmljYWwodGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZUVtcGlyaWNhbCcsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvblVwZGF0ZVBoeXNpY2FsJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICB2bS5zZW1pb3RpY2ZyYW1ld29yay5waHlzaWNhbCA9IHRleHQ7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIHNhdmVQaHlzaWNhbCh0ZXh0LGZsYWdTYXZlKXtcclxuICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZsYWdTYXZlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgndXBkYXRlUGh5c2ljYWwnLCBvYmopO1xyXG4gICAgfVxyXG59IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyOS8wNi8yMDE1LlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignc3Rha2Vob2xkZXJDb250cm9sbGVyJyxzdGFrZWhvbGRlckNvbnRyb2xsZXIpO1xyXG5cclxuXHJcbmZ1bmN0aW9uIHN0YWtlaG9sZGVyQ29udHJvbGxlcihTb2NrZXQsJHNjb3BlLCR3aW5kb3cscHJvYmxlbVNlcnZpY2Upe1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuICAgIHZtLmlkcHJvYmxlbSA9IFwiXCI7XHJcbiAgICB2bS5zdGFrZWhvbGRlckxpc3QgPSBbXTtcclxuICAgIHZtLnN0YWtlaG9sZGVyID0gXCJcIjtcclxuICAgIHZtLmludGl0T25pb24gPSBpbnRpdE9uaW9uO1xyXG4gICAgdm0ubW92ZSA9IGZhbHNlO1xyXG5cclxuICAgIGZ1bmN0aW9uIGludGl0T25pb24oKXtcclxuICAgICAgICB2bS5pZHByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRvbmlvbih2bS5pZHByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnN0YWtlaG9sZGVyTGlzdCA9IGRhdGEuc3Rha2Vob2xkZXJzO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uU2F2ZScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2godm0uc3Rha2Vob2xkZXJMaXN0LCBmdW5jdGlvbiAoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgaWYgKHN0YWtlaG9sZGVyLl9pZCA9PSBkYXRhLl9pZCl7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5zdGFrZWhvbGRlciA9IGRhdGEuc3Rha2Vob2xkZXI7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIub3BlbkVkaXQgPSBkYXRhLmRhZGFvcGVuRWRpdFxyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIueCA9IGRhdGEueDtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnkgPSBkYXRhLnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgJHNjb3BlLnNhdmVTdGFrZWhvbGRlciA9IGZ1bmN0aW9uKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE9uaW9uU2F2ZScsIHN0YWtlaG9sZGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uRWRpdCcsIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5zdGFrZWhvbGRlckxpc3QsIGZ1bmN0aW9uIChzdGFrZWhvbGRlcikge1xyXG4gICAgICAgICAgICBpZiAoc3Rha2Vob2xkZXIuX2lkID09IGlkKSBzdGFrZWhvbGRlci5vcGVuRWRpdCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLnNldE9wZW5FZGl0ID0gZnVuY3Rpb24oaWQpe1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvbkVkaXQnLCBpZCk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25SZW1vdmUnLCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICB2YXIgc3Rha2Vob2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YWtlaG9sZGVyXCIgK3ZtLnN0YWtlaG9sZGVyTGlzdFtpZF0uX2lkKTtcclxuICAgICAgICBzdGFrZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHZtLnN0YWtlaG9sZGVyTGlzdC5zcGxpY2UoaWQsMSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuc2V0VmFsdWUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2hhbWFuZG8gcGFyYSB0cm9jYXIgcGFyYSB0cnVlLi4uLlwiKVxyXG4gICAgfVxyXG5cclxuICAgICRzY29wZS5kZWxQb3N0SXQgPSBmdW5jdGlvbihpbmRleCxzdGFrZWhvbGRlcikge1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXI6IHN0YWtlaG9sZGVyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvblJlbW92ZScsIG9iaik7XHJcbiAgICB9O1xyXG5cclxuICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RPbmlvbkFkZCcsIGZ1bmN0aW9uIChyZXRvcm5vKSB7XHJcbiAgICAgICAgdm0uc3Rha2Vob2xkZXJMaXN0LnB1c2gocmV0b3Jubyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuYWRkUG9zdEl0ID0gZnVuY3Rpb24oZSxjYW1hZGEpIHtcclxuICAgICAgICB2YXIgaWQgPSB2bS5zdGFrZWhvbGRlckxpc3QubGVuZ3RoICsgMTtcclxuICAgICAgICB2YXIgbmV3U3Rha2Vob2xkZXIgPVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJfaWRcIjppZCxcclxuICAgICAgICAgICAgXCJvbmlvbmxheWVyXCI6IGNhbWFkYSxcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcclxuICAgICAgICAgICAgXCJvcGVuRWRpdFwiOiB0cnVlLFxyXG4gICAgICAgICAgICBcInhcIjogZS5wYWdlWCArICdweCcsXHJcbiAgICAgICAgICAgIFwieVwiOiBlLnBhZ2VZICsgJ3B4J1xyXG4gICAgICAgIH1cclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb25BZGQnLCBuZXdTdGFrZWhvbGRlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmFjZW5kZSA9IGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgIGV2dC50YXJnZXQuc2V0QXR0cmlidXRlKFwib3BhY2l0eVwiLCBcIjAuOFwiKTtcclxuICAgIH1cclxuICAgIHZtLmFwYWdhID0gZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgICAgZXZ0LnRhcmdldC5zZXRBdHRyaWJ1dGUoXCJvcGFjaXR5XCIsIFwiMS4wXCIpO1xyXG4gICAgfVxyXG5cclxufSIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjUvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcsWyd0b2FzdFNlcnZpY2UnLCd0ZXh0QW5ndWxhcicsJ2x1ZWdnLmRpcmVjdGl2ZXMnLCAnRHJvcERTQycsJ2F1dGhTZXJ2aWNlJywndWkucm91dGVyJywnbmdNYXRlcmlhbCcsJ25nTWRJY29ucycsJ25nQ29va2llcycsJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnXSlcclxuICAgICAgICAuY29uZmlnKGZ1bmN0aW9uKCRodHRwUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnQXV0aEludGVyY2VwdG9yJyk7XHJcbiAgICAgICAgfSlcclxuXHJcbn0pKCk7XHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyNS8wNi8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKHJvdXRlcyk7XHJcblxyXG5mdW5jdGlvbiByb3V0ZXMoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG5cclxuICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdpbml0Jywge1xyXG4gICAgICAgIHVybDogJy8nLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvaW5pdHBhZ2UuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnaW5pdC5sb2dpbicsIHtcclxuICAgICAgICAgICAgdXJsOiAnbG9naW4nLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2NvbnRlbnQtdGFiJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvdXNlcmxvZ2luLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnaW5pdC5zaWdudXAnLCB7XHJcbiAgICAgICAgICAgIHVybDogJ3NpZ251cCcsXHJcbiAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnY29udGVudC10YWInOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zaWdudXAuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnaW5pdC5yZXNjdWVwYXNzd29yZCcsIHtcclxuICAgICAgICAgICAgdXJsOiAncmVzY3VlcGFzc3dvcmQnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2NvbnRlbnQtdGFiJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcmVzY3VlcGFzc3dvcmQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnc3RhcnRwcm9ibGVtJywge1xyXG4gICAgICAgICAgICB1cmw6ICcvc3RhcnRwcm9ibGVtJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zdGFydHByb2JsZW0uaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzdGFydFByb2JsZW1Db250cm9sbGVyIGFzIHZtJ1xyXG5cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ25ld3Bhc3N3b3JkJywge1xyXG5cclxuICAgICAgICAgICAgdXJsOiAnL25ld3Bhc3N3b3JkLzpteXRva2VuJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9uZXdwYXNzd29yZC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXIgYXMgdm0nLFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgncHJvYmxlbScsIHtcclxuICAgICAgICAgICAgdXJsOiAnL3Byb2JsZW0nLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3Byb2JsZW0uaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtZW51UHJvYmxlbUNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoJ3Byb2JsZW0uZGVzY3JpcHRpb24nLCB7XHJcbiAgICAgICAgICAgIHVybDogJy9kZXNjcmlwdGlvbicsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAncHJvYmxlbS1kZXNjcmlwdGlvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3Byb2JsZW1kZXNjcmlwdGlvbi5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZWRpdFByb2JsZW1Db250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoJ3Byb2JsZW0uY29sbGFib3JhdG9ycycsIHtcclxuICAgICAgICAgICAgdXJsOiAnL2NvbGxhYm9yYXRvcnMnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ3Byb2JsZW0tZGVzY3JpcHRpb24nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9jb2xsYWJvcmF0b3JzLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjb250cm9sbGVyQ29sbGFib3JhdG9ycyBhcyB2bSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKCdwcm9ibGVtLnN0YWtlaG9sZGVycycsIHtcclxuICAgICAgICAgICAgdXJsOiAnc3Rha2Vob2xkZXJzJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdkc2MtYXJ0aWZhY3QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zdGFrZWhvbGRlcnMuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3N0YWtlaG9sZGVyQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKCdwcm9ibGVtLmV2YWx1YXRpb25mcmFtZXdvcmsnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdldmFsdWF0aW9uZnJhbWV3b3JrJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9ldmFsdWF0aW9uZnJhbWV3b3JrLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ3Byb2JsZW0uc2VtaW90aWNmcmFtZXdvcmsnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdzZW1pb3RpY2ZyYW1ld29yaycsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdkc2MtYXJ0aWZhY3QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvc2VtaW90aWNmcmFtZXdvcmsuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzZW1pb3RpY2ZyYW1ld29ya0NvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgncHJvYmxlbS5jYXJmJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnY2FyZicsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdkc2MtYXJ0aWZhY3QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvY2FyZi5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2NhcmZDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvbG9naW4nKTtcclxufVxyXG5cclxufSkoKTsiLG51bGwsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMTkvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKGluaXRMYW5ndWFnZSlcclxuICAgIC5jb250cm9sbGVyKCdsYW5ndWFnZUNvbnRyb2xsZXInLGxhbmd1YWdlQ29udHJvbGxlcilcclxuICAgIC5kaXJlY3RpdmUoJ2NoYW5nZUxhbmd1YWdlJyxjaGFuZ2VMYW5ndWFnZSk7XHJcblxyXG5pbml0TGFuZ3VhZ2UuJGluamVjdCA9IFsnJHRyYW5zbGF0ZVByb3ZpZGVyJ107XHJcbmxhbmd1YWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckdHJhbnNsYXRlJ107XHJcblxyXG5mdW5jdGlvbiBpbml0TGFuZ3VhZ2UgKCR0cmFuc2xhdGVQcm92aWRlcikge1xyXG4gICAgICAgICR0cmFuc2xhdGVQcm92aWRlci51c2VTdGF0aWNGaWxlc0xvYWRlcih7XHJcbiAgICAgICAgICAgIHByZWZpeDogJ2FwcC9sYW5ndWFnZS9sYW5nLScsXHJcbiAgICAgICAgICAgIHN1ZmZpeDogJy5qc29uJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICR0cmFuc2xhdGVQcm92aWRlci5wcmVmZXJyZWRMYW5ndWFnZSgnZW4nKTtcclxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KCdlc2NhcGVkJyk7XHJcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZUxvY2FsU3RvcmFnZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsYW5ndWFnZUNvbnRyb2xsZXIgKCR0cmFuc2xhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRMYW5nID0gZnVuY3Rpb24obGFuZ0tleSkge1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlLnVzZShsYW5nS2V5KTtcclxuICAgICAgICB9O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VMYW5ndWFnZSgpe1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0ZW1wbGF0ZVVybCA6IFwiYXBwL2xhbmd1YWdlL2NoYW5nZUxhbmd1YWdlLmh0bWxcIixcclxuICAgICAgICByZXN0cmljdDogXCJFXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDE0LzA3LzIwMTUuXHJcbiAqL1xyXG4oZnVuY3Rpb24oKXtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKFwiY2FyZkNvbnRyb2xsZXJcIixjYXJmQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gY2FyZkNvbnRyb2xsZXIoJHdpbmRvdyxTb2NrZXQscHJvYmxlbVNlcnZpY2UsdG9hc3RBcHApe1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uaWRQcm9ibGVtID0gXCJcIixcclxuICAgICAgICB2bS52YWx1ZUxpc3QgPSBbXTtcclxuICAgICAgICB2bS5zdGFrZWhvbGRlckxpc3QgPSBbXTtcclxuICAgICAgICB2bS5sb2NhbFN0YWtlaG9sZGVycyA9IFtdO1xyXG4gICAgICAgIHZtLmNhcmYgPSB7XHJcbiAgICAgICAgICAgIHBtczogXCJcIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXSxcclxuICAgICAgICAgICAgcHJpb3JpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgIHJlcXVpcmVtZW50OiBcIlwiLFxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlcnM6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgdm0uaW5pdENhcmYgPSBpbml0Q2FyZjtcclxuICAgICAgICB2bS5jYXJmTGlzdCA9IFtdO1xyXG4gICAgICAgIHZtLmNhcmZQcmlvcml0eUxpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW5pdENhcmYoKXtcclxuICAgICAgICAgICAgdm0uaWRQcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGNhcmYodm0uaWRQcm9ibGVtKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5sb2NhbFN0YWtlaG9sZGVycyA9IGRhdGEuc3Rha2Vob2xkZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5zdGFrZWhvbGRlckxpc3QgPSB2bS5sb2NhbFN0YWtlaG9sZGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uY2FyZkxpc3QgPSBkYXRhLmNhcmY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmNhcmZQcmlvcml0eUxpc3QgPSB2bS5sb2NhbFByaW9yaXR5TGlzdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0Q2FyZigpe1xyXG4gICAgICAgICAgICB2bS5jYXJmID0ge1xyXG4gICAgICAgICAgICAgICAgX2lkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG1zOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbXSxcclxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZW1lbnQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlcnM6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZtLnZhbHVlTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdENBUkZhZGQnLCBmdW5jdGlvbiAoY2FyZikge1xyXG4gICAgICAgICAgICB2bS5jYXJmTGlzdC5wdXNoKGNhcmYpO1xyXG4gICAgICAgICAgICByZXNldENhcmYoKTtcclxuICAgICAgICAgICAgdm0uc3Rha2Vob2xkZXJMaXN0ID0gdm0ubG9jYWxTdGFrZWhvbGRlcnM7XHJcbiAgICAgICAgICAgIHZtLmNhcmZQcmlvcml0eUxpc3QgPSB2bS5sb2NhbFByaW9yaXR5TGlzdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdm0uYWRkcG1zdmFsdWUgPSBmdW5jdGlvbihjYXJmKXtcclxuXHJcbiAgICAgICAgICAgIGlmKGNhcmYucG1zID09IFwiXCIpe1xyXG4gICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiU2VsZWN0IFBNU1wiKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBpZihjYXJmLnZhbHVlcy5sZW5ndGggPCAxICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiU2VsZWN0IG9uZSBvciBtb3JlIFZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY2FyZi5zdGFrZWhvbGRlcnMubGVuZ3RoIDwgMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlNlbGVjdCBvbmUgb3IgbW9yZSBTdGFrZWhvbGRlcihzKVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2FyZi5wcmlvcml0eSA9PSBcIlwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlNlbGVjdCBwcmlvcml0eSBbTG93LCBNZWRpdW0gb3IgSGlnaF1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdENBUkZhZGQnLCBjYXJmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLnN0YWtlaG9sZGVyTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uY2FyZlByaW9yaXR5TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RDQVJGcmVtb3ZlJywgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgIHZtLmNhcmZMaXN0LnNwbGljZShpZCwxKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdm0ucmVtb3ZlQ0FSRiA9IGZ1bmN0aW9uKGluZGV4LGNhcmYpe1xyXG4gICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgY2FyZjogY2FyZlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RDQVJGcmVtb3ZlJywgb2JqKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB2bS5zZWxlY3RQTVNWYWx1ZSA9IGZ1bmN0aW9uKHBtcyl7XHJcbiAgICAgICAgICAgIGlmKHBtcyAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5jYXJmUE1TVmFsdWUsIGZ1bmN0aW9uIChwbXNfdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG1zX3ZhbHVlLnBtcyA9PSBwbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uY2FyZi52YWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0udmFsdWVMaXN0ID0gcG1zX3ZhbHVlLnZhbHVlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5zZXRQcmlvdGl0eSA9IGZ1bmN0aW9uKHByaW9yaXR5KXtcclxuICAgICAgICAgICAgdm0uY2FyZi5wcmlvcml0eSA9IHByaW9yaXR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uYWRkTGlzdFZhbHVlID0gZnVuY3Rpb24obmV3dmFsdWUpe1xyXG4gICAgICAgICAgIGlmKHZtLmNhcmYudmFsdWVzLmxlbmd0aCA9PSAwKXtcclxuICAgICAgICAgICAgICAgIHZtLmNhcmYudmFsdWVzLnB1c2gobmV3dmFsdWUpO1xyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uY2FyZi52YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgIGlmIChuZXd2YWx1ZSA9PSB2bS5jYXJmLnZhbHVlc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZtLmNhcmYudmFsdWVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgdm0uY2FyZi52YWx1ZXMucHVzaChuZXd2YWx1ZSk7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmFkZFN0YWtlaG9sZGVyID0gZnVuY3Rpb24obmV3U3Rha2Vob2xkZXIpe1xyXG4gICAgICAgICAgICBpZih2bS5jYXJmLnN0YWtlaG9sZGVycy5sZW5ndGggPT0gMCl7XHJcbiAgICAgICAgICAgICAgICB2bS5jYXJmLnN0YWtlaG9sZGVycy5wdXNoKG5ld1N0YWtlaG9sZGVyKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHZtLmNhcmYuc3Rha2Vob2xkZXJzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihuZXdTdGFrZWhvbGRlciA9PSB2bS5jYXJmLnN0YWtlaG9sZGVyc1tpXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmNhcmYuc3Rha2Vob2xkZXJzLnNwbGljZShpLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdm0uY2FyZi5zdGFrZWhvbGRlcnMucHVzaChuZXdTdGFrZWhvbGRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5sb2NhbFByaW9yaXR5TGlzdCA9IFsnTG93JywgJ01lZGl1bScsJ0hpZ2gnXTtcclxuXHJcbiAgICAgICAgdm0uY2FyZlBNU1ZhbHVlID0gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiSW50ZXJhY3Rpb25cIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiSWRlbnRpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJOb3Jtc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcInBtc1wiOiBcIkFzc29jaWF0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbnZlcnNhdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkdyb3Vwc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlJlbGF0aW9uc2hpcFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRydXN0XCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiTGVhcm5pbmdcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTWV0YS1jb21tdW5pY2F0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiUGxheVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBZXN0aGV0aWNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRW1vdGlvbiBhbmQgQWZmZWN0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiUHJvdGVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJJbmZvcm1lZCBjb25zZXJ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVwdXRhdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlNlY3VyaXR5XCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiRXhwbG9pdGF0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkFjY2Vzc2liaWxpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJPYmplY3RcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQcm9wZXJ0eSAob3duZXJzaGlwKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlVzYWJpbGl0eVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcInBtc1wiOiBcIlRlcG9yYWxpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQXZhaWxhYmlsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQXdhcmVuZXNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUHJlc2VuY2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJUZXJyaXRvcmlhbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQb3J0YWJpbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlByaXZhY3lcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTY2FsYWJpbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlZpc2liaWxpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJDbGFzc2lmaWNhdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBdXRvbm9teVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbGxhYm9yYXRpb25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTaGFyaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQWRhcHRhYmlsaXR5XCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiU3Vic2lzdGVuY2VcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVjaXByb2NpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgfVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDEwLzA3LzIwMTUuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbigpe1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignY29udHJvbGxlckNvbGxhYm9yYXRvcnMnLCBjb250cm9sbGVyQ29sbGFib3JhdG9ycyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlckNvbGxhYm9yYXRvcnMoJHdpbmRvdyxwcm9ibGVtU2VydmljZSx0b2FzdEFwcCl7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmlkUHJvYmxlbSA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi5jb2xsYWJvcmF0b3JzID0gW107XHJcbiAgICAgICAgc2VsZi51c2VyZW1haWwgPSBcIlwiO1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi5pbml0Q29sbGFib3JhdG9ycyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNlbGYuaWRQcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgICAgIHNlbGYudXNlcmVtYWlsID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcmVtYWlsJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGNvbGxhYm9yYXRvcnMoc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29sbGFib3JhdG9ycyA9IGRhdGEuY29sbGFib3JhdG9ycztcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZWFyY2hDYWxsYWJvcmF0aW9uKGVtYWlsKXtcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHNlbGYuY29sbGFib3JhdG9ycy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBpZihlbWFpbCA9PSBzZWxmLmNvbGxhYm9yYXRvcnNbaV0uZW1haWwpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmFkZENvbGxhYm9yYXRvciA9IGZ1bmN0aW9uKGVtYWlsKXtcclxuICAgICAgICAgICAgaWYoc2VsZi51c2VyZW1haWwgPT0gZW1haWwpe1xyXG4gICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKHNlbGYudXNlcmVtYWlsICsgXCIgaXMgZW1haWwgb2Ygb3duZXIuXCIpO1xyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoQ2FsbGFib3JhdGlvbihlbWFpbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJVc3VhcmlvIENhZGFzdHJhZG8uXCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW52aXRlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZHByb2JsZW06IHNlbGYuaWRQcm9ibGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmludml0ZShpbnZpdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb2xsYWJvcmF0b3JzID0gZGF0YS5jb2xsYWJvcmF0b3JzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5yZW1vdmVDb2xsYWJvcmF0b3IgPSBmdW5jdGlvbihwZW9wbGUpe1xyXG4gICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgaWRwcm9ibGVtOiBzZWxmLmlkUHJvYmxlbSxcclxuICAgICAgICAgICAgICAgIGVtYWlsOiBwZW9wbGUuZW1haWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICBwcm9ibGVtU2VydmljZS5yZW1vdmVjb2xsYWJvcmF0b3JzKG9iailcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiQ29sYWJvcmFkb3IgZm9pIHJlbW92aWRvIGRvIHByb2pldG8uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbGxhYm9yYXRvcnMgPSBkYXRhLmNvbGxhYm9yYXRvcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI4LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuXHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignbWVudVByb2JsZW1Db250cm9sbGVyJywgbWVudVByb2JsZW1hQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gbWVudVByb2JsZW1hQ29udHJvbGxlcihBdXRoLCAkdGltZW91dCwgJHN0YXRlLCAkbWRTaWRlbmF2ICwkbWRVdGlsLCRsb2cpe1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgc2VsZi5vcGVuQ2hhdCA9IGJ1aWxkVG9nZ2xlcignY2hhdCcpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJ1aWxkIGhhbmRsZXIgdG8gb3Blbi9jbG9zZSBhIFNpZGVOYXY7IHdoZW4gYW5pbWF0aW9uIGZpbmlzaGVzXHJcbiAgICAgICAgICogcmVwb3J0IGNvbXBsZXRpb24gaW4gY29uc29sZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkVG9nZ2xlcihuYXZJRCkge1xyXG4gICAgICAgICAgICB2YXIgZGVib3VuY2VGbiA9ICAkbWRVdGlsLmRlYm91bmNlKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAkbWRTaWRlbmF2KG5hdklEKVxyXG4gICAgICAgICAgICAgICAgICAgIC50b2dnbGUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcInRvZ2dsZSBcIiArIG5hdklEICsgXCIgaXMgZG9uZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwzMDApO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVib3VuY2VGbjtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgc2VsZi5mb3JtQWRkQ29sbGFib3JhdG9ycyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJHN0YXRlLmdvKCdwcm9ibGVtLmNvbGxhYm9yYXRvcnMnKTtcclxuICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5lZGl0RGVzY3JpcHRpb25Qcm9ibGVtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRzdGF0ZS5nbygncHJvYmxlbS5kZXNjcmlwdGlvbicpO1xyXG4gICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kb0xvZ291dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBBdXRoLmxvZ291dCgpO1xyXG4gICAgICAgICRzdGF0ZS5nbygnaW5pdC5sb2dpbicpO1xyXG4gICAgfTtcclxuICAgIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdlZGl0UHJvYmxlbUNvbnRyb2xsZXInLGVkaXRQcm9ibGVtYUNvbnRyb2xsZXIpO1xyXG5lZGl0UHJvYmxlbWFDb250cm9sbGVyLiRpbmplY3RyZSA9IFsnJHNjb3BlJywnU29ja2V0J107XHJcblxyXG5mdW5jdGlvbiBlZGl0UHJvYmxlbWFDb250cm9sbGVyKCRzY29wZSwgU29ja2V0LCAkdGltZW91dCx0b2FzdEFwcCwkd2luZG93LHByb2JsZW1TZXJ2aWNlKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgdXBkYXRlVHJ1ZSA9IHRydWU7XHJcbiAgICBzZWxmLnByb2JsZW0gPSBcIlwiO1xyXG5cclxuICAgIHNlbGYudGFic2RzYyA9IFtcclxuICAgICAgICAnPG1kLXRhYiBkYXRhLXVpLXNyZWY9XCJwcm9ibGVtLnN0YWtlaG9sZGVyc1wiIG1kLWFjdGl2ZT1cIiRzdGF0ZS5pcyhcXCdwcm9ibGVtLnN0YWtlaG9sZGVyc1xcJylcIiBsYWJlbD1cInt7XFwnTEFCRUxfQVJUSUZBQ1RfU1RBS0VIT0xERVJcXCcgfCB0cmFuc2xhdGUgfX1cIj48L21kLXRhYj4nLFxyXG4gICAgICAgICc8bWQtdGFiIGRhdGEtdWktc3JlZj1cInByb2JsZW0uZXZhbHVhdGlvbmZyYW1ld29ya1wiIG1kLWFjdGl2ZT1cIiRzdGF0ZS5pcyhcXCdwcm9ibGVtLmV2YWx1YXRpb25mcmFtZXdvcmtcXCcpXCIgbGFiZWw9XCJ7e1xcJ0xBQkVMX0FSVElGQUNUX0VWQUxVQVRJT05fRlJBTUVXT1JLXFwnIHwgdHJhbnNsYXRlIH19XCI+PC9tZC10YWI+JyxcclxuICAgICAgICAnPG1kLXRhYiBkYXRhLXVpLXNyZWY9XCJwcm9ibGVtLnNlbWlvdGljZnJhbWV3b3JrXCIgbWQtYWN0aXZlPVwiJHN0YXRlLmlzKFxcJ3Byb2JsZW0uc2VtaW90aWNmcmFtZXdvcmtcXCcpXCIgbGFiZWw9XCJ7e1xcJ0xBQkVMX0FSVElGQUNUX1NFTUlPVElDX0ZSQU1FV09SS1xcJyB8IHRyYW5zbGF0ZSB9fVwiPjwvbWQtdGFiPicsXHJcbiAgICAgICAgJzxtZC10YWIgZGF0YS11aS1zcmVmPVwicHJvYmxlbS5jYXJmXCIgbWQtYWN0aXZlPVwiJHN0YXRlLmlzKFxcJ3Byb2JsZW0uY2FyZlxcJylcIiBsYWJlbD1cIkNBUkZcIj48L21kLXRhYj48L21kLXRhYnM+J1xyXG4gICAgXTtcclxuXHJcbiAgICBzZWxmLmdldEN1cnJlbnRQcm9ibGVtID0gZnVuY3Rpb24oKXtcclxuICAgICAgICBzZWxmLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHByb2JsZW0oc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJvYmxlbSA9IGRhdGEucHJvYmxlbTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2V0VXBkYXRlID0gZnVuY3Rpb24oKXtcclxuICAgICAgICB1cGRhdGVUcnVlID0gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkF0dWFsaXphclByb2JsZW1hJywgZnVuY3Rpb24gKHJldG9ybm8pIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1yZXRvcm5vLi4uLlwiICsgcmV0b3Jubyk7XHJcbiAgICAgICAgc2VsZi5wcm9ibGVtLmRlc2NyaXB0aW9uID0gcmV0b3Juby5kZXNjcmlwdGlvbjtcclxuICAgICAgICBzZWxmLnByb2JsZW0udXBkYXRlID0gdXBkYXRlVHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5wcm9ibGVtVXBkYXRlID0gZnVuY3Rpb24gKHByb2JsZW0pIHtcclxuICAgICAgICBwcm9ibGVtLnVwZGF0ZSA9IHVwZGF0ZVRydWU7XHJcblxyXG4gICAgICAgIFNvY2tldC5lbWl0KCdhdHVhbGl6YXJQcm9ibGVtYScsIHByb2JsZW0pO1xyXG4gICAgICAgIGlmICh1cGRhdGVUcnVlKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRydWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHRpbWVvdXQoc2V0VXBkYXRlLCAyMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zYXZlRGVzY3JpcHRpb24gPSBmdW5jdGlvbiAocHJvYmxlbSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIik7XHJcbiAgICAgICAgcHJvYmxlbS51cGRhdGUgPSB1cGRhdGVUcnVlO1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdhdHVhbGl6YXJQcm9ibGVtYScsIHByb2JsZW0pO1xyXG4gICAgfTtcclxuXHJcbn1cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZhY3RvcnkoJ3Byb2JsZW1TZXJ2aWNlJywgcHJvYmxlbVNlcnZpY2UpO1xyXG5cclxuICBwcm9ibGVtU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsJyRsb2NhdGlvbiddO1xyXG5cclxuICBmdW5jdGlvbiBwcm9ibGVtU2VydmljZSgkaHR0cCwkbG9jYXRpb24pIHtcclxuXHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNUyA9ICcvYXBpL3Byb2JsZW0vZ2V0cHJvYmxlbXMnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRVU0VSUFJPQkxFTVNDT0xMQUJPUkFUT1IgPSAnL2FwaS9wcm9ibGVtL2dldHByb2JsZW1zY29sbGFib3JhdG9yJztcclxuICAgIHZhciBBUElfUk9VVEVfTkVXUFJPQkxFTSA9ICcvYXBpL3Byb2JsZW0vbmV3cHJvYmxlbSc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVFBST0JMRU0gPSAnL2FwaS9wcm9ibGVtL2dldHByb2JsZW0nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRDT0xMQUJPUkFUT1JTID0gJy9hcGkvcHJvYmxlbS9nZXRjb2xsYWJvcmF0b3JzJztcclxuICAgIHZhciBBUElfUk9VVEVfSU5WSVRFID0gJy9hcGkvcHJvYmxlbS9pbnZpdGUnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRPTklPTiA9ICcvYXBpL3Byb2JsZW0vZ2V0b25pb24nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRFVkFMVUFUSU9OID0gJy9hcGkvcHJvYmxlbS9nZXRldmFsdWF0aW9uJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUU0VNSU9USUNGUkFNRVdPUksgPSAnL2FwaS9wcm9ibGVtL2dldHNlbWlvdGljJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUQ0FSRiA9ICcvYXBpL3Byb2JsZW0vZ2V0Y2FyZic7XHJcbiAgICB2YXIgQVBJX1JPVVRFX1JFTU9WRVBST0JMRU0gPSAnL2FwaS9wcm9ibGVtL3JlbW92ZXByb2JsZW0nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9SRU1PVkVDT0xMQUJPUkFUT1IgPSAnL2FwaS9wcm9ibGVtL3JlbW92ZWNvbGxhYm9yYXRvcic7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVEhJU1RPUllDSEFUID0gJy9hcGkvcHJvYmxlbS9oaXN0b3J5Y2hhdCc7XHJcblxyXG4gICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgIG5ld3Byb2JsZW0gICAgICAgOiBuZXdwcm9ibGVtLFxyXG4gICAgICBnZXR1c2VycHJvYmxlbXMgIDogZ2V0dXNlcnByb2JsZW1zLFxyXG4gICAgICBnZXRwcm9ibGVtICAgICAgIDogZ2V0cHJvYmxlbSxcclxuICAgICAgZ2V0Y29sbGFib3JhdG9ycyA6IGdldGNvbGxhYm9yYXRvcnMsXHJcbiAgICAgIGludml0ZSAgICAgICAgICAgOiBpbnZpdGUsXHJcbiAgICAgIGdldG9uaW9uICAgICAgICAgOiBnZXRvbmlvbixcclxuICAgICAgZ2V0ZXZhbHVhdGlvbiAgICA6IGdldGV2YWx1YXRpb24sXHJcbiAgICAgIGdldHNlbWlvdGljICAgICAgOiBnZXRzZW1pb3RpYyxcclxuICAgICAgZ2V0Y2FyZiAgICAgICAgICA6IGdldGNhcmYsXHJcbiAgICAgIHJlbW92ZXByb2JsZW0gICAgOiByZW1vdmVwcm9ibGVtLFxyXG4gICAgICBnZXRwcm9ibGVtc2NvbGxhYm9yYXRvcjogZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3IsXHJcbiAgICAgIHJlbW92ZWNvbGxhYm9yYXRvcnMgOiByZW1vdmVjb2xsYWJvcmF0b3JzLFxyXG4gICAgICBnZXRoaXN0b3J5Y2hhdDogZ2V0aGlzdG9yeWNoYXRcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgZnVuY3Rpb24gbmV3cHJvYmxlbShkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX05FV1BST0JMRU0sIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldHByb2JsZW0oZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFBST0JMRU0gKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBnZXR1c2VycHJvYmxlbXMoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNUyArICc/ZW1haWw9JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRjb2xsYWJvcmF0b3JzKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRDT0xMQUJPUkFUT1JTICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbnZpdGUoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KEFQSV9ST1VURV9JTlZJVEUsIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRvbmlvbihkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfR0VUT05JT04gKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldGV2YWx1YXRpb24gKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRFVkFMVUFUSU9OICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRzZW1pb3RpYyAoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFNFTUlPVElDRlJBTUVXT1JLICsgJz9pZHByb2JsZW09JyArIGRhdGEgKVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldGNhcmYoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVENBUkYgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlcHJvYmxlbShkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfUkVNT1ZFUFJPQkxFTSArICc/aWRwcm9ibGVtPScgKyBkYXRhICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3IoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNU0NPTExBQk9SQVRPUiArICc/ZW1haWw9JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVjb2xsYWJvcmF0b3JzKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9SRU1PVkVDT0xMQUJPUkFUT1IgKyAnP2lkcHJvYmxlbT0nICsgZGF0YS5pZHByb2JsZW0gKyAnJmVtYWlsPScgKyBkYXRhLmVtYWlsICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0aGlzdG9yeWNoYXQoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVEhJU1RPUllDSEFUICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG59KSgpO1xyXG4iLCJcclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3N0YXJ0UHJvYmxlbUNvbnRyb2xsZXInLHN0YXJ0UHJvYmxlbUNvbnRyb2xsZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0UHJvYmxlbUNvbnRyb2xsZXIoJG1kRGlhbG9nLCRzdGF0ZSxBdXRoLFNvY2tldCwgJHdpbmRvdywgcHJvYmxlbVNlcnZpY2UsdG9hc3RBcHAgKSB7XHJcbiAgICAgICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZtLm5pY2tuYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdm0udXNlcmlkID0gXCJcIjtcclxuICAgICAgICAgICAgdm0udXNlcmVtYWlsID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ucHJvYmxlbUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgdm0ucHJvYmxlbUNvbGxhYm9yYXRvckxpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHZtLmdldFByb2JsZW1zID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZtLnVzZXJpZCA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJpZCcpO1xyXG4gICAgICAgICAgICAgICAgdm0ubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgICAgICAgICAgICAgdm0udXNlcmVtYWlsID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcmVtYWlsJyk7XHJcbiAgICAgICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXR1c2VycHJvYmxlbXModm0udXNlcmVtYWlsKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBkYXRhLnByb2JsZW1zLmxlbmd0aDsgaSsrICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uID0gZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbi5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZyxcIlwiKS5zdWJzdHJpbmcoMCw0NjApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5wcm9ibGVtTGlzdCA9IGRhdGEucHJvYmxlbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRwcm9ibGVtc2NvbGxhYm9yYXRvcih2bS51c2VyZW1haWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgZGF0YS5wcm9ibGVtcy5sZW5ndGg7IGkrKyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvYmxlbXNbaV0uZGVzY3JpcHRpb24gPSBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uLnJlcGxhY2UoLyg8KFtePl0rKT4pL2lnLFwiXCIpLnN1YnN0cmluZygwLDQ2MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0ucHJvYmxlbUNvbGxhYm9yYXRvckxpc3QgPSBkYXRhLnByb2JsZW1zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZVByb2JsZW0ocHJvYmxlbWlkKXtcclxuICAgICAgICAgICAgICAgICAgICBwcm9ibGVtU2VydmljZS5yZW1vdmVwcm9ibGVtKHByb2JsZW1pZClcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCB2bS5wcm9ibGVtTGlzdC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodm0ucHJvYmxlbUxpc3RbaV0uX2lkID09IHByb2JsZW1pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLnByb2JsZW1MaXN0LnNwbGljZShpLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgdm0ucmV2b212ZVByb2JsZW0gPSBmdW5jdGlvbihldixwcm9ibGVtKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBcHBlbmRpbmcgZGlhbG9nIHRvIGRvY3VtZW50LmJvZHkgdG8gY292ZXIgc2lkZW5hdiBpbiBkb2NzIGFwcFxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnBhcmVudChhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCdEZXRldGUgUHJvYmxlbT8nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jb250ZW50KCdUaXRsZTogJyArIHByb2JsZW0udGl0bGUpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFyaWFMYWJlbCgnUmVtb3ZlIFByb2JsZW0nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vaygnRGVzZWpvIHJlbW92ZXIhJylcclxuICAgICAgICAgICAgICAgICAgICAuY2FuY2VsKCdDYW5jZWwnKVxyXG4gICAgICAgICAgICAgICAgICAgIC50YXJnZXRFdmVudChldik7XHJcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVByb2JsZW0ocHJvYmxlbS5faWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2bS5zdGFydE5ld1Byb2JsZW0gPSBmdW5jdGlvbihuZXdwcm9ibGVtKXtcclxuICAgICAgICAgICAgICAgIG5ld3Byb2JsZW0udXNlcmlkID0gdm0udXNlcmlkO1xyXG4gICAgICAgICAgICAgICAgcHJvYmxlbVNlcnZpY2UubmV3cHJvYmxlbShuZXdwcm9ibGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5lZGl0UHJvYmxlbShkYXRhLnByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdm0uZWRpdFByb2JsZW0gPSBmdW5jdGlvbiAocHJvYmxlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9ibGVtaWRcIixwcm9ibGVtLl9pZCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5pdHNvY2tldHByb2JsZW0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJpZHByb2JsZW1cIjpwcm9ibGVtLl9pZCxcclxuICAgICAgICAgICAgICAgICAgICBcIm5pY2tuYW1lXCI6IHZtLm5pY2tuYW1lXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2luaXRQcm9ibGVtJywgaW5pdHNvY2tldHByb2JsZW0pO1xyXG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9ibGVtLnN0YWtlaG9sZGVycycpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZtLmRvTG9nb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgQXV0aC5sb2dvdXQoKTtcclxuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnaW5pdC5sb2dpbicpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZtLm5ld1Byb2JsZW0gPSBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IERpYWxvZ0NvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9uZXdwcm9ibGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldixcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIERpYWxvZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbWREaWFsb2cpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5oaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZE5ld1Byb2JsZW0gPSBmdW5jdGlvbihwcm9ibGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uc3RhcnROZXdQcm9ibGVtKHByb2JsZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3NpZ251cENvbnRyb2xsZXInLCBzaWdudXBDb250cm9sbGVyKTtcclxuICAgIHNpZ251cENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHRyYW5zbGF0ZScsJyR3aW5kb3cnLCdzaWdudXBTZXJ2aWNlJywnJHN0YXRlJywndG9hc3RBcHAnLCdBdXRoVG9rZW4nLCdBdXRoJywnJGZpbHRlcicsJyRzdGF0ZVBhcmFtcyddO1xyXG5cclxuICBmdW5jdGlvbiBzaWdudXBDb250cm9sbGVyKCR0cmFuc2xhdGUsICR3aW5kb3csIHNpZ251cFNlcnZpY2UsJHN0YXRlLHRvYXN0QXBwLEF1dGhUb2tlbixBdXRoLCRmaWx0ZXIsJHN0YXRlUGFyYW1zKXtcclxuICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgdm0ubWVzc2FnZSAgPSAnJztcclxuICAgIHZtLnNhdmUgICA9IHNhdmVVc2VyO1xyXG4gICAgdm0ucmVzY3VlUGFzc3dvcmQgPSByZXNjdWVQYXNzd29yZDtcclxuICAgIHZtLmNoYW5nZVBhc3N3b3JkID0gY2hhbmdlUGFzc3dvcmQ7XHJcbiAgICB2bS5zZXRMYW5nID0gc2V0TGFuZztcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlVXNlcih1c2VyKSB7XHJcbiAgICAgIHNpZ251cFNlcnZpY2UuY3JlYXRlKHVzZXIpXHJcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgIEF1dGhUb2tlbi5zZXRUb2tlbihkYXRhLnRva2VuKTtcclxuICAgICAgICAgICAgICBBdXRoLmdldFVzZXIoKVxyXG4gICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udXNlciA9IGRhdGEuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyZW1haWxcIix1c2VyLmVtYWlsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyaWRcIix1c2VyLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJuaWNrbmFtZVwiLHVzZXIubmlja25hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdm0uc2V0TGFuZyh1c2VyLmxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoJGZpbHRlcigndHJhbnNsYXRlJykoJ1dFTENPTUVfU1lTVEVNJykgKyBcIjogXCIgKyB2bS51c2VyLm5pY2tuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3N0YXJ0cHJvYmxlbScpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIkVtYWlsIErDoSBjYWRhc3RyYWRvXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gc2V0TGFuZyhsYW5nS2V5KSB7XHJcbiAgICAgICAgICAkdHJhbnNsYXRlLnVzZShsYW5nS2V5KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJlc2N1ZVBhc3N3b3JkKHVzZXJFbWFpbCl7XHJcbiAgICAgICAgICBzaWdudXBTZXJ2aWNlLnJlc2N1ZVBhc3N3b3JkKHVzZXJFbWFpbClcclxuICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIkVtYWlsIGNvbSBpbnN0cnXDp8O1ZXMgZW52aWFkb1wiKTtcclxuICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNoYW5nZVBhc3N3b3JkKHVzZXIpe1xyXG4gICAgICAgICAgc2lnbnVwU2VydmljZS5jaGFuZ2VQYXNzd29yZCh1c2VyKVxyXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJTZW5oYSBhbHRlcmFkYSBjb20gc3VjZXNzby4gRmHDp2EgbG9naW4gY29tIGEgbm92YSBzZW5oYS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2luaXQnKTtcclxuICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJFcnJvclwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG5cclxuICB9XHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5mYWN0b3J5KCdzaWdudXBTZXJ2aWNlJywgc2lnbnVwU2VydmljZSk7XHJcblxyXG4gIHNpZ251cFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCckbG9jYXRpb24nXTtcclxuXHJcbiAgZnVuY3Rpb24gc2lnbnVwU2VydmljZSgkaHR0cCwkbG9jYXRpb24pIHtcclxuXHJcbiAgICB2YXIgQVBJX1JPVVRFX1VTRVIgPSAnL2FwaS9zaWdudXAvJztcclxuICAgIHZhciBBUElfUk9VVEVfUkVTQ1VFUEFTU1dPUkQgPSAnL2FwaS9yZXNjdWVwYXNzd2QvJztcclxuICAgIHZhciBBUElfUk9VVEVfU0VUTkVXUEFTU1dPUkQgPSAnL2FwaS9yZXNjdWVwYXNzd2QvbmV3cGFzc3dkLyc7XHJcblxyXG5cclxuICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICBjcmVhdGUgICAgICAgICA6IGNyZWF0ZSxcclxuICAgICAgcmVzY3VlUGFzc3dvcmQgOiByZXNjdWVQYXNzd29yZCxcclxuICAgICAgY2hhbmdlUGFzc3dvcmQgOiBjaGFuZ2VQYXNzd29yZFxyXG4gICAgfTtcclxuICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZShkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX1VTRVIsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2N1ZVBhc3N3b3JkKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdChBUElfUk9VVEVfUkVTQ1VFUEFTU1dPUkQsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoYW5nZVBhc3N3b3JkKGRhdGEpe1xyXG4gICAgICB2YXIgbXl0b2tlblVSTCA9ICRsb2NhdGlvbi5zZWFyY2goKTtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfU0VUTkVXUEFTU1dPUkQgKyAnP215dG9rZW49JyArIG15dG9rZW5VUkwubXl0b2tlbisnJnBhc3N3b3JkPScrZGF0YS5wYXNzd29yZCk7XHJcbiAgICB9XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI1LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29uZmlnKGFwcENvbmZpZyk7XHJcblxyXG4gICAgYXBwQ29uZmlnLiRpbmplY3QgPSBbJyRtZFRoZW1pbmdQcm92aWRlcicsJyRsb2NhdGlvblByb3ZpZGVyJ107XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwQ29uZmlnICgkbWRUaGVtaW5nUHJvdmlkZXIsJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuXHJcbiAgICAgICAgIC8vJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG4gICAgICAgIHZhciBjdXN0b21HcmVlbk1hcCA9ICRtZFRoZW1pbmdQcm92aWRlci5leHRlbmRQYWxldHRlKCd0ZWFsJywge1xyXG4gICAgICAgICAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxyXG4gICAgICAgICAgICAnY29udHJhc3REYXJrQ29sb3JzJzogWyc1MCddLFxyXG4gICAgICAgICAgICAnNTAnOiAnRTBGMkYxJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgnY3VzdG9tR3JlZW4nLCBjdXN0b21HcmVlbk1hcCk7XHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcclxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdjdXN0b21HcmVlbicsIHtcclxuICAgICAgICAgICAgICAgICdkZWZhdWx0JzogJzUwMCcsXHJcbiAgICAgICAgICAgICAgICAnaHVlLTEnOiAnNTAnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hY2NlbnRQYWxldHRlKCd0ZWFsJyk7XHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdpbnB1dCcsICdkZWZhdWx0JylcclxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdncmVlbicpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpOyIsIlxyXG4oZnVuY3Rpb24oKXtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuYW5ndWxhci5tb2R1bGUoJ2F1dGhTZXJ2aWNlJywgW10pXHJcblx0LmZhY3RvcnkoJ0F1dGgnLCBmdW5jdGlvbigkaHR0cCwgJHEsIEF1dGhUb2tlbikge1xyXG5cdHZhciBhdXRoRmFjdG9yeSA9IHt9O1xyXG5cdGF1dGhGYWN0b3J5LmxvZ2luID0gZnVuY3Rpb24oZW1haWwsIHBhc3N3b3JkKSB7XHJcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9sb2dpbicsIHtcclxuXHRcdFx0ZW1haWw6IGVtYWlsLFxyXG5cdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcclxuXHRcdH0pXHJcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcblx0XHRcdEF1dGhUb2tlbi5zZXRUb2tlbihkYXRhLnRva2VuKTtcclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHRhdXRoRmFjdG9yeS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdEF1dGhUb2tlbi5zZXRUb2tlbigpO1xyXG5cdH07XHJcblxyXG5cdGF1dGhGYWN0b3J5LmlzTG9nZ2VkSW4gPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmKEF1dGhUb2tlbi5nZXRUb2tlbigpKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fWVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0YXV0aEZhY3RvcnkuZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYoQXV0aFRva2VuLmdldFRva2VuKCkpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9tZScpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHJldHVybiAkcS5yZWplY3Qoe21lc3NhZ2U6IFwiVXNlciBoYXMgbm8gdG9rZW5cIn0pO1xyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cdHJldHVybiBhdXRoRmFjdG9yeTtcclxufSlcclxuXHJcblxyXG4uZmFjdG9yeSgnQXV0aFRva2VuJywgZnVuY3Rpb24oJHdpbmRvdykge1xyXG5cclxuXHR2YXIgYXV0aFRva2VuRmFjdG9yeSA9IHt9O1xyXG5cclxuXHRhdXRoVG9rZW5GYWN0b3J5LmdldFRva2VuID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcclxuXHR9O1xyXG5cclxuXHRhdXRoVG9rZW5GYWN0b3J5LnNldFRva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcclxuXHJcblx0XHRpZiAodG9rZW4pIHtcclxuXHRcdFx0JHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW4nLCB0b2tlbik7XHJcblx0XHR9XHJcblx0XHRlbHNle1xyXG5cdFx0XHQkd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xyXG5cdH1cclxuXHJcblx0fTtcclxuXHRyZXR1cm4gYXV0aFRva2VuRmFjdG9yeTtcclxufSlcclxuXHJcblxyXG4uZmFjdG9yeSgnQXV0aEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsICRsb2NhdGlvbiwgQXV0aFRva2VuKSB7XHJcblx0dmFyIGludGVyY2VwdG9yRmFjdG9yeSA9IHt9O1xyXG5cdGludGVyY2VwdG9yRmFjdG9yeS5yZXF1ZXN0ID0gZnVuY3Rpb24oY29uZmlnKSB7XHJcblx0XHR2YXIgdG9rZW4gPSBBdXRoVG9rZW4uZ2V0VG9rZW4oKTtcclxuXHRcdGlmKHRva2VuKSB7XHJcblx0XHRcdGNvbmZpZy5oZWFkZXJzWyd4LWFjY2Vzcy10b2tlbiddID0gdG9rZW47XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY29uZmlnO1xyXG5cdH07XHJcblx0cmV0dXJuIGludGVyY2VwdG9yRmFjdG9yeTtcclxufSk7XHJcbn0pKCk7IiwiXHJcbmFuZ3VsYXIubW9kdWxlKCdEcm9wRFNDJyxbXSlcclxuICAgIC5kaXJlY3RpdmUoJ2RyYWdnYWJsZScsIGZ1bmN0aW9uKCRkb2N1bWVudCxTb2NrZXQpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbignbW91c2Vkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBpZihldmVudC50YXJnZXQuaWQuc3Vic3RyaW5nKDAsMTEpID09IFwic3Rha2Vob2xkZXJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGRyYWdnaW5nIG9mIHNlbGVjdGVkIGNvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5iaW5kKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5iaW5kKCdtb3VzZXVwJywgbW91c2V1cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbW91c2Vtb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgaWRfZGl2ID0gZXZlbnQudGFyZ2V0LmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGlkX2RpdiA9PSAnc3ZnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlkX2RpdiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3Rha2Vob2xkZXIub25pb25sYXllciA9IGlkX2RpdjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICB5ID0gZXZlbnQucGFnZVk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB4ID0gZXZlbnQucGFnZVg7XHJcbiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB5ICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAgeCArICdweCdcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgLypTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25Qb3NpdGlvbicsIGZ1bmN0aW9uIChzdGFrZWhvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBzdGFrZWhvbGRlci55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAgc3Rha2Vob2xkZXIueFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnN0YWtlaG9sZGVyLnggPSB4ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnN0YWtlaG9sZGVyLnkgPSB5ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgIC8vU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE9uaW9uUG9zaXRpb24nLCBzY29wZS5zdGFrZWhvbGRlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbW91c2V1cCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC51bmJpbmQoJ21vdXNlbW92ZScsIG1vdXNlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQudW5iaW5kKCdtb3VzZXVwJywgbW91c2V1cCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgfSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyNS8wNi8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgICAgIC5jb250cm9sbGVyKCdsb2dpbkNvbnRyb2xsZXInLGxvZ2luQ29udHJvbGxlcik7XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsb2dpbkNvbnRyb2xsZXIoJHRyYW5zbGF0ZSwgJHJvb3RTY29wZSwgJHN0YXRlLCBBdXRoLCAkd2luZG93LCAkZmlsdGVyLCB0b2FzdEFwcCkge1xyXG4gICAgICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdm0uc2V0TGFuZyA9IGZ1bmN0aW9uKGxhbmdLZXkpIHtcclxuICAgICAgICAgICAgICAgICAkdHJhbnNsYXRlLnVzZShsYW5nS2V5KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZtLmxvZ2dlZEluID0gQXV0aC5pc0xvZ2dlZEluKCk7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubG9nZ2VkSW4gPSBBdXRoLmlzTG9nZ2VkSW4oKTtcclxuICAgICAgICAgICAgICAgIEF1dGguZ2V0VXNlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS51c2VyID0gZGF0YS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZtLmRvTG9naW4gPSBmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5wcm9jZXNzaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZtLmVycm9yID0gJyc7XHJcbiAgICAgICAgICAgICAgICBBdXRoLmxvZ2luKHVzZXIuZW1haWwsIHVzZXIucGFzc3dvcmQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidXNlcmVtYWlsXCIsZGF0YS5lbWFpbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyaWRcIixkYXRhLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm5pY2tuYW1lXCIsZGF0YS5uaWNrbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnNldExhbmcoZGF0YS5sYW5ndWFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXV0aC5nZXRVc2VyKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS51c2VyID0gZGF0YS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZSgkZmlsdGVyKCd0cmFuc2xhdGUnKSgnV0VMQ09NRV9TWVNURU0nKSArIFwiOiBcIiArIHZtLnVzZXIubmlja25hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzdGFydHByb2JsZW0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5lcnJvciA9IGRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdm0uZG9Mb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBBdXRoLmxvZ291dCgpO1xyXG4gICAgICAgICAgICAgICAgJHN0YXRlKCdpbml0Jyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjEvMDYvMjAxNS5cclxuICovXHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJykuXHJcbiAgICBzZXJ2aWNlKCdTb2NrZXQnLFxyXG4gICAgWyckbG9jYXRpb24nLCAnJHRpbWVvdXQnLFxyXG4gICAgZnVuY3Rpb24oJGxvY2F0aW9uLCAkdGltZW91dCkge1xyXG4gICAgICAgIGlmICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gaW8oKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9uID0gZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zb2NrZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmVtaXQgPSBmdW5jdGlvbihldmVudE5hbWUsIGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5lbWl0KGV2ZW50TmFtZSwgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNvY2tldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbl0pO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=