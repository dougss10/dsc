!function(){"use strict";angular.module("app",["ngImgCrop","toastService","textAngular","luegg.directives","appRxDrag","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),function(){"use strict";function e(e){function t(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:500})}var o={message:"",errorMessage:t};return o}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,t){var o=this;o.message=t.message,o.closeToast=function(){e.hide()}}]).factory("toastApp",e),e.$inject=["$mdToast"]}(),function(){"use strict";function e(e,t){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("profile",{url:"/profile",templateUrl:"views/pages/profile.html",controller:"profileController as vm"}).state("dscreport",{url:"/dscreport",templateUrl:"views/pages/problemreport.html",controller:"problemReportController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.description",{url:"/description",views:{"problem-description":{templateUrl:"views/pages/problemdescription.html",controller:"editProblemController as vm"}}}).state("problem.collaborators",{url:"/collaborators",views:{"problem-description":{templateUrl:"views/pages/collaborators.html",controller:"controllerCollaborators as vm"}}}).state("problem.stakeholders",{url:"/stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"/evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"/semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"/carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}).state("problem.vif",{url:"/vif",views:{"dsc-artifact":{templateUrl:"views/pages/vif.html",controller:"valueIdentificationFrameController as vm"}}}).state("problem.onion",{url:"/onion",views:{"dsc-artifact":{templateUrl:"views/pages/onion.html",controller:"onionController as vm"}}}),t.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function t(e){function t(t){e.use(t)}var o=this;o.setLang=t}function o(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",t).directive("changeLanguage",o),e.$inject=["$translateProvider"],t.$inject=["$translate"]}(),function(){"use strict";function e(e,t,o,r){function n(){p.idProblem=e.localStorage.getItem("problemid"),o.getcarf(p.idProblem).success(function(e){e.success&&(p.localStakeholders=e.stakeholders,p.stakeholderList=p.localStakeholders,p.carfList=e.carf,p.carfPriorityList=p.localPriorityList)}),p.inProcessing=!1}function a(){p.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},p.valueList=[]}function i(e){""===e.pms?r.errorMessage("Select PMS"):e.values.length<1?r.errorMessage("Select one or more Value"):e.stakeholders.length<1?r.errorMessage("Select one or more Stakeholder(s)"):""===e.priority?r.errorMessage("Select priority [Low, Medium or High]"):(t.emit("broadcastCARFadd",e),p.stakeholderList=[],p.carfPriorityList=[])}function s(e,o){var r={index:e,carf:o};t.emit("broadcastCARFremove",r)}function l(e){void 0!==e&&angular.forEach(p.carfPMSValue,function(t){return t.pms==e?(p.carf.values=[],void(p.valueList=t.values)):void 0})}function c(e){p.carf.priority=e}function u(e){if(0===p.carf.values.length)p.carf.values.push(e);else{for(var t=0;t<p.carf.values.length;t++)if(e==p.carf.values[t])return void p.carf.values.splice(t,1);p.carf.values.push(e)}}function m(e){if(0===p.carf.stakeholders.length)p.carf.stakeholders.push(e);else{for(var t=0;t<p.carf.stakeholders.length;t++)if(e==p.carf.stakeholders[t])return void p.carf.stakeholders.splice(t,1);p.carf.stakeholders.push(e)}}var p=this;p.idProblem="",p.inProcessing=!0,p.valueList=[],p.stakeholderList=[],p.localStakeholders=[],p.addpmsvalue=i,p.removeCARF=s,p.selectPMSValue=l,p.setPriotity=c,p.addListValue=u,p.addStakeholder=m,p.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},p.initCarf=n,p.carfList=[],p.carfPriorityList=[],t.on("onBroadcastCARFadd",function(e){p.carfList.push(e),a(),p.stakeholderList=p.localStakeholders,p.carfPriorityList=p.localPriorityList}),t.on("onBroadcastCARFremove",function(e){p.carfList.splice(e,1)}),p.localPriorityList=["Low","Medium","High"],p.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,r){function n(){u.isOpenChat=!u.isOpenChat,document.getElementById("message").focus()}function a(){u.idProblem=r.localStorage.getItem("problemid"),u.nickname=r.localStorage.getItem("nickname"),u.photo=r.localStorage.getItem("photo"),o.gethistorychat(u.idProblem).success(function(e){if(e.success)for(var t=0;t<e.historychat.length;t++){var o=new Date(e.historychat[t].time),r={nickname:e.historychat[t].nickname,msg:e.historychat[t].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "};u.messages.push(r)}}),t.emit("checkUsers")}function i(){u.replay?u.replay=!1:u.replay=!0}function s(e){void 0===e||e.length<2||(t.emit("broadcastChat",e),u.newmsg="",u.contador=0)}function l(){u.contador=0}function c(t,o){13==t.keyCode&&(u.contador++,1==u.contador&&e(l,2e3),u.contador>1&&s(o))}var u=this;u.newmsg="",u.messages=[],u.replay=!1,u.nickname="",u.userList=[],u.initHistoryChat=a,u.showReplay=i,u.sendMessage=s,u.photo="",u.openChat=n,u.isOpenChat=!1,u.keypressChat=c,u.contador=0,t.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);u.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})}),t.on("onCheckUsers",function(e){u.userList=e})}angular.module("app").controller("chatDSC",e),e.$inject=["$timeout","Socket","problemService","$window"]}(),function(){"use strict";function e(e,t,o,r){function n(){l.idProblem=e.localStorage.getItem("problemid"),l.useremail=e.localStorage.getItem("useremail"),o.getcollaborators(l.idProblem).success(function(e){e.success?l.collaborators=e.collaborators:r.errorMessage(e.message)})}function a(e){for(var t=0;t<l.collaborators.length;t++)if(e==l.collaborators[t].email)return!0;return!1}function i(e){if(l.useremail==e)r.errorMessage(l.useremail+" is email of owner.");else if(a(e))r.errorMessage("Usuario Cadastrado.");else{var t={idproblem:l.idProblem,email:e};o.invite(t).success(function(e){e.success?l.collaborators=e.collaborators:r.errorMessage(e.message)})}}function s(e){var t={idproblem:l.idProblem,email:e.email};o.removecollaborators(t).success(function(e){e.success?(r.errorMessage("Colaborador foi removido do projeto."),l.collaborators=e.collaborators):r.errorMessage(e.message)})}var l=this;l.idProblem="",l.collaborators=[],l.useremail="",l.initCollaborators=n,l.addCollaborator=i,l.removeCollaborator=s}angular.module("app").controller("controllerCollaborators",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(){function e(e){var t=document.getElementById("projectResport"),o=new jsPDF("l","px");o.addHTML(t,0,0,{pagesplit:!0},function(e){o.save("test.pdf")})}var t=this;t.idproblem="ajflajfljalfjaljf",t.buidReport=e}angular.module("app").controller("dscReportController",e)}(),function(){"use strict";function e(e,t,o,r){function n(){s.idproblem=e.localStorage.getItem("problemid"),t.getevaluation(s.idproblem).success(function(e){e.success?s.evaluationframeworkList=e.evaluationframework:r.errorMessage(e.message)})}function a(e){o.emit("broadcastFrameSave",e)}function i(e){e.openEdit=!0}var s=this;s.evaluationframeworkList=[],s.initEvaluation=n,s.setOpenEditDiscution=i,s.saveFrame=a,o.on("onBroadcastFrameEdit",function(e){angular.forEach(s.evaluationframeworkList,function(t){t.onionlayer==e.onionlayer&&angular.forEach(t.stakeholders,function(t){t._id==e._id&&(t.name=e.name,t.onionlayer=e.onionlayer,t.description=e.description,t.openEdit=e.openEdit,t.problems=e.problems,t.solutions=e.solutions)})})}),o.on("onUpdateStakeholder",function(e){})}angular.module("app").controller("evaluationframeworkController",e),e.$inject=["$window","problemService","Socket","toastApp"]}(),function(){"use strict";function e(e,t,o,r,n,a,i){function s(){d.nickname=r.localStorage.getItem("nickname"),d.idProblem=r.localStorage.getItem("problemid"),n.getproblem(d.idProblem).success(function(e){e.success?(d.problem=e.problem,angular.forEach(e.problem.artifacts,function(e){var o=e.split("_");d.dsc_artifacts.push({name:"problem."+o[2].toLowerCase(),label:t("translate")(e)})})):a.errorMessage(e.message)});var e={idproblem:d.idProblem,nickname:d.nickname};i.emit("initProblem",e)}function l(){o.go("startproblem")}function c(){o.go("problem.collaborators")}function u(){o.go("dscreport")}function m(){o.go("problem.description")}function p(){e.logout(),o.go("init.login")}var d=this;d.formAddCollaborators=c,d.editDescriptionProblem=m,d.doLogout=p,d.systemReturn=l,d.formProblemReport=u,d.getCurrentProblem=s,d.nickname,d.dsc_artifacts=[]}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$filter","$state","$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,t,o,r,n){var a=this;a.idproblem="",a.intiMytOnion=intiMytOnion,a.savePostItOnion=savePostItOnion,a.editPostItOnion=editPostItOnion,a.delPostItOnion=delPostItOnion,a.addPostItOnion=addPostItOnion,a.onOnion=onOnion,a.offOnion=offOnion}angular.module("app").controller("onionController",e),e.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(),function(){"use strict";function e(e,t,o,r,n){function a(){c.nickname=r.localStorage.getItem("nickname"),c.idProblem=r.localStorage.getItem("problemid"),c.localcode=r.localStorage.getItem("localcode"),n.getproblem(c.idProblem).success(function(e){e.success?c.problem=e.problem:o.errorMessage(e.message)});var t={idproblem:c.idProblem,nickname:c.nickname};e.emit("initProblem",t)}function i(){u=!0}function s(o){o.update=u,o.localcode=c.localcode,e.emit("atualizarProblema",o),u&&(u=!1,t(i,2e3))}function l(t){t.localcode=c.localcode,t.update=u,e.emit("atualizarProblema",t)}var c=this,u=!0;c.problem="",c.problemUpdate=s,c.getCurrentProblem=a,c.saveDescription=l,c.nickname="",c.localcode="",e.on("onAtualizarProblema",function(e){c.localcode!==e.localcode&&(c.problem.description=e.description),c.problem.update=u})}angular.module("app").controller("editProblemController",e),e.$injectre=["$scope","Socket"],e.$inject=["Socket","$timeout","toastApp","$window","problemService"]}(),function(){"use strict";function e(e,t,o,r){function n(){i.idProblem=e.localStorage.getItem("problemid"),t.getproblemreport(i.idProblem).success(function(e){e.success?(angular.forEach(e.problem.stakeholders,function(e){e.x=parseInt(e.x.substring(0,e.x.length-2))-100+"px",e.y=parseInt(e.y.substring(0,e.y.length-2))+400+"px"}),i.problem=e.problem):o.errorMessage(e.message)})}function a(){r.go("problem.stakeholders")}var i=this;i.idProblem,i.problem,i.initProblemPeport=n,i.systemReturn=a}angular.module("app").controller("problemReportController",e),e.$inject=["$window","problemService","toastApp","$state"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(v,t)}function r(t){return e.get(w+"?idproblem="+t)}function n(t){return e.get(k+"?idproblem="+t)}function a(t){return e.get(b+"?email="+t)}function i(t){return e.get(y+"?idproblem="+t)}function s(t){return e.post(S,t)}function l(t){return e.get(P+"?idproblem="+t)}function c(t){return e.get(C+"?idproblem="+t)}function u(t){return e.get($+"?idproblem="+t)}function m(t){return e.get(I+"?idproblem="+t)}function p(t){return e.get(L+"?idproblem="+t)}function d(t){return e.get(h+"?email="+t)}function g(t){return e.get(A+"?idproblem="+t.idproblem+"&email="+t.email)}function f(t){return e.get(E+"?idproblem="+t)}var b="/api/problem/getproblems",h="/api/problem/getproblemscollaborator",v="/api/problem/newproblem",k="/api/problem/getproblem",w="/api/problem/getproblemreport",y="/api/problem/getcollaborators",S="/api/problem/invite",P="/api/problem/getonion",C="/api/problem/getevaluation",$="/api/problem/getsemiotic",I="/api/problem/getcarf",L="/api/problem/removeproblem",A="/api/problem/removecollaborator",E="/api/problem/historychat",M={newproblem:o,getuserproblems:a,getproblem:n,getcollaborators:i,invite:s,getonion:l,getevaluation:c,getsemiotic:u,getcarf:m,removeproblem:p,getproblemscollaborator:d,removecollaborators:g,gethistorychat:f,getproblemreport:r};return M}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t,o,r){function n(){m.idproblem=t.localStorage.getItem("problemid"),o.getsemiotic(m.idproblem).success(function(e){e.success?m.semioticframework=e.semioticframework:r.errorMessage(e.message)})}function a(t,o){var r={text:t,update:o};e.emit("updateSocialWorld",r)}function i(t,o){var r={text:t,update:o};e.emit("updatePragmatic",r)}function s(t,o){var r={text:t,update:o};e.emit("updateSemantic",r)}function l(t,o){var r={text:t,update:o};e.emit("updateSyntatic",r)}function c(t,o){var r={text:t,update:o};e.emit("updateEmpirical",r)}function u(t,o){var r={text:t,update:o};e.emit("updatePhysical",r)}var m=this;m.idproblem="",m.saveSocialWorld=a,m.savePragmatic=i,m.saveSemantic=s,m.saveSyntatic=l,m.saveEmpirical=c,m.savePhysical=u,m.semioticframework="",m.initSemioticFramework=n,e.on("onUpdateSocialWorld",function(e){m.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){m.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){m.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,t){m.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){m.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){m.semioticframework.physical=e})}angular.module("app").controller("semioticframeworkController",e),e.$inject=["Socket","$window","problemService","toastApp"]}(),function(e){"use strict";function t(e,t,o,r,n){function a(){d.idproblem=t.localStorage.getItem("problemid"),d.localcode=t.localStorage.getItem("localcode"),o.getonion(d.idproblem).success(function(e){e.success?d.stakeholderList=e.stakeholders:n.errorMessage(e.message)}),d.inProcessing=!1}function i(t){e.emit("broadcastOnionSave",t)}function s(t){e.emit("broadcastOnionEdit",t)}function l(t,o){var r={index:t,stakeholder:o};e.emit("broadcastOnionRemove",r)}function c(e,t,o){var n=r.confirm().parent(angular.element(document.body)).title("Detete Stakeholder?").content("Title: "+o.name).ariaLabel("Remove Stakeholder").ok("Yes!").cancel("Cancel").targetEvent(e);r.show(n).then(function(){l(t,o)})}function u(t,o){var r={onionlayer:o,name:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px",zindex:9999};e.emit("broadcastOnionAdd",r)}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline;"),document.getElementById("legend"+e).setAttribute("opacity","0.7"),document.getElementById(e).setAttribute("opacity","0.7")}function p(e){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById("legend"+e).setAttribute("opacity","1.0"),document.getElementById(e).setAttribute("opacity","1.0")}var d=this;d.idproblem="",d.stakeholderList=[],d.stakeholder="",d.intitOnion=a,d.move=!1,d.inProcessing=!0,d.saveStakeholder=i,d.setOpenEdit=s,d.delPostIt=c,d.addPostIt=u,d.acende=m,d.apaga=p,d.localcode="",e.on("onBroadcastOnionSave",function(e){angular.forEach(d.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.zindex=9999)})}),e.on("onBroadcastOnionEdit",function(e){angular.forEach(d.stakeholderList,function(t){t._id===e&&(t.openEdit=!0,t.zindex=9999)})}),e.on("onBroadcastOnionRemove",function(e){var t=document.getElementById("stakeholder"+d.stakeholderList[e]._id);t.style.display="none",d.stakeholderList.splice(e,1)}),e.on("onBroadcastMove",function(e){d.localcode!==e.localcode&&(document.getElementById("stakeholder"+e._id).style.left=e.x,document.getElementById("stakeholder"+e._id).style.top=e.y)}),e.on("onBroadcastOnionAdd",function(e){d.stakeholderList.push(e)})}angular.module("app").controller("stakeholderController",t),t.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,t,o,r,n,a,i){function s(){b.userid=n.localStorage.getItem("userid"),b.nickname=n.localStorage.getItem("nickname"),b.useremail=n.localStorage.getItem("useremail"),b.photo=n.localStorage.getItem("photo"),a.getuserproblems(b.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);b.problemList=e.problems}else i.errorMessage(e.message)}),a.getproblemscollaborator(b.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);b.problemCollaboratorList=e.problems}else i.errorMessage(e.message)}),b.loginInProgress=!1}function l(e){a.removeproblem(e).success(function(t){if(t.success){for(var o=0;o<b.problemList.length;o++)if(b.problemList[o]._id==e){b.problemList.splice(o,1);break}}else i.errorMessage(t.message)})}function c(t,o){var r=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+o.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(t);e.show(r).then(function(){l(o._id)})}function u(e){e.userid=b.userid,a.newproblem(e).success(function(e){e.success?b.editProblem(e.problem):i.errorMessage(e.message)})}function m(e){n.localStorage.setItem("problemid",e._id);var o={idproblem:e._id,nickname:b.nickname};r.emit("initProblem",o),t.go("problem.stakeholders")}function p(){o.logout(),t.go("init.login")}function d(){t.go("profile")}function g(t){e.show({controller:f,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:t})}function f(e,t,o){e.artifactList=[],e.hide=function(){o.hide()},e.cancel=function(){o.cancel()},e.addNewProblem=function(r){return e.artifactList.length<1?void i.errorMessage(t("translate")("LABEL_CHOICE_ARTIFACTS")):(r.artifacts=e.artifactList,b.startNewProblem(r),void o.cancel())},e.addArtifact=function(t){for(var o=0;o<e.artifactList.length;o++)if(e.artifactList[o]===t)return void e.artifactList.splice(o,1);e.artifactList.push(t)}}var b=this;b.nickname="",b.userid="",b.useremail="",b.problemList=[],b.problemCollaboratorList=[],b.loginInProgress=!0,b.getProblems=s,b.revomveProblem=c,b.startNewProblem=u,b.editProblem=m,b.doLogout=p,b.newProblem=g,b.editProfile=d,b.photo,f.$inject=["$scope","$filter","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,r){function n(){u.idproblem=e.localStorage.getItem("problemid"),t.getonion(u.idproblem).success(function(e){if(e.success){if(e.stakeholders.length>0){for(var t=1;t<u.sugestionValuesArray.length;t++)u.sugestionValues+=u.sugestionValuesArray[t]+", ";u.sugestionValues[u.sugestionValuesArray[u.sugestionValuesArray.length-1]]+".";for(var r=0;r<e.stakeholders.length;r++)for(var n=0;n<u.stakeholderList.length;n++){var a={_id:e.stakeholders[r]._id,onionlayer:e.stakeholders[r].onionlayer,values:e.stakeholders[r].values,name:e.stakeholders[r].name,description:e.stakeholders[r].description,openEdit:e.stakeholders[r].openEdit,x:e.stakeholders[r].x,y:e.stakeholders[r].y,newValues:[]};e.stakeholders[r].onionlayer!=u.stakeholderList[n].onionlayer||u.stakeholderList[n].stakeholders.push(a)}}u.inProcessing=!1}else o.errorMessage(e.message)})}function a(e){e.openEdit=!0}function i(e){e.openEdit=!1}function s(e,t){for(var o=[],n=0;n<t.values.length;n++)t.values[n]!=e&&o.push(t.values[n]);t.values=o,r.emit("broadcastOnionSave",t)}function l(e){if(""===e.newValues||void 0===e.newValues)o.errorMessage("Valor não especificado.");else{for(var t=e.newValues.split(","),n=0;n<t.length;n++)c(e.values,t[n])?o.errorMessage("Duplicate value: "+t[n]):e.values.push(t[n]);e.newValues="",e.openEdit=!1,r.emit("broadcastOnionSave",e)}}function c(e,t){for(var o=0;o<e.length;o++)if(t===e[o])return!0;return!1}var u=this;u.inProcessing=!0,u.idProblem="",u.useremail="",u.newvalues="",u.initValueIdentificationFrame=n,u.setSuggestionShow=a,u.leaveSuggestionShow=i,u.removeValueIdentication=s,u.setValueIdentication=l,u.sugestionValues="",u.stakeholderList=[{onionlayer:"Community",stakeholders:[]},{onionlayer:"Market",stakeholders:[]},{onionlayer:"Source",stakeholders:[]},{onionlayer:"Contribution",stakeholders:[]},{onionlayer:"Technico",stakeholders:[]}],u.sugestionValuesArray=["Acessibilidade","Adaptabilidade","Estética","Autonomia","Disponibilidade","Consciência","Colaboração","Conversação","Emoção e Afeto","Grupos","Identidade","Consentimento informado","Meta-comunicação","Normas","Objeto","Portabilidade","Presença","Privacidade","Propriedade","Reciprocidade, Relacionamento, Reputação","Escalabilidade","Segurança","Compartilhamento","Confiança","Usabilidade","Visibilidade"],r.on("onBroadcastOnionSave",function(e){angular.forEach(u.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.newValues=[])})})}angular.module("app").controller("valueIdentificationFrameController",e),e.$inject=["$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,t,o,r){function n(){t.go("startproblem")}function a(){s.userid=e.localStorage.getItem("userid"),void 0!==s.userid}function i(t){var o={userid:e.localStorage.getItem("userid"),photo:t};r.uploadPhoto(o).success(function(o){o.success?e.localStorage.setItem("photo",t):toastApp.errorMessage("-----")})}var s=this;s.startProfile=a,s.uploadInProgress=!0,s.uploadProgress=0,s.userid,s.savePhoto=i,s.systemReturn=n,s.myImage="",s.myCroppedImage="";var l=function(e){var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){o.$apply(function(t){t.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",l)}angular.module("app").controller("profileController",e),e.$inject=["$window","$state","$scope","signupService"]}(),function(){"use strict";function e(e,t,o,r,n,a,i,s,l){function c(e){o.create(e).success(function(t){t.success?(n.errorMessage(s("translate")("WELCOME_SYSTEM")+e.nickname),r.go("init.login")):n.errorMessage("Email Já cadastrado")})}function u(t){e.use(t)}function m(e){o.rescuePassword(e).success(function(t){t.success?(n.errorMessage("Email com instruções enviado para "+e.email),r.go("init.login")):n.errorMessage("Error")})}function p(e){o.changePassword(e).success(function(e){e.success?(n.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),r.go("init.login")):n.errorMessage("Error")})}var d=this;d.message="",d.saveUser=c,d.rescuePassword=m,d.changePassword=p,d.setLang=u,d.loginInProgress=!1}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(i,t)}function r(t){return e.post(s,t)}function n(o){var r=t.search();return e.get(l+"?mytoken="+r.mytoken+"&password="+o.password)}function a(t){return e.post(c,t)}var i="/api/signup/",s="/api/rescuepasswd/",l="/api/rescuepasswd/newpasswd/",c="/api/profile/photo/",u={create:o,rescuePassword:r,changePassword:n,uploadPhoto:a};return u}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e){var t=e.extendPalette("teal",{50:"E0F2F1",100:"B2DFDB",200:"80CBC4",300:"4DB6AC",400:"26A69A",500:"009688",600:"00897B",700:"00796B",800:"00695C",900:"004D40",A100:"A7FFEB",A200:"64FFDA",A400:"1DE9B6",A700:"00BFA5",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0});e.definePalette("teal",t),e.theme("default").primaryPalette("teal").accentPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,t,o){var r={};return r.login=function(t,r){return e.post("/api/login",{email:t,password:r}).success(function(e){return o.setToken(e.token),e})},r.logout=function(){o.setToken()},r.isLoggedIn=function(){return o.getToken()?!0:!1},r.getUser=function(r){return o.getToken()?e.get("/api/me/?userid="+r):t.reject({message:"User has no token"})},r}]).factory("AuthToken",["$window",function(e){var t={};return t.getToken=function(){return e.localStorage.getItem("token")},t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token")},t}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,t,o){var r={};return r.request=function(e){var t=o.getToken();return t&&(e.headers["x-access-token"]=t),e},r}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket","$window",function(e,t,o){return{restrict:"A",replace:!0,link:function(r,n,a){function i(e){var t=e.target.id;"svg"==t&&(t=""),r.stakeholder.onionlayer=t,y=e.pageY,x=e.pageX,n.css({top:y+"px",left:x+"px"}),r.stakeholder.x=x+"px",r.stakeholder.y=y+"px"}function s(){e.unbind("mousemove",i),e.unbind("mouseup",s),t.emit("broadcastMove",r.stakeholder)}n.on("mousedown",function(t){"stakeholder"==t.target.id.substring(0,11)&&(r.stakeholder.localcode=o.localStorage.getItem("localcode"),t.preventDefault(),e.bind("mousemove",i),e.bind("mouseup",s))})}}}]),function(e){angular.module("appRxDrag",["rx"]).directive("rxdraggable",["$document","$window","rx","Socket",function(e,t,o,r){return function(n,a,i){var s=t.localStorage.getItem("localcode"),l=o.Observable.fromEvent(a,"mouseup"),c=o.Observable.fromEvent(e,"mousemove"),u=o.Observable.fromEvent(a,"mousedown").map(function(e){return e.preventDefault(),{left:e.clientX-a[0].getBoundingClientRect().left,top:e.clientY-a[0].getBoundingClientRect().top}}),m=u.selectMany(function(e){return c.map(function(t){return{left:t.clientX-e.left,top:t.clientY-e.top}}).takeUntil(l)});m.subscribe(function(e){a.css({top:e.top+"px",left:e.left+"px"}),e.localcode=s,r.emit("broadcastMove",e)})}}])}.call(this),function(){"use strict";function e(e,t,o,r,n,a,i){function s(t){e.use(t)}function l(){return Math.random()+Math.floor(10*Math.random())}function c(e){m.inProcessing=!0,m.error="",r.login(e.email,e.password).success(function(e){n.localStorage.setItem("useremail",e.email),n.localStorage.setItem("userid",e.id),n.localStorage.setItem("localcode",e.id+"-"+l()),n.localStorage.setItem("nickname",e.nickname),m.setLang(e.language),m.inProcessing=!1,r.getUser(e.id).then(function(t){i.errorMessage(a("translate")("WELCOME_SYSTEM")+": "+e.nickname),e.success?(n.localStorage.setItem("photo",t.data.photo),o.go("startproblem")):i.errorMessage("Usuário e senha não conferem.")})})}function u(){r.logout(),o("init")}var m=this;m.inProcessing=!1,m.setLang=s,m.doLogout=u,m.doLogin=c,m.loggedIn=r.isLoggedIn(),t.$on("$routeChangeStart",function(){m.loggedIn=r.isLoggedIn(),r.getUser().then(function(e){m.user=e.data})})}angular.module("app").controller("loginController",e),e.$inject=["$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),function(){"use strict";angular.module("app").service("Socket",["$location","$timeout",function(e,t){this.socket=io(),this.on=function(e,o){this.socket&&this.socket.on(e,function(e){t(function(){o(e)})})},this.emit=function(e,t){this.socket&&this.socket.emit(e,t)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRzYy5hcHAuanMiLCJ0b2FzdC5zZXJ2aWNlLmpzIiwicm91dGVyLmFwcC5qcyIsImFwcC5kc2MubWluLmpzIiwibGFuZ3VhZ2UvdHJhbnNsYXRlLmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL2NhcmYuY29udHJvbGxlci5qcyIsInByb2JsZW0vY2hhdC5jb250cm9sbGVyLmpzIiwicHJvYmxlbS9jb2xsYWJvcmF0b3JzLmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL2RzY3Jlc3BvcnQuY29udHJvbGxlci5qcyIsInByb2JsZW0vZXZhbHVhdGlvbmZyYW1ld29yay5jb250cm9sbGVyLmpzIiwicHJvYmxlbS9tZW51LnByb2JsZW0uY29udHJvbGxlci5qcyIsInByb2JsZW0vb25pb24uY29udHJvbGxlci5qcyIsInByb2JsZW0vcHJvYmxlbS5lZGl0LmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL3Byb2JsZW0ucmVwb3J0LmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL3Byb2JsZW0uc2VydmljZS5qcyIsInByb2JsZW0vc2VtaW90aWNmcmFtZXdvcmsuZWRpdC5jb250cm9sbGVyLmpzIiwicHJvYmxlbS9zdGFrZWhvbGRlci5lZGl0LmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL3N0YXJ0LnByb2JsZW0uY29udHJvbGxlci5qcyIsInByb2JsZW0vdmFsdWVkZW50aWZpY2F0aW9uZnJhbWUuY29udHJvbGxlci5qcyIsInVzZXIvcHJvZmlsZS5jb250cm9sbGVyLmpzIiwidXNlci9zaWdudXAuY29udHJvbGxlci5qcyIsInVzZXIvc2lnbnVwLnNlcnZpY2UuanMiLCJhcHAuY29uZmlnLmpzIiwiYXV0aC5zZXJ2aWNlLmpzIiwiZHJhZy5kc2MuanMiLCJkcmFncnguZHNjLmpzIiwibG9naW4uY29udHJvbGxlci5qcyIsInNvY2tldC5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkaHR0cFByb3ZpZGVyIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsInRvYXN0QXBwIiwiJG1kVG9hc3QiLCJlcnJvck1lc3NhZ2UiLCJ0aGlzIiwibWVzc2FnZSIsInNob3ciLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwidGVtcGxhdGVVcmwiLCJhY3Rpb24iLCJoaWdobGlnaHRBY3Rpb24iLCJwb3NpdGlvbiIsImhpZGVEZWxheSIsInNlcnZpY2UiLCJzZWxmIiwiY2xvc2VUb2FzdCIsImhpZGUiLCJmYWN0b3J5IiwiJGluamVjdCIsInJvdXRlcyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwic3RhdGUiLCJ1cmwiLCJ2aWV3cyIsImNvbnRlbnQtdGFiIiwicHJvYmxlbS1kZXNjcmlwdGlvbiIsImRzYy1hcnRpZmFjdCIsIm90aGVyd2lzZSIsImluaXRMYW5ndWFnZSIsIiR0cmFuc2xhdGVQcm92aWRlciIsInVzZVN0YXRpY0ZpbGVzTG9hZGVyIiwicHJlZml4Iiwic3VmZml4IiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJ1c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kiLCJ1c2VMb2NhbFN0b3JhZ2UiLCJsYW5ndWFnZUNvbnRyb2xsZXIiLCIkdHJhbnNsYXRlIiwic2V0TGFuZyIsImxhbmdLZXkiLCJ1c2UiLCJjaGFuZ2VMYW5ndWFnZSIsInJlc3RyaWN0IiwiZGlyZWN0aXZlIiwiY2FyZkNvbnRyb2xsZXIiLCIkd2luZG93IiwiU29ja2V0IiwicHJvYmxlbVNlcnZpY2UiLCJpbml0Q2FyZiIsImlkUHJvYmxlbSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJnZXRjYXJmIiwic3VjY2VzcyIsImRhdGEiLCJsb2NhbFN0YWtlaG9sZGVycyIsInN0YWtlaG9sZGVycyIsInN0YWtlaG9sZGVyTGlzdCIsImNhcmZMaXN0IiwiY2FyZiIsImNhcmZQcmlvcml0eUxpc3QiLCJsb2NhbFByaW9yaXR5TGlzdCIsImluUHJvY2Vzc2luZyIsInJlc2V0Q2FyZiIsIl9pZCIsInBtcyIsInZhbHVlcyIsInByaW9yaXR5IiwicmVxdWlyZW1lbnQiLCJ2YWx1ZUxpc3QiLCJhZGRwbXN2YWx1ZSIsImxlbmd0aCIsImVtaXQiLCJyZW1vdmVDQVJGIiwiaW5kZXgiLCJvYmoiLCJzZWxlY3RQTVNWYWx1ZSIsInVuZGVmaW5lZCIsImZvckVhY2giLCJjYXJmUE1TVmFsdWUiLCJwbXNfdmFsdWUiLCJzZXRQcmlvdGl0eSIsImFkZExpc3RWYWx1ZSIsIm5ld3ZhbHVlIiwiaSIsInNwbGljZSIsImFkZFN0YWtlaG9sZGVyIiwibmV3U3Rha2Vob2xkZXIiLCJvbiIsImlkIiwiY2hhdERTQyIsIiR0aW1lb3V0Iiwib3BlbkNoYXQiLCJpc09wZW5DaGF0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImZvY3VzIiwiaW5pdEhpc3RvcnlDaGF0Iiwibmlja25hbWUiLCJwaG90byIsImdldGhpc3RvcnljaGF0IiwiaGlzdG9yeWNoYXQiLCJ0bXAiLCJEYXRlIiwidGltZSIsIm1zbiIsIm1zZyIsImdldERhdGUiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwibWVzc2FnZXMiLCJzaG93UmVwbGF5IiwicmVwbGF5Iiwic2VuZE1lc3NhZ2UiLCJjaGF0bXNnIiwibmV3bXNnIiwiY29udGFkb3IiLCJ6ZXJhckNvbnRhZG9yIiwia2V5cHJlc3NDaGF0IiwiZXZlbnQiLCJrZXlDb2RlIiwidXNlckxpc3QiLCJjb250cm9sbGVyQ29sbGFib3JhdG9ycyIsImluaXRDb2xsYWJvcmF0b3JzIiwidXNlcmVtYWlsIiwiZ2V0Y29sbGFib3JhdG9ycyIsImNvbGxhYm9yYXRvcnMiLCJzZWFyY2hDYWxsYWJvcmF0aW9uIiwiZW1haWwiLCJhZGRDb2xsYWJvcmF0b3IiLCJpbnZpdGUiLCJpZHByb2JsZW0iLCJyZW1vdmVDb2xsYWJvcmF0b3IiLCJwZW9wbGUiLCJyZW1vdmVjb2xsYWJvcmF0b3JzIiwiZHNjUmVwb3J0Q29udHJvbGxlciIsImJ1aWRSZXBvcnQiLCJlbGVtZW50IiwiaHRtbCIsInBkZiIsImpzUERGIiwiYWRkSFRNTCIsInBhZ2VzcGxpdCIsImRpc3Bvc2UiLCJzYXZlIiwiZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXIiLCJpbml0RXZhbHVhdGlvbiIsImdldGV2YWx1YXRpb24iLCJldmFsdWF0aW9uZnJhbWV3b3JrTGlzdCIsImV2YWx1YXRpb25mcmFtZXdvcmsiLCJzYXZlRnJhbWUiLCJzdGFrZWhvbGRlciIsInNldE9wZW5FZGl0RGlzY3V0aW9uIiwiY3VycmVudFN0YWtlaG9sZGVyIiwib3BlbkVkaXQiLCJvbmlvbmxheWVyIiwibmFtZSIsImRlc2NyaXB0aW9uIiwicHJvYmxlbXMiLCJzb2x1dGlvbnMiLCJzdGFrZWhvbGRlck9uaW9uIiwibWVudVByb2JsZW1hQ29udHJvbGxlciIsIkF1dGgiLCIkZmlsdGVyIiwiJHN0YXRlIiwiZ2V0Q3VycmVudFByb2JsZW0iLCJnZXRwcm9ibGVtIiwicHJvYmxlbSIsImFydGlmYWN0cyIsImFydGlmYWN0Iiwic3BsaXQiLCJkc2NfYXJ0aWZhY3RzIiwidG9Mb3dlckNhc2UiLCJsYWJlbCIsImluaXRzb2NrZXRwcm9ibGVtIiwic3lzdGVtUmV0dXJuIiwiZ28iLCJmb3JtQWRkQ29sbGFib3JhdG9ycyIsImZvcm1Qcm9ibGVtUmVwb3J0IiwiZWRpdERlc2NyaXB0aW9uUHJvYmxlbSIsImRvTG9nb3V0IiwibG9nb3V0Iiwib25pb25Db250cm9sbGVyIiwiJG1kRGlhbG9nIiwiaW50aU15dE9uaW9uIiwic2F2ZVBvc3RJdE9uaW9uIiwiZWRpdFBvc3RJdE9uaW9uIiwiZGVsUG9zdEl0T25pb24iLCJhZGRQb3N0SXRPbmlvbiIsIm9uT25pb24iLCJvZmZPbmlvbiIsImVkaXRQcm9ibGVtYUNvbnRyb2xsZXIiLCJsb2NhbGNvZGUiLCJzZXRVcGRhdGUiLCJ1cGRhdGVUcnVlIiwicHJvYmxlbVVwZGF0ZSIsInVwZGF0ZSIsInNhdmVEZXNjcmlwdGlvbiIsInJldG9ybm8iLCIkaW5qZWN0cmUiLCJwcm9ibGVtUmVwb3J0Q29udHJvbGxlciIsImluaXRQcm9ibGVtUGVwb3J0IiwiZ2V0cHJvYmxlbXJlcG9ydCIsIngiLCJwYXJzZUludCIsInN1YnN0cmluZyIsInkiLCIkaHR0cCIsIiRsb2NhdGlvbiIsIm5ld3Byb2JsZW0iLCJwb3N0IiwiQVBJX1JPVVRFX05FV1BST0JMRU0iLCJnZXQiLCJBUElfUk9VVEVfR0VUUFJPQkxFTVJFUE9SVCIsIkFQSV9ST1VURV9HRVRQUk9CTEVNIiwiZ2V0dXNlcnByb2JsZW1zIiwiQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNUyIsIkFQSV9ST1VURV9HRVRDT0xMQUJPUkFUT1JTIiwiQVBJX1JPVVRFX0lOVklURSIsImdldG9uaW9uIiwiQVBJX1JPVVRFX0dFVE9OSU9OIiwiQVBJX1JPVVRFX0dFVEVWQUxVQVRJT04iLCJnZXRzZW1pb3RpYyIsIkFQSV9ST1VURV9HRVRTRU1JT1RJQ0ZSQU1FV09SSyIsIkFQSV9ST1VURV9HRVRDQVJGIiwicmVtb3ZlcHJvYmxlbSIsIkFQSV9ST1VURV9SRU1PVkVQUk9CTEVNIiwiZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3IiLCJBUElfUk9VVEVfR0VUVVNFUlBST0JMRU1TQ09MTEFCT1JBVE9SIiwiQVBJX1JPVVRFX1JFTU9WRUNPTExBQk9SQVRPUiIsIkFQSV9ST1VURV9HRVRISVNUT1JZQ0hBVCIsInNlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlciIsImluaXRTZW1pb3RpY0ZyYW1ld29yayIsInNlbWlvdGljZnJhbWV3b3JrIiwic2F2ZVNvY2lhbFdvcmxkIiwidGV4dCIsImZsYWdTYXZlIiwic2F2ZVByYWdtYXRpYyIsInNhdmVTZW1hbnRpYyIsInNhdmVTeW50YXRpYyIsInNhdmVFbXBpcmljYWwiLCJzYXZlUGh5c2ljYWwiLCJzb2NpYWx3b3JsZCIsInByYWdtYXRpYyIsInNlbWlvdGljcmFtZXdvcmsiLCJzeW50YXRpYyIsImVtcGlyaWNhbCIsInBoeXNpY2FsIiwic3Rha2Vob2xkZXJDb250cm9sbGVyIiwiaW50aXRPbmlvbiIsInNhdmVTdGFrZWhvbGRlciIsInNldE9wZW5FZGl0IiwicmVtb3ZlUG9zdEl0IiwiZGVsUG9zdEl0IiwiZXYiLCJjb25maXJtIiwicGFyZW50IiwiYm9keSIsInRpdGxlIiwiY29udGVudCIsImFyaWFMYWJlbCIsIm9rIiwiY2FuY2VsIiwidGFyZ2V0RXZlbnQiLCJ0aGVuIiwiYWRkUG9zdEl0IiwiZSIsImNhbWFkYSIsInBhZ2VYIiwiemluZGV4IiwiYWNlbmRlIiwic2V0QXR0cmlidXRlIiwiYXBhZ2EiLCJtb3ZlIiwic3R5bGUiLCJkaXNwbGF5IiwibGVmdCIsInRvcCIsInN0YXJ0UHJvYmxlbUNvbnRyb2xsZXIiLCJnZXRQcm9ibGVtcyIsInVzZXJpZCIsInJlcGxhY2UiLCJwcm9ibGVtTGlzdCIsInByb2JsZW1Db2xsYWJvcmF0b3JMaXN0IiwibG9naW5JblByb2dyZXNzIiwiZGVsZXRlUHJvYmxlbSIsInByb2JsZW1pZCIsInJldm9tdmVQcm9ibGVtIiwic3RhcnROZXdQcm9ibGVtIiwiZWRpdFByb2JsZW0iLCJzZXRJdGVtIiwiZWRpdFByb2ZpbGUiLCJuZXdQcm9ibGVtIiwiRGlhbG9nQ29udHJvbGxlciIsIiRzY29wZSIsImFydGlmYWN0TGlzdCIsImFkZE5ld1Byb2JsZW0iLCJhZGRBcnRpZmFjdCIsInZhbG9yIiwidmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lQ29udHJvbGxlciIsImluaXRWYWx1ZUlkZW50aWZpY2F0aW9uRnJhbWUiLCJrIiwic3VnZXN0aW9uVmFsdWVzQXJyYXkiLCJzdWdlc3Rpb25WYWx1ZXMiLCJqIiwibmV3VmFsdWVzIiwic2V0U3VnZ2VzdGlvblNob3ciLCJsZWF2ZVN1Z2dlc3Rpb25TaG93IiwicmVtb3ZlVmFsdWVJZGVudGljYXRpb24iLCJ2YWx1ZSIsIm5ld0xpc3QiLCJzZXRWYWx1ZUlkZW50aWNhdGlvbiIsInZhbHVlc0xpc3QiLCJmaW5kVmFsdWUiLCJsaXN0IiwibmV3dmFsdWVzIiwicHJvZmlsZUNvbnRyb2xsZXIiLCJzaWdudXBTZXJ2aWNlIiwic3RhcnRQcm9maWxlIiwic2F2ZVBob3RvIiwibXlpbWFnZSIsInVzZXJQaG90byIsInVwbG9hZFBob3RvIiwidXBsb2FkSW5Qcm9ncmVzcyIsInVwbG9hZFByb2dyZXNzIiwibXlJbWFnZSIsIm15Q3JvcHBlZEltYWdlIiwiaGFuZGxlRmlsZVNlbGVjdCIsImV2dCIsImZpbGUiLCJjdXJyZW50VGFyZ2V0IiwiZmlsZXMiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiJGFwcGx5IiwidGFyZ2V0IiwicmVzdWx0IiwicmVhZEFzRGF0YVVSTCIsInF1ZXJ5U2VsZWN0b3IiLCJzaWdudXBDb250cm9sbGVyIiwiQXV0aFRva2VuIiwiJHN0YXRlUGFyYW1zIiwic2F2ZVVzZXIiLCJ1c2VyIiwiY3JlYXRlIiwicmVzY3VlUGFzc3dvcmQiLCJ1c2VyRW1haWwiLCJjaGFuZ2VQYXNzd29yZCIsIkFQSV9ST1VURV9VU0VSIiwiQVBJX1JPVVRFX1JFU0NVRVBBU1NXT1JEIiwibXl0b2tlblVSTCIsInNlYXJjaCIsIkFQSV9ST1VURV9TRVRORVdQQVNTV09SRCIsIm15dG9rZW4iLCJwYXNzd29yZCIsIkFQSV9ST1VURV9VUERBVEVQSE9UTyIsImFwcENvbmZpZyIsIiRtZFRoZW1pbmdQcm92aWRlciIsIm5lb25SZWRNYXAiLCJleHRlbmRQYWxldHRlIiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwiY29udHJhc3REZWZhdWx0Q29sb3IiLCJjb250cmFzdERhcmtDb2xvcnMiLCJjb250cmFzdExpZ2h0Q29sb3JzIiwiZGVmaW5lUGFsZXR0ZSIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwiJHEiLCJhdXRoRmFjdG9yeSIsImxvZ2luIiwic2V0VG9rZW4iLCJ0b2tlbiIsImlzTG9nZ2VkSW4iLCJnZXRUb2tlbiIsImdldFVzZXIiLCJyZWplY3QiLCJhdXRoVG9rZW5GYWN0b3J5IiwicmVtb3ZlSXRlbSIsImludGVyY2VwdG9yRmFjdG9yeSIsInJlcXVlc3QiLCJoZWFkZXJzIiwiJGRvY3VtZW50IiwibGluayIsInNjb3BlIiwiYXR0ciIsIm1vdXNlbW92ZSIsImlkX2RpdiIsInBhZ2VZIiwiY3NzIiwibW91c2V1cCIsInVuYmluZCIsInByZXZlbnREZWZhdWx0IiwiYmluZCIsInJ4IiwiYXR0cnMiLCJPYnNlcnZhYmxlIiwiZnJvbUV2ZW50IiwibW91c2Vkb3duIiwibWFwIiwiY2xpZW50WCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFkiLCJtb3VzZWRyYWciLCJzZWxlY3RNYW55IiwiaW1hZ2VPZmZzZXQiLCJwb3MiLCJ0YWtlVW50aWwiLCJzdWJzY3JpYmUiLCJjYWxsIiwibG9naW5Db250cm9sbGVyIiwiJHJvb3RTY29wZSIsImdldExvY2FsQ29kZSIsIk1hdGgiLCJyYW5kb20iLCJmbG9vciIsImRvTG9naW4iLCJlcnJvciIsImxhbmd1YWdlIiwidXNlckRhdGEiLCJsb2dnZWRJbiIsIiRvbiIsInNvY2tldCIsImlvIiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJyZW1vdmVMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkNBR0EsV0FDQSxZQUVBQSxTQUNBQyxPQUFBLE9BQUEsWUFBQSxlQUFBLGNBQUEsbUJBQUEsWUFBQSxVQUFBLGNBQUEsWUFBQSxhQUFBLFlBQUEsWUFBQSwyQkFDQUMsUUFBQSxnQkFBQSxTQUFBQyxHQUNBQSxFQUFBQyxhQUFBQyxLQUFBLHlCQ05BLFdBRUEsWUFjQSxTQUFBQyxHQUFBQyxHQWdCQSxRQUFBQyxHQUFBQSxHQUNBQyxLQUFBQyxRQUFBRixFQUNBRCxFQUFBSSxNQUVBQyxXQUFBLGtCQUNBQyxhQUFBLEtBQ0FDLFlBQUEsNEJBQ0FDLE9BQUEsS0FDQUMsaUJBQUEsRUFDQUMsU0FBQSxZQUNBQyxVQUFBLE1BekJBLEdBQUFDLElBQ0FULFFBQUEsR0FDQUYsYUFBQUEsRUFFQSxPQUFBVyxHQWpCQW5CLFFBQUFDLE9BQUEsbUJBQ0FXLFdBQUEsbUJBQUEsV0FBQSxXQUFBLFNBQUFMLEVBQUFELEdB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LFdBRUEsWUFFQXhCLFNBQ0FDLE9BQUEsT0FDQWtCLFFBQUEsVUFDQSxZQUFBLFdBQ0EsU0FBQXNNLEVBQUF2SCxHQUVBekYsS0FBQW9iLE9BQUFDLEtBS0FyYixLQUFBc0YsR0FBQSxTQUFBZ1csRUFBQUMsR0FDQXZiLEtBQUFvYixRQUNBcGIsS0FBQW9iLE9BQUE5VixHQUFBZ1csRUFBQSxTQUFBbFksR0FDQXFDLEVBQUEsV0FDQThWLEVBQUFuWSxRQU1BcEQsS0FBQXNFLEtBQUEsU0FBQWdYLEVBQUFsWSxHQUNBcEQsS0FBQW9iLFFBQ0FwYixLQUFBb2IsT0FBQTlXLEtBQUFnWCxFQUFBbFksSUFJQXBELEtBQUF3YixlQUFBLFNBQUFGLEdBQ0F0YixLQUFBb2IsUUFDQXBiLEtBQUFvYixPQUFBSSxlQUFBRiIsImZpbGUiOiJhcHAuZHNjLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjUvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcsWyduZ0ltZ0Nyb3AnLCd0b2FzdFNlcnZpY2UnLCd0ZXh0QW5ndWxhcicsJ2x1ZWdnLmRpcmVjdGl2ZXMnLCAnYXBwUnhEcmFnJywgJ0Ryb3BEU0MnLCdhdXRoU2VydmljZScsJ3VpLnJvdXRlcicsJ25nTWF0ZXJpYWwnLCduZ01kSWNvbnMnLCduZ0Nvb2tpZXMnLCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJ10pXHJcbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbigkaHR0cFByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ0F1dGhJbnRlcmNlcHRvcicpO1xyXG4gICAgICAgIH0pXHJcblxyXG59KSgpO1xyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjcvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgndG9hc3RTZXJ2aWNlJyxbXSlcclxuICAgICAgICAuY29udHJvbGxlcigndG9hc3RDb250cm9sbGVyJywgZnVuY3Rpb24oJG1kVG9hc3QsdG9hc3RBcHApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2UgPSAgdG9hc3RBcHAubWVzc2FnZTtcclxuICAgICAgICAgICAgc2VsZi5jbG9zZVRvYXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZmFjdG9yeSggJ3RvYXN0QXBwJywgdG9hc3RBcHAgKTtcclxuXHJcbiAgICB0b2FzdEFwcC4kaW5qZWN0ID0gWyAnJG1kVG9hc3QnIF07XHJcblxyXG4gICAgZnVuY3Rpb24gdG9hc3RBcHAgKCRtZFRvYXN0KSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8qZnVuY3Rpb24gZXJyb3JNZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudChlcnJvck1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDgwMClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXJyb3JNZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3RvYXN0Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvZHNjdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIk9LXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QWN0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcCByaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhpZGVEZWxheTogNTAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI1LzA2LzIwMTUuXHJcbiAqL1xyXG4oZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29uZmlnKHJvdXRlcyk7XHJcblxyXG4gICAgZnVuY3Rpb24gcm91dGVzKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuXHJcblxyXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdpbml0Jywge1xyXG4gICAgICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9pbml0cGFnZS5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2luaXQubG9naW4nLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdsb2dpbicsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50LXRhYic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy91c2VybG9naW4uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2luaXQuc2lnbnVwJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnc2lnbnVwJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdGFiJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3NpZ251cC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2luaXQucmVzY3VlcGFzc3dvcmQnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdyZXNjdWVwYXNzd29yZCcsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50LXRhYic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9yZXNjdWVwYXNzd29yZC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3N0YXJ0cHJvYmxlbScsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9zdGFydHByb2JsZW0nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zdGFydHByb2JsZW0uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc3RhcnRQcm9ibGVtQ29udHJvbGxlciBhcyB2bSdcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvZmlsZScsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9wcm9maWxlJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcHJvZmlsZS5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9maWxlQ29udHJvbGxlciBhcyB2bSdcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnZHNjcmVwb3J0Jywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2RzY3JlcG9ydCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcHJvYmxlbXJlcG9ydC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2JsZW1SZXBvcnRDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ25ld3Bhc3N3b3JkJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL25ld3Bhc3N3b3JkLzpteXRva2VuJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvbmV3cGFzc3dvcmQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lnbnVwQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3Byb2JsZW0nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9wcm9ibGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21lbnVQcm9ibGVtQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLmRlc2NyaXB0aW9uJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2Rlc2NyaXB0aW9uJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Byb2JsZW0tZGVzY3JpcHRpb24nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcHJvYmxlbWRlc2NyaXB0aW9uLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZWRpdFByb2JsZW1Db250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLmNvbGxhYm9yYXRvcnMnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvY29sbGFib3JhdG9ycycsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdwcm9ibGVtLWRlc2NyaXB0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL2NvbGxhYm9yYXRvcnMuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjb250cm9sbGVyQ29sbGFib3JhdG9ycyBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvYmxlbS5zdGFrZWhvbGRlcnMnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvc3Rha2Vob2xkZXJzJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zdGFrZWhvbGRlcnMuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzdGFrZWhvbGRlckNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3Byb2JsZW0uZXZhbHVhdGlvbmZyYW1ld29yaycsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9ldmFsdWF0aW9uZnJhbWV3b3JrJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9ldmFsdWF0aW9uZnJhbWV3b3JrLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLnNlbWlvdGljZnJhbWV3b3JrJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3NlbWlvdGljZnJhbWV3b3JrJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zZW1pb3RpY2ZyYW1ld29yay5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvYmxlbS5jYXJmJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2NhcmYnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnZHNjLWFydGlmYWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL2NhcmYuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjYXJmQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvYmxlbS52aWYnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvdmlmJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy92aWYuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd2YWx1ZUlkZW50aWZpY2F0aW9uRnJhbWVDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLm9uaW9uJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL29uaW9uJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2RzYy1hcnRpZmFjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9vbmlvbi5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ29uaW9uQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9sb2dpbicpO1xyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsbnVsbCwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAxOS8wNi8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoaW5pdExhbmd1YWdlKVxyXG4gICAgLmNvbnRyb2xsZXIoJ2xhbmd1YWdlQ29udHJvbGxlcicsbGFuZ3VhZ2VDb250cm9sbGVyKVxyXG4gICAgLmRpcmVjdGl2ZSgnY2hhbmdlTGFuZ3VhZ2UnLGNoYW5nZUxhbmd1YWdlKTtcclxuXHJcbmluaXRMYW5ndWFnZS4kaW5qZWN0ID0gWyckdHJhbnNsYXRlUHJvdmlkZXInXTtcclxubGFuZ3VhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnXTtcclxuXHJcbmZ1bmN0aW9uIGluaXRMYW5ndWFnZSAoJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZVN0YXRpY0ZpbGVzTG9hZGVyKHtcclxuICAgICAgICAgICAgcHJlZml4OiAnYXBwL2xhbmd1YWdlL2xhbmctJyxcclxuICAgICAgICAgICAgc3VmZml4OiAnLmpzb24nXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnByZWZlcnJlZExhbmd1YWdlKCdlbicpO1xyXG4gICAgICAgICR0cmFuc2xhdGVQcm92aWRlci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3koJ2VzY2FwZWQnKTtcclxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTG9jYWxTdG9yYWdlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxhbmd1YWdlQ29udHJvbGxlciAoJHRyYW5zbGF0ZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5zZXRMYW5nID0gc2V0TGFuZztcclxuICAgIGZ1bmN0aW9uIHNldExhbmcobGFuZ0tleSkge1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlLnVzZShsYW5nS2V5KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlTGFuZ3VhZ2UoKXtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdGVtcGxhdGVVcmwgOiBcImFwcC9sYW5ndWFnZS9jaGFuZ2VMYW5ndWFnZS5odG1sXCIsXHJcbiAgICAgICAgcmVzdHJpY3Q6IFwiRVwiXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAxNC8wNy8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoXCJjYXJmQ29udHJvbGxlclwiLGNhcmZDb250cm9sbGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjYXJmQ29udHJvbGxlcigkd2luZG93LFNvY2tldCxwcm9ibGVtU2VydmljZSx0b2FzdEFwcCl7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmlkUHJvYmxlbSA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYudmFsdWVMaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBbXTtcclxuICAgICAgICBzZWxmLmxvY2FsU3Rha2Vob2xkZXJzID0gW107XHJcbiAgICAgICAgc2VsZi5hZGRwbXN2YWx1ZSA9IGFkZHBtc3ZhbHVlO1xyXG4gICAgICAgIHNlbGYucmVtb3ZlQ0FSRiA9IHJlbW92ZUNBUkY7XHJcbiAgICAgICAgc2VsZi5zZWxlY3RQTVNWYWx1ZSA9IHNlbGVjdFBNU1ZhbHVlO1xyXG4gICAgICAgIHNlbGYuc2V0UHJpb3RpdHkgPSBzZXRQcmlvdGl0eTtcclxuICAgICAgICBzZWxmLmFkZExpc3RWYWx1ZSA9IGFkZExpc3RWYWx1ZTtcclxuICAgICAgICBzZWxmLmFkZFN0YWtlaG9sZGVyID0gYWRkU3Rha2Vob2xkZXI7XHJcbiAgICAgICAgc2VsZi5jYXJmID0ge1xyXG4gICAgICAgICAgICBwbXM6IFwiXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW10sXHJcbiAgICAgICAgICAgIHByaW9yaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICByZXF1aXJlbWVudDogXCJcIixcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXJzOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuaW5pdENhcmYgPSBpbml0Q2FyZjtcclxuICAgICAgICBzZWxmLmNhcmZMaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5jYXJmUHJpb3JpdHlMaXN0ID0gW107XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGluaXRDYXJmKCl7XHJcbiAgICAgICAgICAgIHNlbGYuaWRQcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGNhcmYoc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9jYWxTdGFrZWhvbGRlcnMgPSBkYXRhLnN0YWtlaG9sZGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBzZWxmLmxvY2FsU3Rha2Vob2xkZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmZMaXN0ID0gZGF0YS5jYXJmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmZQcmlvcml0eUxpc3QgPSBzZWxmLmxvY2FsUHJpb3JpdHlMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmluUHJvY2Vzc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVzZXRDYXJmKCl7XHJcbiAgICAgICAgICAgIHNlbGYuY2FyZiA9IHtcclxuICAgICAgICAgICAgICAgIF9pZDogXCJcIixcclxuICAgICAgICAgICAgICAgIHBtczogXCJcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlczogW10sXHJcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVtZW50OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXJzOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzZWxmLnZhbHVlTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RDQVJGYWRkJywgZnVuY3Rpb24gKGNhcmYpIHtcclxuICAgICAgICAgICAgc2VsZi5jYXJmTGlzdC5wdXNoKGNhcmYpO1xyXG4gICAgICAgICAgICByZXNldENhcmYoKTtcclxuICAgICAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBzZWxmLmxvY2FsU3Rha2Vob2xkZXJzO1xyXG4gICAgICAgICAgICBzZWxmLmNhcmZQcmlvcml0eUxpc3QgPSBzZWxmLmxvY2FsUHJpb3JpdHlMaXN0O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRwbXN2YWx1ZShjYXJmKXtcclxuXHJcbiAgICAgICAgICAgIGlmKGNhcmYucG1zID09PSBcIlwiKXtcclxuICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlNlbGVjdCBQTVNcIik7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgaWYoY2FyZi52YWx1ZXMubGVuZ3RoIDwgMSApe1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlNlbGVjdCBvbmUgb3IgbW9yZSBWYWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNhcmYuc3Rha2Vob2xkZXJzLmxlbmd0aCA8IDEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJTZWxlY3Qgb25lIG9yIG1vcmUgU3Rha2Vob2xkZXIocylcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhcmYucHJpb3JpdHkgPT09IFwiXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiU2VsZWN0IHByaW9yaXR5IFtMb3csIE1lZGl1bSBvciBIaWdoXVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0Q0FSRmFkZCcsIGNhcmYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FyZlByaW9yaXR5TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdENBUkZyZW1vdmUnLCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgc2VsZi5jYXJmTGlzdC5zcGxpY2UoaWQsMSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNBUkYoaW5kZXgsY2FyZil7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBjYXJmOiBjYXJmXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RDQVJGcmVtb3ZlJywgb2JqKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZWxlY3RQTVNWYWx1ZShwbXMpe1xyXG4gICAgICAgICAgICBpZihwbXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuY2FyZlBNU1ZhbHVlLCBmdW5jdGlvbiAocG1zX3ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBtc192YWx1ZS5wbXMgPT0gcG1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FyZi52YWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi52YWx1ZUxpc3QgPSBwbXNfdmFsdWUudmFsdWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldFByaW90aXR5KHByaW9yaXR5KXtcclxuICAgICAgICAgICAgc2VsZi5jYXJmLnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRMaXN0VmFsdWUobmV3dmFsdWUpe1xyXG4gICAgICAgICAgIGlmKHNlbGYuY2FyZi52YWx1ZXMubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgICAgIHNlbGYuY2FyZi52YWx1ZXMucHVzaChuZXd2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmNhcmYudmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAobmV3dmFsdWUgPT0gc2VsZi5jYXJmLnZhbHVlc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FyZi52YWx1ZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBzZWxmLmNhcmYudmFsdWVzLnB1c2gobmV3dmFsdWUpO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZFN0YWtlaG9sZGVyKG5ld1N0YWtlaG9sZGVyKXtcclxuICAgICAgICAgICAgaWYoc2VsZi5jYXJmLnN0YWtlaG9sZGVycy5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jYXJmLnN0YWtlaG9sZGVycy5wdXNoKG5ld1N0YWtlaG9sZGVyKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHNlbGYuY2FyZi5zdGFrZWhvbGRlcnMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG5ld1N0YWtlaG9sZGVyID09IHNlbGYuY2FyZi5zdGFrZWhvbGRlcnNbaV0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmYuc3Rha2Vob2xkZXJzLnNwbGljZShpLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5jYXJmLnN0YWtlaG9sZGVycy5wdXNoKG5ld1N0YWtlaG9sZGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5sb2NhbFByaW9yaXR5TGlzdCA9IFsnTG93JywgJ01lZGl1bScsJ0hpZ2gnXTtcclxuXHJcbiAgICAgICAgc2VsZi5jYXJmUE1TVmFsdWUgPSBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJJbnRlcmFjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJJZGVudGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIk5vcm1zXCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiQXNzb2NpYXRpb25cIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udmVyc2F0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiR3JvdXBzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVsYXRpb25zaGlwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVHJ1c3RcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJMZWFybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJNZXRhLWNvbW11bmljYXRpb25cIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJQbGF5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkFlc3RoZXRpY3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJFbW90aW9uIGFuZCBBZmZlY3Rpb25cIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJQcm90ZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkluZm9ybWVkIGNvbnNlcnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJSZXB1dGF0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU2VjdXJpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJFeHBsb2l0YXRpb25cIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQWNjZXNzaWJpbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIk9iamVjdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlByb3BlcnR5IChvd25lcnNoaXApXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVXNhYmlsaXR5XCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiVGVwb3JhbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBdmFpbGFiaWxpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBd2FyZW5lc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQcmVzZW5jZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcInBtc1wiOiBcIlRlcnJpdG9yaWFsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlBvcnRhYmlsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUHJpdmFjeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlNjYWxhYmlsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVmlzaWJpbGl0eVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcInBtc1wiOiBcIkNsYXNzaWZpY2F0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkF1dG9ub215XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29sbGFib3JhdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlNoYXJpbmdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBZGFwdGFiaWxpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJTdWJzaXN0ZW5jZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWNpcHJvY2l0eVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDE1LzA3LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ2NoYXREU0MnLGNoYXREU0MpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNoYXREU0MoJHRpbWVvdXQsIFNvY2tldCwgcHJvYmxlbVNlcnZpY2UsICR3aW5kb3cpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYubmV3bXNnID0gXCJcIjtcclxuICAgICAgICBzZWxmLm1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgc2VsZi5yZXBsYXkgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLm5pY2tuYW1lID0gXCJcIjtcclxuICAgICAgICBzZWxmLnVzZXJMaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5pbml0SGlzdG9yeUNoYXQgPSBpbml0SGlzdG9yeUNoYXQ7XHJcbiAgICAgICAgc2VsZi5zaG93UmVwbGF5ID0gc2hvd1JlcGxheTtcclxuICAgICAgICBzZWxmLnNlbmRNZXNzYWdlID0gc2VuZE1lc3NhZ2U7XHJcbiAgICAgICAgc2VsZi5waG90byA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi5vcGVuQ2hhdCA9IG9wZW5DaGF0O1xyXG4gICAgICAgIHNlbGYuaXNPcGVuQ2hhdCA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYua2V5cHJlc3NDaGF0ID0ga2V5cHJlc3NDaGF0O1xyXG4gICAgICAgIHNlbGYuY29udGFkb3IgPSAwO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBvcGVuQ2hhdCgpe1xyXG4gICAgICAgICAgICBzZWxmLmlzT3BlbkNoYXQgPSAhc2VsZi5pc09wZW5DaGF0O1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZScpLmZvY3VzKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGluaXRIaXN0b3J5Q2hhdCgpe1xyXG4gICAgICAgICAgICBzZWxmLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICAgICBzZWxmLm5pY2tuYW1lID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbmlja25hbWUnKTtcclxuICAgICAgICAgICAgc2VsZi5waG90byA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bob3RvJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGhpc3RvcnljaGF0KHNlbGYuaWRQcm9ibGVtKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEuaGlzdG9yeWNoYXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBuZXcgRGF0ZShkYXRhLmhpc3RvcnljaGF0W2ldLnRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1zbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaWNrbmFtZTogZGF0YS5oaXN0b3J5Y2hhdFtpXS5uaWNrbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c6IGRhdGEuaGlzdG9yeWNoYXRbaV0ubXNnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRtcC5nZXREYXRlKCkgKyBcIi9cIiArICh0bXAuZ2V0TW9udGgoKSArIDEgKSsgXCIvXCIgKyB0bXAuZ2V0RnVsbFllYXIoKSArIFwiIFtcIiArIHRtcC5nZXRIb3VycygpICsgXCI6XCIgKyB0bXAuZ2V0TWludXRlcygpICsgXCJdIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZXNzYWdlcy5wdXNoKG1zbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2NoZWNrVXNlcnMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNob3dSZXBsYXkoKXtcclxuICAgICAgICAgICAgaWYoc2VsZi5yZXBsYXkpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXBsYXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlcGxheSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RDaGF0JywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICB2YXIgdG1wID0gbmV3IERhdGUob2JqW29iai5sZW5ndGggLTFdLnRpbWUpO1xyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmlja25hbWU6IG9ialtvYmoubGVuZ3RoIC0xXS5uaWNrbmFtZSxcclxuICAgICAgICAgICAgICAgIG1zZzogb2JqW29iai5sZW5ndGggLTFdLm1zZyxcclxuICAgICAgICAgICAgICAgIHRpbWU6IHRtcC5nZXREYXRlKCkgKyBcIi9cIiArICh0bXAuZ2V0TW9udGgoKSArIDEpICsgXCIvXCIgKyB0bXAuZ2V0RnVsbFllYXIoKSArIFwiIFtcIiArIHRtcC5nZXRIb3VycygpICsgXCI6XCIgKyB0bXAuZ2V0TWludXRlcygpICsgXCJdIFwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBTb2NrZXQub24oJ29uQ2hlY2tVc2VycycsIGZ1bmN0aW9uICh1c2VyTGlzdCkge1xyXG4gICAgICAgICAgICBzZWxmLnVzZXJMaXN0ID0gdXNlckxpc3Q7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGNoYXRtc2cpe1xyXG4gICAgICAgICAgICBpZihjaGF0bXNnID09PSB1bmRlZmluZWQgfHwgY2hhdG1zZy5sZW5ndGggPCAyICl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdENoYXQnLCBjaGF0bXNnKTtcclxuICAgICAgICAgICAgc2VsZi5uZXdtc2cgPSBcIlwiO1xyXG4gICAgICAgICAgICBzZWxmLmNvbnRhZG9yID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHplcmFyQ29udGFkb3IoKXtcclxuICAgICAgICAgICAgc2VsZi5jb250YWRvciA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBrZXlwcmVzc0NoYXQoZXZlbnQsY2hhdG1zZyl7XHJcbiAgICAgICAgICAgIGlmKGV2ZW50LmtleUNvZGUgPT0gMTMpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jb250YWRvcisrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29udGFkb3IgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KHplcmFyQ29udGFkb3IsIDIwMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoc2VsZi5jb250YWRvciA+IDEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlKGNoYXRtc2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgfVxyXG5cclxufSkoKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLypcclxudmFyIHNlbGYgPSB0aGlzO1xyXG5zZWxmLm5ld21zZyA9IFwiXCI7XHJcbnNlbGYubWVzc2FnZXMgPSBbXTtcclxuc2VsZi5yZXBsYXkgPSBmYWxzZTtcclxuc2VsZi5uaWNrbmFtZSA9IFwiXCI7XHJcbnNlbGYudXNlckxpc3QgPSBbXTtcclxuc2VsZi5pbml0SGlzdG9yeUNoYXQgPSBpbml0SGlzdG9yeUNoYXQ7XHJcbnNlbGYuY2xvc2UgPSBjbG9zZTtcclxuc2VsZi5zaG93UmVwbGF5ID0gc2hvd1JlcGxheTtcclxuc2VsZi5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xyXG5cclxuZnVuY3Rpb24gY2xvc2UoKSB7XHJcbiAgICAkbWRTaWRlbmF2KCdjaGF0JykuY2xvc2UoKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcImNsb3NlIGNoYXRcIik7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRIaXN0b3J5Q2hhdCgpe1xyXG4gICAgc2VsZi5pZFByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgIHNlbGYubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgc2VsZi5waG90byA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bob3RvJyk7XHJcbiAgICBwcm9ibGVtU2VydmljZS5nZXRoaXN0b3J5Y2hhdChzZWxmLmlkUHJvYmxlbSlcclxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmhpc3RvcnljaGF0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBEYXRlKGRhdGEuaGlzdG9yeWNoYXRbaV0udGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmlja25hbWU6IGRhdGEuaGlzdG9yeWNoYXRbaV0ubmlja25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZzogZGF0YS5oaXN0b3J5Y2hhdFtpXS5tc2csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRtcC5nZXREYXRlKCkgKyBcIi9cIiArICh0bXAuZ2V0TW9udGgoKSArIDEgKSsgXCIvXCIgKyB0bXAuZ2V0RnVsbFllYXIoKSArIFwiIFtcIiArIHRtcC5nZXRIb3VycygpICsgXCI6XCIgKyB0bXAuZ2V0TWludXRlcygpICsgXCJdIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLnB1c2gobXNuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgU29ja2V0LmVtaXQoJ2NoZWNrVXNlcnMnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd1JlcGxheSgpe1xyXG4gICAgaWYoc2VsZi5yZXBsYXkpe1xyXG4gICAgICAgIHNlbGYucmVwbGF5ID0gZmFsc2U7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBzZWxmLnJlcGxheSA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcblNvY2tldC5vbignb25Ccm9hZGNhc3RDaGF0JywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgdmFyIHRtcCA9IG5ldyBEYXRlKG9ialtvYmoubGVuZ3RoIC0xXS50aW1lKTtcclxuICAgIHNlbGYubWVzc2FnZXMucHVzaCh7XHJcbiAgICAgICAgbmlja25hbWU6IG9ialtvYmoubGVuZ3RoIC0xXS5uaWNrbmFtZSxcclxuICAgICAgICBtc2c6IG9ialtvYmoubGVuZ3RoIC0xXS5tc2csXHJcbiAgICAgICAgdGltZTogdG1wLmdldERhdGUoKSArIFwiL1wiICsgKHRtcC5nZXRNb250aCgpICsgMSkgKyBcIi9cIiArIHRtcC5nZXRGdWxsWWVhcigpICsgXCIgW1wiICsgdG1wLmdldEhvdXJzKCkgKyBcIjpcIiArIHRtcC5nZXRNaW51dGVzKCkgKyBcIl0gXCJcclxuICAgIH0pO1xyXG59KTtcclxuXHJcblNvY2tldC5vbignb25DaGVja1VzZXJzJywgZnVuY3Rpb24gKHVzZXJMaXN0KSB7XHJcbiAgICBzZWxmLnVzZXJMaXN0ID0gdXNlckxpc3Q7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gc2VuZE1lc3NhZ2UoY2hhdG1zZyl7XHJcbiAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0Q2hhdCcsIGNoYXRtc2cpO1xyXG4gICAgc2VsZi5uZXdtc2cgPSBcIlwiO1xyXG59Ki9cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAxMC8wNy8yMDE1LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignY29udHJvbGxlckNvbGxhYm9yYXRvcnMnLCBjb250cm9sbGVyQ29sbGFib3JhdG9ycyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlckNvbGxhYm9yYXRvcnMoJHdpbmRvdyxTb2NrZXQscHJvYmxlbVNlcnZpY2UsdG9hc3RBcHApe1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5pZFByb2JsZW0gPSBcIlwiO1xyXG4gICAgICAgIHNlbGYuY29sbGFib3JhdG9ycyA9IFtdO1xyXG4gICAgICAgIHNlbGYudXNlcmVtYWlsID0gXCJcIjtcclxuICAgICAgICBzZWxmLmluaXRDb2xsYWJvcmF0b3JzID0gaW5pdENvbGxhYm9yYXRvcnM7XHJcbiAgICAgICAgc2VsZi5hZGRDb2xsYWJvcmF0b3IgPSBhZGRDb2xsYWJvcmF0b3I7XHJcbiAgICAgICAgc2VsZi5yZW1vdmVDb2xsYWJvcmF0b3IgPSByZW1vdmVDb2xsYWJvcmF0b3I7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGluaXRDb2xsYWJvcmF0b3JzKCl7XHJcbiAgICAgICAgICAgIHNlbGYuaWRQcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgICAgIHNlbGYudXNlcmVtYWlsID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcmVtYWlsJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldGNvbGxhYm9yYXRvcnMoc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29sbGFib3JhdG9ycyA9IGRhdGEuY29sbGFib3JhdG9ycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9Tb2NrZXQuZW1pdCgnY2hlY2tVc2VycycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlYXJjaENhbGxhYm9yYXRpb24oZW1haWwpe1xyXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5jb2xsYWJvcmF0b3JzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKGVtYWlsID09IHNlbGYuY29sbGFib3JhdG9yc1tpXS5lbWFpbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkQ29sbGFib3JhdG9yKGVtYWlsKXtcclxuICAgICAgICAgICAgaWYoc2VsZi51c2VyZW1haWwgPT0gZW1haWwpe1xyXG4gICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKHNlbGYudXNlcmVtYWlsICsgXCIgaXMgZW1haWwgb2Ygb3duZXIuXCIpO1xyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoQ2FsbGFib3JhdGlvbihlbWFpbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJVc3VhcmlvIENhZGFzdHJhZG8uXCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW52aXRlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZHByb2JsZW06IHNlbGYuaWRQcm9ibGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmludml0ZShpbnZpdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb2xsYWJvcmF0b3JzID0gZGF0YS5jb2xsYWJvcmF0b3JzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNvbGxhYm9yYXRvcihwZW9wbGUpe1xyXG4gICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgaWRwcm9ibGVtOiBzZWxmLmlkUHJvYmxlbSxcclxuICAgICAgICAgICAgICAgIGVtYWlsOiBwZW9wbGUuZW1haWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICBwcm9ibGVtU2VydmljZS5yZW1vdmVjb2xsYWJvcmF0b3JzKG9iailcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiQ29sYWJvcmFkb3IgZm9pIHJlbW92aWRvIGRvIHByb2pldG8uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbGxhYm9yYXRvcnMgPSBkYXRhLmNvbGxhYm9yYXRvcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypTb2NrZXQub24oJ29uQ2hlY2tVc2VycycsIGZ1bmN0aW9uICh1c2VyTGlzdCkge1xyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHVzZXJMaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaiA9IDA7IGogPCBzZWxmLmNvbGxhYm9yYXRvcnMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJMaXN0W2ldICsgJyAgICcgKyBzZWxmLmNvbGxhYm9yYXRvcnNbal0ubmlja25hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodXNlckxpc3RbaV0gPT09IHNlbGYuY29sbGFib3JhdG9yc1tqXS5uaWNrbmFtZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29sbGFib3JhdG9yc1tqXS5uaWNrbmFtZSA9IHNlbGYuY29sbGFib3JhdG9yc1tqXS5uaWNrbmFtZSArICcgKG9ubGluZSkgJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7Ki9cclxuXHJcbiAgICB9XHJcblxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDIyLzA3LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdkc2NSZXBvcnRDb250cm9sbGVyJyxkc2NSZXBvcnRDb250cm9sbGVyKTtcclxuXHJcbmZ1bmN0aW9uIGRzY1JlcG9ydENvbnRyb2xsZXIoKSB7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5pZHByb2JsZW0gPSAnYWpmbGFqZmxqYWxmamFsamYnO1xyXG4gICAgc2VsZi5idWlkUmVwb3J0ID0gYnVpZFJlcG9ydDtcclxuXHJcbiAgICBmdW5jdGlvbiBidWlkUmVwb3J0KGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0UmVzcG9ydCcpO1xyXG4gICAgICAgIHZhciBwZGYgPSBuZXcganNQREYoJ2wnLCdweCcpO1xyXG4gICAgICAgIHBkZi5hZGRIVE1MKFxyXG4gICAgICAgICAgICBodG1sLCAwLCAwLCB7XHJcbiAgICAgICAgICAgICAgICBwYWdlc3BsaXQ6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24oZGlzcG9zZSl7XHJcbiAgICAgICAgICAgICAgICBwZGYuc2F2ZSgndGVzdC5wZGYnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI5LzA2LzIwMTUuXHJcbiAqL1xyXG4oZnVuY3Rpb24oKXtcclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXInLGV2YWx1YXRpb25mcmFtZXdvcmtDb250cm9sbGVyKTtcclxuXHJcbiAgZnVuY3Rpb24gZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXIgKCR3aW5kb3cscHJvYmxlbVNlcnZpY2UsU29ja2V0LHRvYXN0QXBwKXtcclxuXHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgc2VsZi5ldmFsdWF0aW9uZnJhbWV3b3JrTGlzdCA9W107XHJcbiAgICAgIHNlbGYuaW5pdEV2YWx1YXRpb24gPSBpbml0RXZhbHVhdGlvbjtcclxuICAgICAgc2VsZi5zZXRPcGVuRWRpdERpc2N1dGlvbiA9IHNldE9wZW5FZGl0RGlzY3V0aW9uO1xyXG4gICAgICBzZWxmLnNhdmVGcmFtZSA9IHNhdmVGcmFtZTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGluaXRFdmFsdWF0aW9uKCl7XHJcbiAgICAgICAgICBzZWxmLmlkcHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRldmFsdWF0aW9uKHNlbGYuaWRwcm9ibGVtKVxyXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmV2YWx1YXRpb25mcmFtZXdvcmtMaXN0ID0gZGF0YS5ldmFsdWF0aW9uZnJhbWV3b3JrO1xyXG4gICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RGcmFtZUVkaXQnLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuZXZhbHVhdGlvbmZyYW1ld29ya0xpc3QsZnVuY3Rpb24oZXZhbHVhdGlvbmZyYW1ld29yayl7XHJcbiAgICAgICAgICAgICBpZiggZXZhbHVhdGlvbmZyYW1ld29yay5vbmlvbmxheWVyID09IGRhdGEub25pb25sYXllcil7XHJcbiAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGV2YWx1YXRpb25mcmFtZXdvcmsuc3Rha2Vob2xkZXJzLGZ1bmN0aW9uKHN0YWtlaG9sZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWtlaG9sZGVyLl9pZCA9PSBkYXRhLl9pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIub25pb25sYXllciA9IGRhdGEub25pb25sYXllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gZGF0YS5vcGVuRWRpdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnByb2JsZW1zID0gZGF0YS5wcm9ibGVtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnNvbHV0aW9ucyA9IGRhdGEuc29sdXRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmdW5jdGlvbiBzYXZlRnJhbWUoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RGcmFtZVNhdmUnLCBzdGFrZWhvbGRlcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFNvY2tldC5vbignb25VcGRhdGVTdGFrZWhvbGRlcicsIGZ1bmN0aW9uIChzdGFrZWhvbGRlck9uaW9uKSB7XHJcblxyXG5cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmdW5jdGlvbiBzZXRPcGVuRWRpdERpc2N1dGlvbihjdXJyZW50U3Rha2Vob2xkZXIpe1xyXG4gICAgICAgICAgY3VycmVudFN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdtZW51UHJvYmxlbUNvbnRyb2xsZXInLCBtZW51UHJvYmxlbWFDb250cm9sbGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBtZW51UHJvYmxlbWFDb250cm9sbGVyKEF1dGgsICRmaWx0ZXIsICRzdGF0ZSwgJHdpbmRvdywgcHJvYmxlbVNlcnZpY2UsdG9hc3RBcHAsIFNvY2tldCl7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAvL3NlbGYub3BlbkNoYXQgPSBidWlsZFRvZ2dsZXIoJ2NoYXQnKTtcclxuICAgICAgICBzZWxmLmZvcm1BZGRDb2xsYWJvcmF0b3JzID0gZm9ybUFkZENvbGxhYm9yYXRvcnM7XHJcbiAgICAgICAgc2VsZi5lZGl0RGVzY3JpcHRpb25Qcm9ibGVtID0gZWRpdERlc2NyaXB0aW9uUHJvYmxlbTtcclxuICAgICAgICBzZWxmLmRvTG9nb3V0ID0gZG9Mb2dvdXQ7XHJcbiAgICAgICAgc2VsZi5zeXN0ZW1SZXR1cm4gPSBzeXN0ZW1SZXR1cm47XHJcbiAgICAgICAgc2VsZi5mb3JtUHJvYmxlbVJlcG9ydCA9IGZvcm1Qcm9ibGVtUmVwb3J0O1xyXG4gICAgICAgIHNlbGYuZ2V0Q3VycmVudFByb2JsZW0gPSBnZXRDdXJyZW50UHJvYmxlbTtcclxuICAgICAgICBzZWxmLm5pY2tuYW1lO1xyXG4gICAgICAgIHNlbGYuZHNjX2FydGlmYWN0cyA9IFtdO1xyXG5cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRQcm9ibGVtKCl7XHJcbiAgICAgICAgICAgIHNlbGYubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgICAgICAgICBzZWxmLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRwcm9ibGVtKHNlbGYuaWRQcm9ibGVtKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb2JsZW0gPSBkYXRhLnByb2JsZW07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0YS5wcm9ibGVtLmFydGlmYWN0cywgZnVuY3Rpb24gKGFydGlmYWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGFydGlmYWN0LnNwbGl0KFwiX1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZHNjX2FydGlmYWN0cy5wdXNoKHtuYW1lOiBcInByb2JsZW0uXCIgKyBuYW1lWzJdLnRvTG93ZXJDYXNlKCksIGxhYmVsOiAkZmlsdGVyKCd0cmFuc2xhdGUnKShhcnRpZmFjdCl9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2VsZi5kc2NfYXJ0aWZhY3RzID0gZHNjX2FydGlmYWN0cztcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBpbml0c29ja2V0cHJvYmxlbSA9IHtcclxuICAgICAgICAgICAgICAgIFwiaWRwcm9ibGVtXCI6IHNlbGYuaWRQcm9ibGVtLFxyXG4gICAgICAgICAgICAgICAgXCJuaWNrbmFtZVwiOiBzZWxmLm5pY2tuYW1lXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFNvY2tldC5lbWl0KCdpbml0UHJvYmxlbScsIGluaXRzb2NrZXRwcm9ibGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3lzdGVtUmV0dXJuKCl7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnc3RhcnRwcm9ibGVtJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZm9ybUFkZENvbGxhYm9yYXRvcnMoKXtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9ibGVtLmNvbGxhYm9yYXRvcnMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1Qcm9ibGVtUmVwb3J0KCl7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnZHNjcmVwb3J0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBlZGl0RGVzY3JpcHRpb25Qcm9ibGVtKCkge1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3Byb2JsZW0uZGVzY3JpcHRpb24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvTG9nb3V0KCkge1xyXG4gICAgICAgICAgICBBdXRoLmxvZ291dCgpO1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2luaXQubG9naW4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGplc3VzIG9uIDIxLzAzLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignb25pb25Db250cm9sbGVyJyxvbmlvbkNvbnRyb2xsZXIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIG9uaW9uQ29udHJvbGxlcihTb2NrZXQsJHdpbmRvdyxwcm9ibGVtU2VydmljZSwkbWREaWFsb2csdG9hc3RBcHApe1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmlkcHJvYmxlbSA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi5pbnRpTXl0T25pb24gPSBpbnRpTXl0T25pb247XHJcbiAgICAgICAgc2VsZi5zYXZlUG9zdEl0T25pb24gPSBzYXZlUG9zdEl0T25pb247XHJcbiAgICAgICAgc2VsZi5lZGl0UG9zdEl0T25pb24gPSBlZGl0UG9zdEl0T25pb247XHJcbiAgICAgICAgc2VsZi5kZWxQb3N0SXRPbmlvbiA9IGRlbFBvc3RJdE9uaW9uO1xyXG4gICAgICAgIHNlbGYuYWRkUG9zdEl0T25pb24gPSBhZGRQb3N0SXRPbmlvbjtcclxuICAgICAgICBzZWxmLm9uT25pb24gPSBvbk9uaW9uO1xyXG4gICAgICAgIHNlbGYub2ZmT25pb24gPSBvZmZPbmlvbjtcclxuXHJcblxyXG4gICAgICAgIFxyXG5cclxuXHJcblxyXG4gICAgfVxyXG59KSgpOyIsIihmdW5jdGlvbigpe1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignZWRpdFByb2JsZW1Db250cm9sbGVyJyxlZGl0UHJvYmxlbWFDb250cm9sbGVyKTtcclxuXHJcbiAgICBlZGl0UHJvYmxlbWFDb250cm9sbGVyLiRpbmplY3RyZSA9IFsnJHNjb3BlJywnU29ja2V0J107XHJcblxyXG5mdW5jdGlvbiBlZGl0UHJvYmxlbWFDb250cm9sbGVyKFNvY2tldCwgJHRpbWVvdXQsdG9hc3RBcHAsJHdpbmRvdyxwcm9ibGVtU2VydmljZSkge1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciB1cGRhdGVUcnVlID0gdHJ1ZTtcclxuICAgIHNlbGYucHJvYmxlbSA9ICcnO1xyXG4gICAgc2VsZi5wcm9ibGVtVXBkYXRlID0gcHJvYmxlbVVwZGF0ZTtcclxuICAgIHNlbGYuZ2V0Q3VycmVudFByb2JsZW0gPSBnZXRDdXJyZW50UHJvYmxlbTtcclxuICAgIHNlbGYuc2F2ZURlc2NyaXB0aW9uID0gc2F2ZURlc2NyaXB0aW9uO1xyXG4gICAgc2VsZi5uaWNrbmFtZSA9ICcnO1xyXG4gICAgc2VsZi5sb2NhbGNvZGUgPSAnJztcclxuXHJcblxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDdXJyZW50UHJvYmxlbSgpe1xyXG4gICAgICAgIHNlbGYubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgICAgIHNlbGYuaWRQcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgc2VsZi5sb2NhbGNvZGUgPSAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9jYWxjb2RlJyk7XHJcblxyXG4gICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHByb2JsZW0oc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJvYmxlbSA9IGRhdGEucHJvYmxlbTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB2YXIgaW5pdHNvY2tldHByb2JsZW0gPSB7XHJcbiAgICAgICAgICAgIFwiaWRwcm9ibGVtXCI6IHNlbGYuaWRQcm9ibGVtLFxyXG4gICAgICAgICAgICBcIm5pY2tuYW1lXCI6IHNlbGYubmlja25hbWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdpbml0UHJvYmxlbScsIGluaXRzb2NrZXRwcm9ibGVtKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHNldFVwZGF0ZSgpe1xyXG4gICAgICAgIHVwZGF0ZVRydWUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25BdHVhbGl6YXJQcm9ibGVtYScsIGZ1bmN0aW9uIChyZXRvcm5vKSB7XHJcbiAgICAgICAgaWYoc2VsZi5sb2NhbGNvZGUgIT09IHJldG9ybm8ubG9jYWxjb2RlKSB7XHJcbiAgICAgICAgICAgIHNlbGYucHJvYmxlbS5kZXNjcmlwdGlvbiA9IHJldG9ybm8uZGVzY3JpcHRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGYucHJvYmxlbS51cGRhdGUgPSB1cGRhdGVUcnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvYmxlbVVwZGF0ZShwcm9ibGVtKSB7XHJcbiAgICAgICAgcHJvYmxlbS51cGRhdGUgPSB1cGRhdGVUcnVlO1xyXG4gICAgICAgIHByb2JsZW0ubG9jYWxjb2RlID0gc2VsZi5sb2NhbGNvZGU7XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ2F0dWFsaXphclByb2JsZW1hJywgcHJvYmxlbSk7XHJcbiAgICAgICAgaWYgKHVwZGF0ZVRydWUpIHtcclxuICAgICAgICAgICAgdXBkYXRlVHJ1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkdGltZW91dChzZXRVcGRhdGUsIDIwMDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlRGVzY3JpcHRpb24ocHJvYmxlbSkge1xyXG4gICAgICAgIHByb2JsZW0ubG9jYWxjb2RlID0gc2VsZi5sb2NhbGNvZGU7XHJcbiAgICAgICAgcHJvYmxlbS51cGRhdGUgPSB1cGRhdGVUcnVlO1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdhdHVhbGl6YXJQcm9ibGVtYScsIHByb2JsZW0pO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxufVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDEyLzA4LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdwcm9ibGVtUmVwb3J0Q29udHJvbGxlcicscHJvYmxlbVJlcG9ydENvbnRyb2xsZXIpO1xyXG5cclxuXHJcbiAgICAgZnVuY3Rpb24gcHJvYmxlbVJlcG9ydENvbnRyb2xsZXIoJHdpbmRvdyxwcm9ibGVtU2VydmljZSx0b2FzdEFwcCwkc3RhdGUpe1xyXG5cclxuICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICBzZWxmLmlkUHJvYmxlbTtcclxuICAgICAgICAgc2VsZi5wcm9ibGVtO1xyXG4gICAgICAgICBzZWxmLmluaXRQcm9ibGVtUGVwb3J0ID0gaW5pdFByb2JsZW1QZXBvcnQ7XHJcbiAgICAgICAgIHNlbGYuc3lzdGVtUmV0dXJuID0gc3lzdGVtUmV0dXJuO1xyXG5cclxuICAgICAgICAgZnVuY3Rpb24gaW5pdFByb2JsZW1QZXBvcnQoKXtcclxuXHJcbiAgICAgICAgICAgICBzZWxmLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG5cclxuICAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHByb2JsZW1yZXBvcnQoc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkYXRhLnByb2JsZW0uc3Rha2Vob2xkZXJzLCBmdW5jdGlvbiAoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnggPSAocGFyc2VJbnQoc3Rha2Vob2xkZXIueC5zdWJzdHJpbmcoMCxzdGFrZWhvbGRlci54Lmxlbmd0aCAtMikpIC0gMTAwKSsncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci55ID0gIChwYXJzZUludChzdGFrZWhvbGRlci55LnN1YnN0cmluZygwLHN0YWtlaG9sZGVyLnkubGVuZ3RoIC0yKSkgKyA0MDApKydweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb2JsZW0gPSBkYXRhLnByb2JsZW07XHJcbiAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgIGZ1bmN0aW9uIHN5c3RlbVJldHVybigpe1xyXG4gICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9ibGVtLnN0YWtlaG9sZGVycycpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgIH1cclxuXHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmFjdG9yeSgncHJvYmxlbVNlcnZpY2UnLCBwcm9ibGVtU2VydmljZSk7XHJcblxyXG4gIHByb2JsZW1TZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJywnJGxvY2F0aW9uJ107XHJcblxyXG4gIGZ1bmN0aW9uIHByb2JsZW1TZXJ2aWNlKCRodHRwLCRsb2NhdGlvbikge1xyXG5cclxuICAgIHZhciBBUElfUk9VVEVfR0VUVVNFUlBST0JMRU1TID0gJy9hcGkvcHJvYmxlbS9nZXRwcm9ibGVtcyc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNU0NPTExBQk9SQVRPUiA9ICcvYXBpL3Byb2JsZW0vZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3InO1xyXG4gICAgdmFyIEFQSV9ST1VURV9ORVdQUk9CTEVNID0gJy9hcGkvcHJvYmxlbS9uZXdwcm9ibGVtJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUUFJPQkxFTSA9ICcvYXBpL3Byb2JsZW0vZ2V0cHJvYmxlbSc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVFBST0JMRU1SRVBPUlQgPSAnL2FwaS9wcm9ibGVtL2dldHByb2JsZW1yZXBvcnQnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRDT0xMQUJPUkFUT1JTID0gJy9hcGkvcHJvYmxlbS9nZXRjb2xsYWJvcmF0b3JzJztcclxuICAgIHZhciBBUElfUk9VVEVfSU5WSVRFID0gJy9hcGkvcHJvYmxlbS9pbnZpdGUnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRPTklPTiA9ICcvYXBpL3Byb2JsZW0vZ2V0b25pb24nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRFVkFMVUFUSU9OID0gJy9hcGkvcHJvYmxlbS9nZXRldmFsdWF0aW9uJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUU0VNSU9USUNGUkFNRVdPUksgPSAnL2FwaS9wcm9ibGVtL2dldHNlbWlvdGljJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUQ0FSRiA9ICcvYXBpL3Byb2JsZW0vZ2V0Y2FyZic7XHJcbiAgICB2YXIgQVBJX1JPVVRFX1JFTU9WRVBST0JMRU0gPSAnL2FwaS9wcm9ibGVtL3JlbW92ZXByb2JsZW0nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9SRU1PVkVDT0xMQUJPUkFUT1IgPSAnL2FwaS9wcm9ibGVtL3JlbW92ZWNvbGxhYm9yYXRvcic7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVEhJU1RPUllDSEFUID0gJy9hcGkvcHJvYmxlbS9oaXN0b3J5Y2hhdCc7XHJcblxyXG4gICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgIG5ld3Byb2JsZW0gICAgICAgOiBuZXdwcm9ibGVtLFxyXG4gICAgICBnZXR1c2VycHJvYmxlbXMgIDogZ2V0dXNlcnByb2JsZW1zLFxyXG4gICAgICBnZXRwcm9ibGVtICAgICAgIDogZ2V0cHJvYmxlbSxcclxuICAgICAgZ2V0Y29sbGFib3JhdG9ycyA6IGdldGNvbGxhYm9yYXRvcnMsXHJcbiAgICAgIGludml0ZSAgICAgICAgICAgOiBpbnZpdGUsXHJcbiAgICAgIGdldG9uaW9uICAgICAgICAgOiBnZXRvbmlvbixcclxuICAgICAgZ2V0ZXZhbHVhdGlvbiAgICA6IGdldGV2YWx1YXRpb24sXHJcbiAgICAgIGdldHNlbWlvdGljICAgICAgOiBnZXRzZW1pb3RpYyxcclxuICAgICAgZ2V0Y2FyZiAgICAgICAgICA6IGdldGNhcmYsXHJcbiAgICAgIHJlbW92ZXByb2JsZW0gICAgOiByZW1vdmVwcm9ibGVtLFxyXG4gICAgICBnZXRwcm9ibGVtc2NvbGxhYm9yYXRvcjogZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3IsXHJcbiAgICAgIHJlbW92ZWNvbGxhYm9yYXRvcnMgOiByZW1vdmVjb2xsYWJvcmF0b3JzLFxyXG4gICAgICBnZXRoaXN0b3J5Y2hhdDogZ2V0aGlzdG9yeWNoYXQsXHJcbiAgICAgIGdldHByb2JsZW1yZXBvcnQgOiBnZXRwcm9ibGVtcmVwb3J0XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgIGZ1bmN0aW9uIG5ld3Byb2JsZW0oZGF0YSkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KEFQSV9ST1VURV9ORVdQUk9CTEVNLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRwcm9ibGVtcmVwb3J0KGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRQUk9CTEVNUkVQT1JUICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRwcm9ibGVtKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRQUk9CTEVNICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXR1c2VycHJvYmxlbXMoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNUyArICc/ZW1haWw9JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRjb2xsYWJvcmF0b3JzKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRDT0xMQUJPUkFUT1JTICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbnZpdGUoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KEFQSV9ST1VURV9JTlZJVEUsIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRvbmlvbihkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfR0VUT05JT04gKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldGV2YWx1YXRpb24gKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRFVkFMVUFUSU9OICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRzZW1pb3RpYyAoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFNFTUlPVElDRlJBTUVXT1JLICsgJz9pZHByb2JsZW09JyArIGRhdGEgKVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldGNhcmYoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVENBUkYgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlcHJvYmxlbShkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfUkVNT1ZFUFJPQkxFTSArICc/aWRwcm9ibGVtPScgKyBkYXRhICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3IoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNU0NPTExBQk9SQVRPUiArICc/ZW1haWw9JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVjb2xsYWJvcmF0b3JzKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9SRU1PVkVDT0xMQUJPUkFUT1IgKyAnP2lkcHJvYmxlbT0nICsgZGF0YS5pZHByb2JsZW0gKyAnJmVtYWlsPScgKyBkYXRhLmVtYWlsICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0aGlzdG9yeWNoYXQoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVEhJU1RPUllDSEFUICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI5LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3NlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlcicsc2VtaW90aWNmcmFtZXdvcmtDb250cm9sbGVyKTtcclxuXHJcbmZ1bmN0aW9uIHNlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlcihTb2NrZXQsJHdpbmRvdywgcHJvYmxlbVNlcnZpY2UsdG9hc3RBcHApe1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuaWRwcm9ibGVtID0gXCJcIjtcclxuICAgIHNlbGYuc2F2ZVNvY2lhbFdvcmxkID0gc2F2ZVNvY2lhbFdvcmxkO1xyXG4gICAgc2VsZi5zYXZlUHJhZ21hdGljID0gc2F2ZVByYWdtYXRpYztcclxuICAgIHNlbGYuc2F2ZVNlbWFudGljID0gc2F2ZVNlbWFudGljO1xyXG4gICAgc2VsZi5zYXZlU3ludGF0aWMgPSBzYXZlU3ludGF0aWM7XHJcbiAgICBzZWxmLnNhdmVFbXBpcmljYWwgPSBzYXZlRW1waXJpY2FsO1xyXG4gICAgc2VsZi5zYXZlUGh5c2ljYWwgPSBzYXZlUGh5c2ljYWw7XHJcbiAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrID0gXCJcIjtcclxuICAgIHNlbGYuaW5pdFNlbWlvdGljRnJhbWV3b3JrID0gaW5pdFNlbWlvdGljRnJhbWV3b3JrO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRTZW1pb3RpY0ZyYW1ld29yaygpe1xyXG4gICAgICAgIHNlbGYuaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0c2VtaW90aWMoc2VsZi5pZHByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2VtaW90aWNmcmFtZXdvcmsgPSBkYXRhLnNlbWlvdGljZnJhbWV3b3JrO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVTb2NpYWxXb3JsZCcsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yay5zb2NpYWx3b3JsZCA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlU29jaWFsV29ybGQodGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZVNvY2lhbFdvcmxkJywgb2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uVXBkYXRlUHJhZ21hdGljJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrLnByYWdtYXRpYyA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlUHJhZ21hdGljKHRleHQsZmxhZ1NhdmUpe1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZmxhZ1NhdmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCd1cGRhdGVQcmFnbWF0aWMnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVTZW1hbnRpYycsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yay5zZW1pb3RpY3JhbWV3b3JrID0gdGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVTZW1hbnRpYyh0ZXh0LGZsYWdTYXZlKXtcclxuICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZsYWdTYXZlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgndXBkYXRlU2VtYW50aWMnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVTeW50YXRpYycsIGZ1bmN0aW9uICh0ZXh0LGZsYWdTYXZlKSB7XHJcbiAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yay5zeW50YXRpYyA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlU3ludGF0aWModGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZVN5bnRhdGljJywgb2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uVXBkYXRlRW1waXJpY2FsJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrLmVtcGlyaWNhbCA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlRW1waXJpY2FsKHRleHQsZmxhZ1NhdmUpe1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZmxhZ1NhdmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCd1cGRhdGVFbXBpcmljYWwnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVQaHlzaWNhbCcsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yay5waHlzaWNhbCA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlUGh5c2ljYWwodGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZVBoeXNpY2FsJywgb2JqKTtcclxuICAgIH1cclxufVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI5LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuOyhmdW5jdGlvbih1bmRlZmluZWQpe1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdzdGFrZWhvbGRlckNvbnRyb2xsZXInLHN0YWtlaG9sZGVyQ29udHJvbGxlcik7XHJcblxyXG5cclxuZnVuY3Rpb24gc3Rha2Vob2xkZXJDb250cm9sbGVyKFNvY2tldCwkd2luZG93LHByb2JsZW1TZXJ2aWNlLCRtZERpYWxvZyx0b2FzdEFwcCl7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5pZHByb2JsZW0gPSBcIlwiO1xyXG4gICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBbXTtcclxuICAgIHNlbGYuc3Rha2Vob2xkZXIgPSBcIlwiO1xyXG4gICAgc2VsZi5pbnRpdE9uaW9uID0gaW50aXRPbmlvbjtcclxuICAgIHNlbGYubW92ZSA9IGZhbHNlO1xyXG4gICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgc2VsZi5zYXZlU3Rha2Vob2xkZXIgPSBzYXZlU3Rha2Vob2xkZXI7XHJcbiAgICBzZWxmLnNldE9wZW5FZGl0ID0gc2V0T3BlbkVkaXQ7XHJcbiAgICBzZWxmLmRlbFBvc3RJdCA9IGRlbFBvc3RJdDtcclxuICAgIHNlbGYuYWRkUG9zdEl0ID0gYWRkUG9zdEl0O1xyXG4gICAgc2VsZi5hY2VuZGUgPSBhY2VuZGU7XHJcbiAgICBzZWxmLmFwYWdhID0gYXBhZ2E7XHJcbiAgICBzZWxmLmxvY2FsY29kZSA9ICcnO1xyXG5cclxuICAgIGZ1bmN0aW9uIGludGl0T25pb24oKXtcclxuICAgICAgICBzZWxmLmlkcHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgIHNlbGYubG9jYWxjb2RlID0gICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvY2FsY29kZScpO1xyXG4gICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldG9uaW9uKHNlbGYuaWRwcm9ibGVtKVxyXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YWtlaG9sZGVyTGlzdCA9IGRhdGEuc3Rha2Vob2xkZXJzO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uU2F2ZScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxmLnN0YWtlaG9sZGVyTGlzdCwgZnVuY3Rpb24gKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFrZWhvbGRlci5faWQgPT0gZGF0YS5faWQpe1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuc3Rha2Vob2xkZXIgPSBkYXRhLnN0YWtlaG9sZGVyO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIubmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gZGF0YS5vcGVuRWRpdDtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnggPSBkYXRhLng7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci55ID0gZGF0YS55O1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuemluZGV4ID0gOTk5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVTdGFrZWhvbGRlcihzdGFrZWhvbGRlcikge1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvblNhdmUnLCBzdGFrZWhvbGRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uRWRpdCcsIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxmLnN0YWtlaG9sZGVyTGlzdCwgZnVuY3Rpb24gKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgIGlmKHN0YWtlaG9sZGVyLl9pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnppbmRleCA9IDk5OTk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXRPcGVuRWRpdChpZCl7XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE9uaW9uRWRpdCcsIGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25SZW1vdmUnLCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICB2YXIgc3Rha2Vob2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YWtlaG9sZGVyXCIgK3NlbGYuc3Rha2Vob2xkZXJMaXN0W2lkXS5faWQpO1xyXG4gICAgICAgIHN0YWtlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3Quc3BsaWNlKGlkLDEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlUG9zdEl0KGluZGV4LHN0YWtlaG9sZGVyKSB7XHJcblxyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXI6IHN0YWtlaG9sZGVyXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb25SZW1vdmUnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlbFBvc3RJdChldixpbmRleCxzdGFrZWhvbGRlcikge1xyXG4gICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxyXG4gICAgICAgICAgICAucGFyZW50KGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSlcclxuICAgICAgICAgICAgLnRpdGxlKCdEZXRldGUgU3Rha2Vob2xkZXI/JylcclxuICAgICAgICAgICAgLmNvbnRlbnQoJ1RpdGxlOiAnICsgc3Rha2Vob2xkZXIubmFtZSlcclxuICAgICAgICAgICAgLmFyaWFMYWJlbCgnUmVtb3ZlIFN0YWtlaG9sZGVyJylcclxuICAgICAgICAgICAgLm9rKCdZZXMhJylcclxuICAgICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsJylcclxuICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KTtcclxuICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZW1vdmVQb3N0SXQoaW5kZXgsc3Rha2Vob2xkZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RNb3ZlJywgZnVuY3Rpb24gKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgIGlmKHNlbGYubG9jYWxjb2RlICE9PSBzdGFrZWhvbGRlci5sb2NhbGNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFrZWhvbGRlcicrc3Rha2Vob2xkZXIuX2lkKS5zdHlsZS5sZWZ0ID0gc3Rha2Vob2xkZXIueDtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFrZWhvbGRlcicrc3Rha2Vob2xkZXIuX2lkKS5zdHlsZS50b3AgPSBzdGFrZWhvbGRlci55O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uQWRkJywgZnVuY3Rpb24gKHJldG9ybm8pIHtcclxuICAgICAgICBzZWxmLnN0YWtlaG9sZGVyTGlzdC5wdXNoKHJldG9ybm8pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkUG9zdEl0KGUsY2FtYWRhKSB7XHJcblxyXG4gICAgICAgIHZhciBuZXdTdGFrZWhvbGRlciA9XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcIm9uaW9ubGF5ZXJcIjogY2FtYWRhLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxyXG4gICAgICAgICAgICBcIm9wZW5FZGl0XCI6IHRydWUsXHJcbiAgICAgICAgICAgIFwieFwiOiBlLnBhZ2VYICsgJ3B4JyxcclxuICAgICAgICAgICAgXCJ5XCI6IChlLnBhZ2VZKSArICdweCcsXHJcbiAgICAgICAgICAgIFwiemluZGV4XCI6IDk5OTlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvbkFkZCcsIG5ld1N0YWtlaG9sZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhY2VuZGUoaWQpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVcIitpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICd0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsnKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlZ2VuZFwiK2lkKS5zZXRBdHRyaWJ1dGUoXCJvcGFjaXR5XCIsIFwiMC43XCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKS5zZXRBdHRyaWJ1dGUoXCJvcGFjaXR5XCIsIFwiMC43XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFwYWdhKGlkKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lXCIraWQpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAndGV4dC1kZWNvcmF0aW9uOiBub25lOycpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVnZW5kXCIraWQpLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIxLjBcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIxLjBcIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbn0pKHRoaXMpOyIsIlxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3N0YXJ0UHJvYmxlbUNvbnRyb2xsZXInLHN0YXJ0UHJvYmxlbUNvbnRyb2xsZXIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXJ0UHJvYmxlbUNvbnRyb2xsZXIoJG1kRGlhbG9nLCRzdGF0ZSxBdXRoLFNvY2tldCwgJHdpbmRvdywgcHJvYmxlbVNlcnZpY2UsdG9hc3RBcHAgKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLm5pY2tuYW1lID0gXCJcIjtcclxuICAgICAgICBzZWxmLnVzZXJpZCA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi51c2VyZW1haWwgPSBcIlwiO1xyXG4gICAgICAgIHNlbGYucHJvYmxlbUxpc3QgPSBbXTtcclxuICAgICAgICBzZWxmLnByb2JsZW1Db2xsYWJvcmF0b3JMaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5sb2dpbkluUHJvZ3Jlc3MgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYuZ2V0UHJvYmxlbXMgPSBnZXRQcm9ibGVtcztcclxuICAgICAgICBzZWxmLnJldm9tdmVQcm9ibGVtID0gcmV2b212ZVByb2JsZW07XHJcbiAgICAgICAgc2VsZi5zdGFydE5ld1Byb2JsZW0gPSBzdGFydE5ld1Byb2JsZW07XHJcbiAgICAgICAgc2VsZi5lZGl0UHJvYmxlbSA9IGVkaXRQcm9ibGVtO1xyXG4gICAgICAgIHNlbGYuZG9Mb2dvdXQgPSBkb0xvZ291dDtcclxuICAgICAgICBzZWxmLm5ld1Byb2JsZW0gPSBuZXdQcm9ibGVtO1xyXG4gICAgICAgIHNlbGYuZWRpdFByb2ZpbGUgPSBlZGl0UHJvZmlsZTtcclxuICAgICAgICBzZWxmLnBob3RvO1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJvYmxlbXMoKXtcclxuICAgICAgICAgICAgc2VsZi51c2VyaWQgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyaWQnKTtcclxuICAgICAgICAgICAgc2VsZi5uaWNrbmFtZSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25pY2tuYW1lJyk7XHJcbiAgICAgICAgICAgIHNlbGYudXNlcmVtYWlsID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcmVtYWlsJyk7XHJcbiAgICAgICAgICAgIHNlbGYucGhvdG8gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwaG90bycpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHVzZXJwcm9ibGVtcyhzZWxmLnVzZXJlbWFpbClcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBkYXRhLnByb2JsZW1zLmxlbmd0aDsgaSsrICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uID0gZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbi5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZyxcIlwiKS5zdWJzdHJpbmcoMCw0NjApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJvYmxlbUxpc3QgPSBkYXRhLnByb2JsZW1zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHByb2JsZW1zY29sbGFib3JhdG9yKHNlbGYudXNlcmVtYWlsKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGRhdGEucHJvYmxlbXMubGVuZ3RoOyBpKysgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvYmxlbXNbaV0uZGVzY3JpcHRpb24gPSBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uLnJlcGxhY2UoLyg8KFtePl0rKT4pL2lnLFwiXCIpLnN1YnN0cmluZygwLDQ2MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm9ibGVtQ29sbGFib3JhdG9yTGlzdCA9IGRhdGEucHJvYmxlbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmxvZ2luSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlUHJvYmxlbShwcm9ibGVtaWQpe1xyXG4gICAgICAgICAgICBwcm9ibGVtU2VydmljZS5yZW1vdmVwcm9ibGVtKHByb2JsZW1pZClcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZWxmLnByb2JsZW1MaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYucHJvYmxlbUxpc3RbaV0uX2lkID09IHByb2JsZW1pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm9ibGVtTGlzdC5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJldm9tdmVQcm9ibGVtKGV2LHByb2JsZW0pIHtcclxuICAgICAgICAgICAgLy8gQXBwZW5kaW5nIGRpYWxvZyB0byBkb2N1bWVudC5ib2R5IHRvIGNvdmVyIHNpZGVuYXYgaW4gZG9jcyBhcHBcclxuICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgICAgICAucGFyZW50KGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSlcclxuICAgICAgICAgICAgICAgIC50aXRsZSgnRGV0ZXRlIFByb2JsZW0/JylcclxuICAgICAgICAgICAgICAgIC5jb250ZW50KCdUaXRsZTogJyArIHByb2JsZW0udGl0bGUpXHJcbiAgICAgICAgICAgICAgICAuYXJpYUxhYmVsKCdSZW1vdmUgUHJvYmxlbScpXHJcbiAgICAgICAgICAgICAgICAub2soJ0Rlc2VqbyByZW1vdmVyIScpXHJcbiAgICAgICAgICAgICAgICAuY2FuY2VsKCdDYW5jZWwnKVxyXG4gICAgICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KTtcclxuICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZVByb2JsZW0ocHJvYmxlbS5faWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0TmV3UHJvYmxlbShuZXdwcm9ibGVtKXtcclxuICAgICAgICAgICAgbmV3cHJvYmxlbS51c2VyaWQgPSBzZWxmLnVzZXJpZDtcclxuXHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLm5ld3Byb2JsZW0obmV3cHJvYmxlbSlcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lZGl0UHJvYmxlbShkYXRhLnByb2JsZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGVkaXRQcm9ibGVtKHByb2JsZW0pIHtcclxuICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2JsZW1pZFwiLHByb2JsZW0uX2lkKTtcclxuICAgICAgICAgICAgdmFyIGluaXRzb2NrZXRwcm9ibGVtID0ge1xyXG4gICAgICAgICAgICAgICAgXCJpZHByb2JsZW1cIjpwcm9ibGVtLl9pZCxcclxuICAgICAgICAgICAgICAgIFwibmlja25hbWVcIjogc2VsZi5uaWNrbmFtZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBTb2NrZXQuZW1pdCgnaW5pdFByb2JsZW0nLCBpbml0c29ja2V0cHJvYmxlbSk7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygncHJvYmxlbS5zdGFrZWhvbGRlcnMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvTG9nb3V0KCkge1xyXG4gICAgICAgICAgICBBdXRoLmxvZ291dCgpO1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2luaXQubG9naW4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZWRpdFByb2ZpbGUoKSB7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygncHJvZmlsZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbmV3UHJvYmxlbShldikge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IERpYWxvZ0NvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9uZXdwcm9ibGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRGlhbG9nQ29udHJvbGxlcigkc2NvcGUsICRmaWx0ZXIsICRtZERpYWxvZykge1xyXG4gICAgICAgICAgICAkc2NvcGUuYXJ0aWZhY3RMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZE5ld1Byb2JsZW0gPSBmdW5jdGlvbihwcm9ibGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLmFydGlmYWN0TGlzdC5sZW5ndGggPCAxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKCRmaWx0ZXIoJ3RyYW5zbGF0ZScpKCdMQUJFTF9DSE9JQ0VfQVJUSUZBQ1RTJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2JsZW0uYXJ0aWZhY3RzID0gICRzY29wZS5hcnRpZmFjdExpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFydE5ld1Byb2JsZW0ocHJvYmxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICRzY29wZS5hZGRBcnRpZmFjdCA9IGZ1bmN0aW9uIGFkZEFydGlmYWN0KHZhbG9yKXtcclxuICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCAkc2NvcGUuYXJ0aWZhY3RMaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5hcnRpZmFjdExpc3RbaV0gPT09IHZhbG9yKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXJ0aWZhY3RMaXN0LnNwbGljZShpLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXJ0aWZhY3RMaXN0LnB1c2godmFsb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgIH1cclxufSkoKTtcclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjIvMDcvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3ZhbHVlSWRlbnRpZmljYXRpb25GcmFtZUNvbnRyb2xsZXInLCB2YWx1ZUlkZW50aWZpY2F0aW9uRnJhbWVDb250cm9sbGVyKTtcclxuXHJcbmZ1bmN0aW9uIHZhbHVlSWRlbnRpZmljYXRpb25GcmFtZUNvbnRyb2xsZXIoJHdpbmRvdyxwcm9ibGVtU2VydmljZSx0b2FzdEFwcCxTb2NrZXQpe1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gdHJ1ZTtcclxuICAgIHNlbGYuaWRQcm9ibGVtID0gXCJcIjtcclxuICAgIHNlbGYudXNlcmVtYWlsID0gXCJcIjtcclxuICAgIHNlbGYubmV3dmFsdWVzID0gXCJcIjtcclxuICAgIHNlbGYuaW5pdFZhbHVlSWRlbnRpZmljYXRpb25GcmFtZSA9IGluaXRWYWx1ZUlkZW50aWZpY2F0aW9uRnJhbWU7XHJcbiAgICBzZWxmLnNldFN1Z2dlc3Rpb25TaG93ID0gc2V0U3VnZ2VzdGlvblNob3c7XHJcbiAgICBzZWxmLmxlYXZlU3VnZ2VzdGlvblNob3cgPSBsZWF2ZVN1Z2dlc3Rpb25TaG93O1xyXG4gICAgc2VsZi5yZW1vdmVWYWx1ZUlkZW50aWNhdGlvbiA9IHJlbW92ZVZhbHVlSWRlbnRpY2F0aW9uO1xyXG4gICAgc2VsZi5zZXRWYWx1ZUlkZW50aWNhdGlvbiA9IHNldFZhbHVlSWRlbnRpY2F0aW9uO1xyXG4gICAgc2VsZi5zdWdlc3Rpb25WYWx1ZXMgPSBcIlwiO1xyXG4gICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBvbmlvbmxheWVyOiBcIkNvbW11bml0eVwiLFxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlcnM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9uaW9ubGF5ZXI6IFwiTWFya2V0XCIsXHJcbiAgICAgICAgICAgIHN0YWtlaG9sZGVyczogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb25pb25sYXllcjogXCJTb3VyY2VcIixcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXJzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBvbmlvbmxheWVyOiBcIkNvbnRyaWJ1dGlvblwiLFxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlcnM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9uaW9ubGF5ZXI6IFwiVGVjaG5pY29cIixcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXJzOiBbXVxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbiAgICBzZWxmLnN1Z2VzdGlvblZhbHVlc0FycmF5ID0gW1xyXG4gICAgICAgICdBY2Vzc2liaWxpZGFkZScsJ0FkYXB0YWJpbGlkYWRlJywnRXN0w6l0aWNhJywnQXV0b25vbWlhJywgJ0Rpc3BvbmliaWxpZGFkZScsICdDb25zY2nDqm5jaWEnLCAnQ29sYWJvcmHDp8OjbycsXHJcbiAgICAgICAgJ0NvbnZlcnNhw6fDo28nLCAnRW1vw6fDo28gZSBBZmV0bycsICdHcnVwb3MnLCAnSWRlbnRpZGFkZScsICdDb25zZW50aW1lbnRvIGluZm9ybWFkbycsICdNZXRhLWNvbXVuaWNhw6fDo28nLCAnTm9ybWFzJyxcclxuICAgICAgICAnT2JqZXRvJywgJ1BvcnRhYmlsaWRhZGUnLCAnUHJlc2Vuw6dhJywgJ1ByaXZhY2lkYWRlJywgJ1Byb3ByaWVkYWRlJywgJ1JlY2lwcm9jaWRhZGUsIFJlbGFjaW9uYW1lbnRvLCBSZXB1dGHDp8OjbycsXHJcbiAgICAgICAgJ0VzY2FsYWJpbGlkYWRlJywgJ1NlZ3VyYW7Dp2EnLCAnQ29tcGFydGlsaGFtZW50bycsICdDb25maWFuw6dhJywgJ1VzYWJpbGlkYWRlJywgJ1Zpc2liaWxpZGFkZSddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRWYWx1ZUlkZW50aWZpY2F0aW9uRnJhbWUoKXtcclxuICAgICAgICBzZWxmLmlkcHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldG9uaW9uKHNlbGYuaWRwcm9ibGVtKVxyXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN0YWtlaG9sZGVycy5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgayA9IDE7IGsgPCBzZWxmLnN1Z2VzdGlvblZhbHVlc0FycmF5Lmxlbmd0aDsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN1Z2VzdGlvblZhbHVlcyArPSBzZWxmLnN1Z2VzdGlvblZhbHVlc0FycmF5W2tdICsgIFwiLCBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdWdlc3Rpb25WYWx1ZXNbc2VsZi5zdWdlc3Rpb25WYWx1ZXNBcnJheVtzZWxmLnN1Z2VzdGlvblZhbHVlc0FycmF5Lmxlbmd0aC0xXV0gKyAnLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZGF0YS5zdGFrZWhvbGRlcnMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaiA9IDA7IGogPCBzZWxmLnN0YWtlaG9sZGVyTGlzdC5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFrZWhvbGRlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZCA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLl9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uaW9ubGF5ZXIgOiBkYXRhLnN0YWtlaG9sZGVyc1tpXS5vbmlvbmxheWVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzIDogZGF0YS5zdGFrZWhvbGRlcnNbaV0udmFsdWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkVkaXQgOiBkYXRhLnN0YWtlaG9sZGVyc1tpXS5vcGVuRWRpdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggOiBkYXRhLnN0YWtlaG9sZGVyc1tpXS54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZXMgOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdGFrZWhvbGRlcnNbaV0ub25pb25sYXllciA9PSBzZWxmLnN0YWtlaG9sZGVyTGlzdFtqXS5vbmlvbmxheWVyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0W2pdLnN0YWtlaG9sZGVycy5wdXNoKHN0YWtlaG9sZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uU2F2ZScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuc3Rha2Vob2xkZXJMaXN0LCBmdW5jdGlvbiAoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgaWYgKHN0YWtlaG9sZGVyLl9pZCA9PSBkYXRhLl9pZCl7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5zdGFrZWhvbGRlciA9IGRhdGEuc3Rha2Vob2xkZXI7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIub3BlbkVkaXQgPSBkYXRhLm9wZW5FZGl0O1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIueCA9IGRhdGEueDtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnkgPSBkYXRhLnk7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5uZXdWYWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0U3VnZ2VzdGlvblNob3coc3Rha2Vob2xkZXIpe1xyXG4gICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsZWF2ZVN1Z2dlc3Rpb25TaG93KHN0YWtlaG9sZGVyKXtcclxuICAgICAgICBzdGFrZWhvbGRlci5vcGVuRWRpdCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVZhbHVlSWRlbnRpY2F0aW9uKHZhbHVlLHN0YWtlaG9sZGVyKXtcclxuICAgICAgICB2YXIgbmV3TGlzdCA9IFtdO1xyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzdGFrZWhvbGRlci52YWx1ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBpZihzdGFrZWhvbGRlci52YWx1ZXNbaV0gIT0gdmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHN0YWtlaG9sZGVyLnZhbHVlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3Rha2Vob2xkZXIudmFsdWVzID0gbmV3TGlzdDtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb25TYXZlJywgc3Rha2Vob2xkZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldFZhbHVlSWRlbnRpY2F0aW9uKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgaWYoKHN0YWtlaG9sZGVyLm5ld1ZhbHVlcyA9PT0gXCJcIikgfHwgKHN0YWtlaG9sZGVyLm5ld1ZhbHVlcyA9PT0gdW5kZWZpbmVkKSl7XHJcbiAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZSgnVmFsb3IgbsOjbyBlc3BlY2lmaWNhZG8uJyk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZXNMaXN0ID0gc3Rha2Vob2xkZXIubmV3VmFsdWVzLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgdmFsdWVzTGlzdC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBpZihmaW5kVmFsdWUoc3Rha2Vob2xkZXIudmFsdWVzLCB2YWx1ZXNMaXN0W2ldKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiRHVwbGljYXRlIHZhbHVlOiBcIiArIHZhbHVlc0xpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIudmFsdWVzLnB1c2godmFsdWVzTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3Rha2Vob2xkZXIubmV3VmFsdWVzID0gXCJcIjtcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXIub3BlbkVkaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE9uaW9uU2F2ZScsIHN0YWtlaG9sZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZpbmRWYWx1ZShsaXN0LCB2YWx1ZSl7XHJcbiAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgaWYodmFsdWUgPT09IGxpc3RbaV0pe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI4LzA3LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdwcm9maWxlQ29udHJvbGxlcicscHJvZmlsZUNvbnRyb2xsZXIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHByb2ZpbGVDb250cm9sbGVyKCR3aW5kb3csJHN0YXRlLCAkc2NvcGUsc2lnbnVwU2VydmljZSl7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuc3RhcnRQcm9maWxlID0gc3RhcnRQcm9maWxlO1xyXG4gICAgICAgIHNlbGYudXBsb2FkSW5Qcm9ncmVzcyA9IHRydWU7XHJcbiAgICAgICAgc2VsZi51cGxvYWRQcm9ncmVzcyA9IDA7XHJcbiAgICAgICAgc2VsZi51c2VyaWQ7XHJcbiAgICAgICAgc2VsZi5zYXZlUGhvdG8gPSBzYXZlUGhvdG87XHJcbiAgICAgICAgc2VsZi5zeXN0ZW1SZXR1cm4gPSBzeXN0ZW1SZXR1cm47XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN5c3RlbVJldHVybigpe1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3N0YXJ0cHJvYmxlbScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5teUltYWdlPScnO1xyXG4gICAgICAgIHNlbGYubXlDcm9wcGVkSW1hZ2U9Jyc7XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVGaWxlU2VsZWN0ID0gZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgICAgICAgIHZhciBmaWxlID0gZXZ0LmN1cnJlbnRUYXJnZXQuZmlsZXNbMF07XHJcbiAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigkc2NvcGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5teUltYWdlID0gZXZ0LnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZpbGVJbnB1dCcpKS5vbignY2hhbmdlJyxoYW5kbGVGaWxlU2VsZWN0KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc3RhcnRQcm9maWxlKCl7XHJcbiAgICAgICAgICAgIHNlbGYudXNlcmlkID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJpZFwiKTtcclxuICAgICAgICAgICAgaWYoc2VsZi51c2VyaWQgIT09IHVuZGVmaW5lZCl7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNhdmVQaG90byhteWltYWdlKXtcclxuICAgICAgICAgICAgdmFyIHVzZXJQaG90byA9e1xyXG4gICAgICAgICAgICAgICAgdXNlcmlkIDogJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJpZFwiKSxcclxuICAgICAgICAgICAgICAgIHBob3RvIDogbXlpbWFnZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzaWdudXBTZXJ2aWNlLnVwbG9hZFBob3RvKHVzZXJQaG90bylcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBob3RvXCIsbXlpbWFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIi0tLS0tXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuXHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdzaWdudXBDb250cm9sbGVyJywgc2lnbnVwQ29udHJvbGxlcik7XHJcbiAgICBzaWdudXBDb250cm9sbGVyLiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnLCckd2luZG93Jywnc2lnbnVwU2VydmljZScsJyRzdGF0ZScsJ3RvYXN0QXBwJywnQXV0aFRva2VuJywnQXV0aCcsJyRmaWx0ZXInLCckc3RhdGVQYXJhbXMnXTtcclxuXHJcbiAgZnVuY3Rpb24gc2lnbnVwQ29udHJvbGxlcigkdHJhbnNsYXRlLCAkd2luZG93LCBzaWdudXBTZXJ2aWNlLCRzdGF0ZSx0b2FzdEFwcCxBdXRoVG9rZW4sQXV0aCwkZmlsdGVyLCRzdGF0ZVBhcmFtcyl7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLm1lc3NhZ2UgID0gJyc7XHJcbiAgICBzZWxmLnNhdmVVc2VyICAgPSBzYXZlVXNlcjtcclxuICAgIHNlbGYucmVzY3VlUGFzc3dvcmQgPSByZXNjdWVQYXNzd29yZDtcclxuICAgIHNlbGYuY2hhbmdlUGFzc3dvcmQgPSBjaGFuZ2VQYXNzd29yZDtcclxuICAgIHNlbGYuc2V0TGFuZyA9IHNldExhbmc7XHJcbiAgICBzZWxmLmxvZ2luSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVVc2VyKHVzZXIpIHtcclxuICAgICAgc2lnbnVwU2VydmljZS5jcmVhdGUodXNlcilcclxuICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZSgkZmlsdGVyKCd0cmFuc2xhdGUnKSgnV0VMQ09NRV9TWVNURU0nKSArIHVzZXIubmlja25hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdpbml0LmxvZ2luJyk7XHJcbiAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJFbWFpbCBKw6EgY2FkYXN0cmFkb1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBzZXRMYW5nKGxhbmdLZXkpIHtcclxuICAgICAgICAgICR0cmFuc2xhdGUudXNlKGxhbmdLZXkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiByZXNjdWVQYXNzd29yZCh1c2VyRW1haWwpe1xyXG4gICAgICAgICAgc2lnbnVwU2VydmljZS5yZXNjdWVQYXNzd29yZCh1c2VyRW1haWwpXHJcbiAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIkVtYWlsIGNvbSBpbnN0cnXDp8O1ZXMgZW52aWFkbyBwYXJhIFwiICsgdXNlckVtYWlsLmVtYWlsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnaW5pdC5sb2dpbicpO1xyXG4gICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIkVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNoYW5nZVBhc3N3b3JkKHVzZXIpe1xyXG4gICAgICAgICAgc2lnbnVwU2VydmljZS5jaGFuZ2VQYXNzd29yZCh1c2VyKVxyXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJTZW5oYSBhbHRlcmFkYSBjb20gc3VjZXNzby4gRmHDp2EgbG9naW4gY29tIGEgbm92YSBzZW5oYS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2luaXQubG9naW4nKTtcclxuICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJFcnJvclwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5mYWN0b3J5KCdzaWdudXBTZXJ2aWNlJywgc2lnbnVwU2VydmljZSk7XHJcblxyXG4gIHNpZ251cFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCckbG9jYXRpb24nXTtcclxuXHJcbiAgZnVuY3Rpb24gc2lnbnVwU2VydmljZSgkaHR0cCwkbG9jYXRpb24pIHtcclxuXHJcbiAgICB2YXIgQVBJX1JPVVRFX1VTRVIgPSAnL2FwaS9zaWdudXAvJztcclxuICAgIHZhciBBUElfUk9VVEVfUkVTQ1VFUEFTU1dPUkQgPSAnL2FwaS9yZXNjdWVwYXNzd2QvJztcclxuICAgIHZhciBBUElfUk9VVEVfU0VUTkVXUEFTU1dPUkQgPSAnL2FwaS9yZXNjdWVwYXNzd2QvbmV3cGFzc3dkLyc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX1VQREFURVBIT1RPID0gJy9hcGkvcHJvZmlsZS9waG90by8nO1xyXG5cclxuXHJcbiAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgY3JlYXRlICAgICAgICAgOiBjcmVhdGUsXHJcbiAgICAgIHJlc2N1ZVBhc3N3b3JkIDogcmVzY3VlUGFzc3dvcmQsXHJcbiAgICAgIGNoYW5nZVBhc3N3b3JkIDogY2hhbmdlUGFzc3dvcmQsXHJcbiAgICAgIHVwbG9hZFBob3RvOiB1cGxvYWRQaG90b1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KEFQSV9ST1VURV9VU0VSLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZXNjdWVQYXNzd29yZChkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX1JFU0NVRVBBU1NXT1JELCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjaGFuZ2VQYXNzd29yZChkYXRhKXtcclxuICAgICAgdmFyIG15dG9rZW5VUkwgPSAkbG9jYXRpb24uc2VhcmNoKCk7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX1NFVE5FV1BBU1NXT1JEICsgJz9teXRva2VuPScgKyBteXRva2VuVVJMLm15dG9rZW4rJyZwYXNzd29yZD0nK2RhdGEucGFzc3dvcmQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwbG9hZFBob3RvKGRhdGEpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX1VQREFURVBIT1RPLCBkYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI1LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb25maWcoYXBwQ29uZmlnKTtcclxuXHJcbiAgICBhcHBDb25maWcuJGluamVjdCA9IFsnJG1kVGhlbWluZ1Byb3ZpZGVyJywnJGxvY2F0aW9uUHJvdmlkZXInXTtcclxuXHJcbiAgIC8qIGZ1bmN0aW9uIGFwcENvbmZpZyAoJG1kVGhlbWluZ1Byb3ZpZGVyLCRsb2NhdGlvblByb3ZpZGVyKSB7XHJcblxyXG4gICAgICAgICAvLyRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcclxuICAgICAgICB2YXIgY3VzdG9tR3JlZW5NYXAgPSAkbWRUaGVtaW5nUHJvdmlkZXIuZXh0ZW5kUGFsZXR0ZSgndGVhbCcsIHtcclxuICAgICAgICAgICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcclxuICAgICAgICAgICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6IFsnNTAnXSxcclxuICAgICAgICAgICAgJzUwJzogJ0UwRjJGMSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLmRlZmluZVBhbGV0dGUoJ2N1c3RvbUdyZWVuJywgY3VzdG9tR3JlZW5NYXApO1xyXG4gICAgICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpXHJcbiAgICAgICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgnY3VzdG9tR3JlZW4nLCB7XHJcbiAgICAgICAgICAgICAgICAnZGVmYXVsdCc6ICc1MDAnLFxyXG4gICAgICAgICAgICAgICAgJ2h1ZS0xJzogJzUwJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYWNjZW50UGFsZXR0ZSgndGVhbCcpO1xyXG4gICAgICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnaW5wdXQnLCAnZGVmYXVsdCcpXHJcbiAgICAgICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgnZ3JlZW4nKTtcclxuXHJcbiAgICB9OyovXHJcblxyXG4gICAgZnVuY3Rpb24gYXBwQ29uZmlnKCRtZFRoZW1pbmdQcm92aWRlcikge1xyXG4gICAgICAgIC8vIEV4dGVuZCB0aGUgcmVkIHRoZW1lIHdpdGggYSBmZXcgZGlmZmVyZW50IGNvbG9yc1xyXG4gICAgICAgIHZhciBuZW9uUmVkTWFwID0gJG1kVGhlbWluZ1Byb3ZpZGVyLmV4dGVuZFBhbGV0dGUoJ3RlYWwnLCB7XHJcbiAgICAgICAgICAgICc1MCc6ICdFMEYyRjEnLFxyXG4gICAgICAgICAgICAnMTAwJzogJ0IyREZEQicsXHJcbiAgICAgICAgICAgICcyMDAnOiAnODBDQkM0JyxcclxuICAgICAgICAgICAgJzMwMCc6ICc0REI2QUMnLFxyXG4gICAgICAgICAgICAnNDAwJzogJzI2QTY5QScsXHJcbiAgICAgICAgICAgICc1MDAnOiAnMDA5Njg4JyxcclxuICAgICAgICAgICAgJzYwMCc6ICcwMDg5N0InLFxyXG4gICAgICAgICAgICAnNzAwJzogJzAwNzk2QicsXHJcbiAgICAgICAgICAgICc4MDAnOiAnMDA2OTVDJyxcclxuICAgICAgICAgICAgJzkwMCc6ICcwMDRENDAnLFxyXG4gICAgICAgICAgICAnQTEwMCc6ICdBN0ZGRUInLFxyXG4gICAgICAgICAgICAnQTIwMCc6ICc2NEZGREEnLFxyXG4gICAgICAgICAgICAnQTQwMCc6ICcxREU5QjYnLFxyXG4gICAgICAgICAgICAnQTcwMCc6ICcwMEJGQTUnLFxyXG4gICAgICAgICAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLCAgICAvLyB3aGV0aGVyLCBieSBkZWZhdWx0LCB0ZXh0IChjb250cmFzdClcclxuICAgICAgICAgICAgLy8gb24gdGhpcyBwYWxldHRlIHNob3VsZCBiZSBkYXJrIG9yIGxpZ2h0XHJcbiAgICAgICAgICAgICdjb250cmFzdERhcmtDb2xvcnMnOiBbJzUwJywgJzEwMCcsIC8vaHVlcyB3aGljaCBjb250cmFzdCBzaG91bGQgYmUgJ2RhcmsnIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICcyMDAnLCAnMzAwJywgJzQwMCcsICdBMTAwJ10sXHJcbiAgICAgICAgICAgICdjb250cmFzdExpZ2h0Q29sb3JzJzogdW5kZWZpbmVkXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBjb2xvciBwYWxldHRlIG1hcCB3aXRoIHRoZSBuYW1lIDxjb2RlPm5lb25SZWQ8L2NvZGU+XHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLmRlZmluZVBhbGV0dGUoJ3RlYWwnLCBuZW9uUmVkTWFwKTtcclxuICAgICAgICAvLyBVc2UgdGhhdCB0aGVtZSBmb3IgdGhlIHByaW1hcnkgaW50ZW50aW9uc1xyXG4gICAgICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpXHJcbiAgICAgICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgndGVhbCcpXHJcbiAgICAgICAgICAgIC5hY2NlbnRQYWxldHRlKCdncmVlbicpO1xyXG4gICAgfVxyXG5cclxuXHJcbn0pKCk7IiwiXHJcbihmdW5jdGlvbigpe1xyXG5cclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXV0aFNlcnZpY2UnLCBbXSlcclxuXHRcdC5mYWN0b3J5KCdBdXRoJywgZnVuY3Rpb24oJGh0dHAsICRxLCBBdXRoVG9rZW4pIHtcclxuXHRcdFx0dmFyIGF1dGhGYWN0b3J5ID0ge307XHJcblx0XHRcdGF1dGhGYWN0b3J5LmxvZ2luID0gZnVuY3Rpb24oZW1haWwsIHBhc3N3b3JkKSB7XHJcblx0XHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvbG9naW4nLCB7XHJcblx0XHRcdFx0XHRlbWFpbDogZW1haWwsXHJcblx0XHRcdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG5cdFx0XHRcdFx0XHRBdXRoVG9rZW4uc2V0VG9rZW4oZGF0YS50b2tlbik7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRhdXRoRmFjdG9yeS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRBdXRoVG9rZW4uc2V0VG9rZW4oKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGF1dGhGYWN0b3J5LmlzTG9nZ2VkSW4gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZihBdXRoVG9rZW4uZ2V0VG9rZW4oKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGF1dGhGYWN0b3J5LmdldFVzZXIgPSBmdW5jdGlvbihpZCkge1xyXG5cdFx0XHRcdGlmKEF1dGhUb2tlbi5nZXRUb2tlbigpKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL21lLz91c2VyaWQ9JyArIGlkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJHEucmVqZWN0KHttZXNzYWdlOiBcIlVzZXIgaGFzIG5vIHRva2VuXCJ9KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9O1xyXG5cdFx0XHRyZXR1cm4gYXV0aEZhY3Rvcnk7XHJcblx0XHR9KVxyXG5cdFx0LmZhY3RvcnkoJ0F1dGhUb2tlbicsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcclxuXHJcblx0XHRcdHZhciBhdXRoVG9rZW5GYWN0b3J5ID0ge307XHJcblxyXG5cdFx0XHRhdXRoVG9rZW5GYWN0b3J5LmdldFRva2VuID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRhdXRoVG9rZW5GYWN0b3J5LnNldFRva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcclxuXHJcblx0XHRcdFx0aWYgKHRva2VuKSB7XHJcblx0XHRcdFx0XHQkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHRva2VuKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdCR3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rva2VuJyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fTtcclxuXHRcdFx0cmV0dXJuIGF1dGhUb2tlbkZhY3Rvcnk7XHJcblx0XHR9KVxyXG5cdFx0LmZhY3RvcnkoJ0F1dGhJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKCRxLCAkbG9jYXRpb24sIEF1dGhUb2tlbikge1xyXG5cdFx0XHR2YXIgaW50ZXJjZXB0b3JGYWN0b3J5ID0ge307XHJcblx0XHRcdGludGVyY2VwdG9yRmFjdG9yeS5yZXF1ZXN0ID0gZnVuY3Rpb24oY29uZmlnKSB7XHJcblx0XHRcdFx0dmFyIHRva2VuID0gQXV0aFRva2VuLmdldFRva2VuKCk7XHJcblx0XHRcdFx0aWYodG9rZW4pIHtcclxuXHRcdFx0XHRcdGNvbmZpZy5oZWFkZXJzWyd4LWFjY2Vzcy10b2tlbiddID0gdG9rZW47XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBjb25maWc7XHJcblx0XHRcdH07XHJcblx0XHRcdHJldHVybiBpbnRlcmNlcHRvckZhY3Rvcnk7XHJcblx0XHR9KTtcclxufSkoKTsiLCJcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdEcm9wRFNDJyxbXSlcclxuICAgIC5kaXJlY3RpdmUoJ2RyYWdnYWJsZScsIGZ1bmN0aW9uKCRkb2N1bWVudCxTb2NrZXQsJHdpbmRvdykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xyXG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50LnRhcmdldC5pZC5zdWJzdHJpbmcoMCwxMSkgPT0gXCJzdGFrZWhvbGRlclwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgZHJhZ2dpbmcgb2Ygc2VsZWN0ZWQgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnN0YWtlaG9sZGVyLmxvY2FsY29kZSA9ICAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsb2NhbGNvZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5iaW5kKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5iaW5kKCdtb3VzZXVwJywgbW91c2V1cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1vdXNlbW92ZShldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGlkX2RpdiA9IGV2ZW50LnRhcmdldC5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChpZF9kaXYgPT0gJ3N2ZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZF9kaXYgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3Rha2Vob2xkZXIub25pb25sYXllciA9IGlkX2RpdjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICB5ID0gZXZlbnQucGFnZVk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB4ID0gZXZlbnQucGFnZVg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogeSArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogIHggKyAncHgnXHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIC8qU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uUG9zaXRpb24nLCBmdW5jdGlvbiAoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogc3Rha2Vob2xkZXIueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogIHN0YWtlaG9sZGVyLnhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIH0pOyovXHJcbiAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zdGFrZWhvbGRlci54ID0geCArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zdGFrZWhvbGRlci55ID0geSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvL1NvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvblBvc2l0aW9uJywgc2NvcGUuc3Rha2Vob2xkZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1vdXNldXAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQudW5iaW5kKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LnVuYmluZCgnbW91c2V1cCcsIG1vdXNldXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE1vdmUnLCBzY29wZS5zdGFrZWhvbGRlcik7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgfSk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGplc3VzIG9uIDIxLzAzLzIwMTYuXHJcbiAqL1xyXG47KGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHBSeERyYWcnLCBbJ3J4J10pXHJcbiAgICAgICAgLmRpcmVjdGl2ZSgncnhkcmFnZ2FibGUnLCBmdW5jdGlvbigkZG9jdW1lbnQsICR3aW5kb3csIHJ4LCBTb2NrZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0aHJlZSBtYWpvciBldmVudHNcclxuICAgICAgICAgICAgICAgIHZhciBsb2NhbGNvZGUgPSAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9jYWxjb2RlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW91c2V1cCAgID0gcnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZWxlbWVudCwgICAnbW91c2V1cCcpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vdXNlbW92ZSA9IHJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KCRkb2N1bWVudCwgJ21vdXNlbW92ZScpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vdXNlZG93biA9IHJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGVsZW1lbnQsICAgJ21vdXNlZG93bicpLm1hcChmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgb2Zmc2V0cyB3aGVuIG1vdXNlIGRvd25cclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGV2ZW50LmNsaWVudFggLSBlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogIGV2ZW50LmNsaWVudFkgLSBlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tYmluZSBtb3VzZSBkb3duIHdpdGggbW91c2UgbW92ZSB1bnRpbCBtb3VzZSB1cFxyXG4gICAgICAgICAgICAgICAgdmFyIG1vdXNlZHJhZyA9IG1vdXNlZG93bi5zZWxlY3RNYW55KGZ1bmN0aW9uKGltYWdlT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vdXNlbW92ZS5tYXAoZnVuY3Rpb24gKHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgb2Zmc2V0cyBmcm9tIG1vdXNlIGRvd24gdG8gbW91c2UgbW92ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHBvcy5jbGllbnRYIC0gaW1hZ2VPZmZzZXQubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogIHBvcy5jbGllbnRZIC0gaW1hZ2VPZmZzZXQudG9wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGFrZVVudGlsKG1vdXNldXApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbW91c2VkcmFnLnN1YnNjcmliZSAoZnVuY3Rpb24gKHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBwb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKHt0b3A6IHBvcy50b3AgKyAncHgnLCBsZWZ0OiBwb3MubGVmdCArICdweCd9KTtcclxuICAgICAgICAgICAgICAgICAgICBwb3MubG9jYWxjb2RlID0gbG9jYWxjb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RNb3ZlJyxwb3MpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuXHJcbn0uY2FsbCh0aGlzKSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyNS8wNi8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsbG9naW5Db250cm9sbGVyKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbG9naW5Db250cm9sbGVyKCR0cmFuc2xhdGUsICRyb290U2NvcGUsICRzdGF0ZSwgQXV0aCwgJHdpbmRvdywgJGZpbHRlciwgdG9hc3RBcHApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLmluUHJvY2Vzc2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLnNldExhbmcgPSBzZXRMYW5nO1xyXG4gICAgICAgICAgICBzZWxmLmRvTG9nb3V0ID0gZG9Mb2dvdXQ7XHJcbiAgICAgICAgICAgIHNlbGYuZG9Mb2dpbiA9IGRvTG9naW47XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRMYW5nKGxhbmdLZXkpIHtcclxuICAgICAgICAgICAgICAgICAkdHJhbnNsYXRlLnVzZShsYW5nS2V5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TG9jYWxDb2RlKCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICBzZWxmLmxvZ2dlZEluID0gQXV0aC5pc0xvZ2dlZEluKCk7XHJcblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VkSW4gPSBBdXRoLmlzTG9nZ2VkSW4oKTtcclxuICAgICAgICAgICAgICAgIEF1dGguZ2V0VXNlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVzZXIgPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZG9Mb2dpbih1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmluUHJvY2Vzc2luZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmVycm9yID0gJyc7XHJcbiAgICAgICAgICAgICAgICBBdXRoLmxvZ2luKHVzZXIuZW1haWwsIHVzZXIucGFzc3dvcmQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidXNlcmVtYWlsXCIsZGF0YS5lbWFpbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyaWRcIixkYXRhLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImxvY2FsY29kZVwiLGRhdGEuaWQgKyAnLScgKyBnZXRMb2NhbENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJuaWNrbmFtZVwiLGRhdGEubmlja25hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldExhbmcoZGF0YS5sYW5ndWFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEF1dGguZ2V0VXNlcihkYXRhLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24odXNlckRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoJGZpbHRlcigndHJhbnNsYXRlJykoJ1dFTENPTUVfU1lTVEVNJykgKyBcIjogXCIgKyBkYXRhLm5pY2tuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicGhvdG9cIix1c2VyRGF0YS5kYXRhLnBob3RvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnc3RhcnRwcm9ibGVtJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJVc3XDoXJpbyBlIHNlbmhhIG7Do28gY29uZmVyZW0uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZG9Mb2dvdXQoKSB7XHJcbiAgICAgICAgICAgICAgICBBdXRoLmxvZ291dCgpO1xyXG4gICAgICAgICAgICAgICAgJHN0YXRlKCdpbml0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjEvMDYvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLnNlcnZpY2UoJ1NvY2tldCcsXHJcbiAgICAgICAgWyckbG9jYXRpb24nLCAnJHRpbWVvdXQnLFxyXG4gICAgZnVuY3Rpb24oJGxvY2F0aW9uLCAkdGltZW91dCkge1xyXG4gICAgICAgIGlmICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gaW8oKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vbiA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5vbihldmVudE5hbWUsIGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zb2NrZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoZXZlbnROYW1lLCBkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSlcclxuXHJcbn0pKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
