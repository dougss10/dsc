!function(){"use strict";angular.module("app",["ngImgCrop","toastService","textAngular","luegg.directives","appRxDrag","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),function(){"use strict";function e(e){function o(o){this.message=o,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:500})}var t={message:"",errorMessage:o};return t}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,o){var t=this;t.message=o.message,t.closeToast=function(){e.hide()}}]).factory("toastApp",e),e.$inject=["$mdToast"]}(),function(){"use strict";function e(e,o){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("profile",{url:"/profile",templateUrl:"views/pages/profile.html",controller:"profileController as vm"}).state("dscreport",{url:"/dscreport",templateUrl:"views/pages/problemreport.html",controller:"problemReportController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.description",{url:"/description",views:{"problem-description":{templateUrl:"views/pages/problemdescription.html",controller:"editProblemController as vm"}}}).state("problem.collaborators",{url:"/collaborators",views:{"problem-description":{templateUrl:"views/pages/collaborators.html",controller:"controllerCollaborators as vm"}}}).state("problem.stakeholders",{url:"/stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"/evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"/semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"/carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}).state("problem.vif",{url:"/vif",views:{"dsc-artifact":{templateUrl:"views/pages/vif.html",controller:"valueIdentificationFrameController as vm"}}}).state("problem.onion",{url:"/onion",views:{"dsc-artifact":{templateUrl:"views/pages/onion.html",controller:"onionController as vm"}}}),o.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function o(e){function o(o){e.use(o)}var t=this;t.setLang=o}function t(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",o).directive("changeLanguage",t),e.$inject=["$translateProvider"],o.$inject=["$translate"]}(),function(){"use strict";function e(e,o,t,r){function n(){d.idProblem=e.localStorage.getItem("problemid"),t.getcarf(d.idProblem).success(function(e){e.success&&(d.localStakeholders=e.stakeholders,d.stakeholderList=d.localStakeholders,d.carfList=e.carf,d.carfPriorityList=d.localPriorityList)}),d.inProcessing=!1}function a(){d.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},d.valueList=[]}function i(e){""===e.pms?r.errorMessage("Select PMS"):e.values.length<1?r.errorMessage("Select one or more Value"):e.stakeholders.length<1?r.errorMessage("Select one or more Stakeholder(s)"):""===e.priority?r.errorMessage("Select priority [Low, Medium or High]"):(o.emit("broadcastCARFadd",e),d.stakeholderList=[],d.carfPriorityList=[])}function s(e,t){var r={index:e,carf:t};o.emit("broadcastCARFremove",r)}function l(e){void 0!==e&&angular.forEach(d.carfPMSValue,function(o){return o.pms==e?(d.carf.values=[],void(d.valueList=o.values)):void 0})}function c(e){d.carf.priority=e}function u(e){if(0===d.carf.values.length)d.carf.values.push(e);else{for(var o=0;o<d.carf.values.length;o++)if(e==d.carf.values[o])return void d.carf.values.splice(o,1);d.carf.values.push(e)}}function m(e){if(0===d.carf.stakeholders.length)d.carf.stakeholders.push(e);else{for(var o=0;o<d.carf.stakeholders.length;o++)if(e==d.carf.stakeholders[o])return void d.carf.stakeholders.splice(o,1);d.carf.stakeholders.push(e)}}var d=this;d.idProblem="",d.inProcessing=!0,d.valueList=[],d.stakeholderList=[],d.localStakeholders=[],d.addpmsvalue=i,d.removeCARF=s,d.selectPMSValue=l,d.setPriotity=c,d.addListValue=u,d.addStakeholder=m,d.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},d.initCarf=n,d.carfList=[],d.carfPriorityList=[],o.on("onBroadcastCARFadd",function(e){d.carfList.push(e),a(),d.stakeholderList=d.localStakeholders,d.carfPriorityList=d.localPriorityList}),o.on("onBroadcastCARFremove",function(e){d.carfList.splice(e,1)}),d.localPriorityList=["Low","Medium","High"],d.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(e,o,t,r){function n(){u.isOpenChat=!u.isOpenChat,document.getElementById("message").focus()}function a(){u.idProblem=r.localStorage.getItem("problemid"),u.nickname=r.localStorage.getItem("nickname"),u.photo=r.localStorage.getItem("photo"),t.gethistorychat(u.idProblem).success(function(e){if(e.success)for(var o=0;o<e.historychat.length;o++){var t=new Date(e.historychat[o].time),r={nickname:e.historychat[o].nickname,msg:e.historychat[o].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "};u.messages.push(r)}}),o.emit("checkUsers")}function i(){u.replay?u.replay=!1:u.replay=!0}function s(e){void 0===e||e.length<2||(o.emit("broadcastChat",e),u.newmsg="",u.contador=0)}function l(){u.contador=0}function c(o,t){console.log(u.contador),13==o.keyCode&&(u.contador++,1==u.contador&&e(l,2e3),u.contador>1&&s(t))}var u=this;u.newmsg="",u.messages=[],u.replay=!1,u.nickname="",u.userList=[],u.initHistoryChat=a,u.showReplay=i,u.sendMessage=s,u.photo="",u.openChat=n,u.isOpenChat=!1,u.keypressChat=c,u.contador=0,o.on("onBroadcastChat",function(e){var o=new Date(e[e.length-1].time);u.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "})}),o.on("onCheckUsers",function(e){u.userList=e})}angular.module("app").controller("chatDSC",e),e.$inject=["$timeout","Socket","problemService","$window"]}(),function(){"use strict";function e(e,o,t,r){function n(){l.idProblem=e.localStorage.getItem("problemid"),l.useremail=e.localStorage.getItem("useremail"),t.getcollaborators(l.idProblem).success(function(e){e.success?l.collaborators=e.collaborators:r.errorMessage(e.message)})}function a(e){for(var o=0;o<l.collaborators.length;o++)if(e==l.collaborators[o].email)return!0;return!1}function i(e){if(l.useremail==e)r.errorMessage(l.useremail+" is email of owner.");else if(a(e))r.errorMessage("Usuario Cadastrado.");else{var o={idproblem:l.idProblem,email:e};t.invite(o).success(function(e){e.success?l.collaborators=e.collaborators:r.errorMessage(e.message)})}}function s(e){var o={idproblem:l.idProblem,email:e.email};t.removecollaborators(o).success(function(e){e.success?(r.errorMessage("Colaborador foi removido do projeto."),l.collaborators=e.collaborators):r.errorMessage(e.message)})}var l=this;l.idProblem="",l.collaborators=[],l.useremail="",l.initCollaborators=n,l.addCollaborator=i,l.removeCollaborator=s}angular.module("app").controller("controllerCollaborators",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(){function e(e){var o=document.getElementById("projectResport"),t=new jsPDF("l","px");t.addHTML(o,0,0,{pagesplit:!0},function(e){t.save("test.pdf")})}var o=this;o.idproblem="ajflajfljalfjaljf",o.buidReport=e}angular.module("app").controller("dscReportController",e)}(),function(){"use strict";function e(e,o,t,r){function n(){s.idproblem=e.localStorage.getItem("problemid"),o.getevaluation(s.idproblem).success(function(e){e.success?s.evaluationframeworkList=e.evaluationframework:r.errorMessage(e.message)})}function a(e){t.emit("broadcastFrameSave",e)}function i(e){e.openEdit=!0}var s=this;s.evaluationframeworkList=[],s.initEvaluation=n,s.setOpenEditDiscution=i,s.saveFrame=a,t.on("onBroadcastFrameEdit",function(e){console.log("O que vem aqui..."+e),angular.forEach(s.evaluationframeworkList,function(o){o.onionlayer==e.onionlayer&&angular.forEach(o.stakeholders,function(o){o._id==e._id&&(o.name=e.name,o.onionlayer=e.onionlayer,o.description=e.description,o.openEdit=e.openEdit,o.problems=e.problems,o.solutions=e.solutions)})})}),t.on("onUpdateStakeholder",function(e){console.log(e)})}angular.module("app").controller("evaluationframeworkController",e),e.$inject=["$window","problemService","Socket","toastApp"]}(),function(){"use strict";function e(e,o,t,r,n,a){function i(){d.nickname=t.localStorage.getItem("nickname"),d.idProblem=t.localStorage.getItem("problemid"),r.getproblem(d.idProblem).success(function(e){e.success?d.problem=e.problem:n.errorMessage(e.message)});var e={idproblem:d.idProblem,nickname:d.nickname};a.emit("initProblem",e)}function s(){o.go("startproblem")}function l(){o.go("problem.collaborators")}function c(){o.go("dscreport")}function u(){o.go("problem.description")}function m(){e.logout(),o.go("init.login")}var d=this;d.formAddCollaborators=l,d.editDescriptionProblem=u,d.doLogout=m,d.systemReturn=s,d.formProblemReport=c,d.getCurrentProblem=i,d.nickname}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$state","$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,o,t,r,n){var a=this;a.idproblem="",a.intiMytOnion=intiMytOnion,a.savePostItOnion=savePostItOnion,a.editPostItOnion=editPostItOnion,a.delPostItOnion=delPostItOnion,a.addPostItOnion=addPostItOnion,a.onOnion=onOnion,a.offOnion=offOnion}angular.module("app").controller("onionController",e),e.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(),function(){"use strict";function e(e,o,t,r,n){function a(){c.nickname=r.localStorage.getItem("nickname"),c.idProblem=r.localStorage.getItem("problemid"),c.localcode=r.localStorage.getItem("localcode"),n.getproblem(c.idProblem).success(function(e){e.success?(console.log(e),c.problem=e.problem):t.errorMessage(e.message)});var o={idproblem:c.idProblem,nickname:c.nickname};e.emit("initProblem",o)}function i(){u=!0}function s(t){t.update=u,t.localcode=c.localcode,e.emit("atualizarProblema",t),u&&(u=!1,o(i,2e3))}function l(o){o.localcode=c.localcode,o.update=u,e.emit("atualizarProblema",o)}var c=this,u=!0;c.problem="",c.problemUpdate=s,c.getCurrentProblem=a,c.saveDescription=l,c.nickname="",c.localcode="",e.on("onAtualizarProblema",function(e){c.localcode!==e.localcode&&(c.problem.description=e.description),c.problem.update=u})}angular.module("app").controller("editProblemController",e),e.$injectre=["$scope","Socket"],e.$inject=["Socket","$timeout","toastApp","$window","problemService"]}(),function(){"use strict";function e(e,o,t,r){function n(){i.idProblem=e.localStorage.getItem("problemid"),o.getproblemreport(i.idProblem).success(function(e){e.success?i.problem=e.problem:t.errorMessage(e.message)})}function a(){r.go("problem.stakeholders")}var i=this;i.idProblem,i.problem,i.initProblemPeport=n,i.systemReturn=a}angular.module("app").controller("problemReportController",e),e.$inject=["$window","problemService","toastApp","$state"]}(),function(){"use strict";function e(e,o){function t(o){return e.post(v,o)}function r(o){return e.get(w+"?idproblem="+o)}function n(o){return e.get(k+"?idproblem="+o)}function a(o){return e.get(b+"?email="+o)}function i(o){return e.get(y+"?idproblem="+o)}function s(o){return e.post(S,o)}function l(o){return e.get(P+"?idproblem="+o)}function c(o){return e.get(C+"?idproblem="+o)}function u(o){return e.get($+"?idproblem="+o)}function m(o){return e.get(I+"?idproblem="+o)}function d(o){return e.get(A+"?idproblem="+o)}function p(o){return e.get(h+"?email="+o)}function g(o){return e.get(L+"?idproblem="+o.idproblem+"&email="+o.email)}function f(o){return e.get(E+"?idproblem="+o)}var b="/api/problem/getproblems",h="/api/problem/getproblemscollaborator",v="/api/problem/newproblem",k="/api/problem/getproblem",w="/api/problem/getproblemreport",y="/api/problem/getcollaborators",S="/api/problem/invite",P="/api/problem/getonion",C="/api/problem/getevaluation",$="/api/problem/getsemiotic",I="/api/problem/getcarf",A="/api/problem/removeproblem",L="/api/problem/removecollaborator",E="/api/problem/historychat",M={newproblem:t,getuserproblems:a,getproblem:n,getcollaborators:i,invite:s,getonion:l,getevaluation:c,getsemiotic:u,getcarf:m,removeproblem:d,getproblemscollaborator:p,removecollaborators:g,gethistorychat:f,getproblemreport:r};return M}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,o,t,r){function n(){m.idproblem=o.localStorage.getItem("problemid"),t.getsemiotic(m.idproblem).success(function(e){e.success?m.semioticframework=e.semioticframework:r.errorMessage(e.message)})}function a(o,t){var r={text:o,update:t};e.emit("updateSocialWorld",r)}function i(o,t){var r={text:o,update:t};e.emit("updatePragmatic",r)}function s(o,t){var r={text:o,update:t};e.emit("updateSemantic",r)}function l(o,t){var r={text:o,update:t};e.emit("updateSyntatic",r)}function c(o,t){var r={text:o,update:t};e.emit("updateEmpirical",r)}function u(o,t){var r={text:o,update:t};e.emit("updatePhysical",r)}var m=this;m.idproblem="",m.saveSocialWorld=a,m.savePragmatic=i,m.saveSemantic=s,m.saveSyntatic=l,m.saveEmpirical=c,m.savePhysical=u,m.semioticframework="",m.initSemioticFramework=n,e.on("onUpdateSocialWorld",function(e){m.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){m.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){m.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,o){m.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){m.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){m.semioticframework.physical=e})}angular.module("app").controller("semioticframeworkController",e),e.$inject=["Socket","$window","problemService","toastApp"]}(),function(e){"use strict";function o(e,o,t,r,n){function a(){p.idproblem=o.localStorage.getItem("problemid"),p.localcode=o.localStorage.getItem("localcode"),t.getonion(p.idproblem).success(function(e){e.success?p.stakeholderList=e.stakeholders:n.errorMessage(e.message)}),p.inProcessing=!1}function i(o){e.emit("broadcastOnionSave",o)}function s(o){e.emit("broadcastOnionEdit",o)}function l(o,t){var r={index:o,stakeholder:t};e.emit("broadcastOnionRemove",r)}function c(e,o,t){var n=r.confirm().parent(angular.element(document.body)).title("Detete Stakeholder?").content("Title: "+t.name).ariaLabel("Remove Stakeholder").ok("Yes!").cancel("Cancel").targetEvent(e);r.show(n).then(function(){l(o,t)})}function u(o,t){var r={onionlayer:t,name:"",description:"",openEdit:!0,x:o.pageX+"px",y:o.pageY+"px"};e.emit("broadcastOnionAdd",r)}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline;"),document.getElementById("legend"+e).setAttribute("opacity","0.7"),document.getElementById(e).setAttribute("opacity","0.7")}function d(e){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById("legend"+e).setAttribute("opacity","1.0"),document.getElementById(e).setAttribute("opacity","1.0")}var p=this;p.idproblem="",p.stakeholderList=[],p.stakeholder="",p.intitOnion=a,p.move=!1,p.inProcessing=!0,p.saveStakeholder=i,p.setOpenEdit=s,p.delPostIt=c,p.addPostIt=u,p.acende=m,p.apaga=d,p.localcode="",e.on("onBroadcastOnionSave",function(e){angular.forEach(p.stakeholderList,function(o){o._id==e._id&&(o.stakeholder=e.stakeholder,o.name=e.name,o.description=e.description,o.openEdit=e.openEdit,o.x=e.x,o.y=e.y,o.zindex=9999)})}),e.on("onBroadcastOnionEdit",function(e){angular.forEach(p.stakeholderList,function(o){o._id===e&&(o.openEdit=!0,o.zindex=9999)})}),e.on("onBroadcastOnionRemove",function(e){var o=document.getElementById("stakeholder"+p.stakeholderList[e]._id);o.style.display="none",p.stakeholderList.splice(e,1)}),e.on("onBroadcastMove",function(e){console.log(e.localcode+"  "+p.localcode),p.localcode!==e.localcode&&(document.getElementById("stakeholder"+e._id).style.left=e.x,document.getElementById("stakeholder"+e._id).style.top=e.y)}),e.on("onBroadcastOnionAdd",function(e){p.stakeholderList.push(e)})}angular.module("app").controller("stakeholderController",o),o.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,o,t,r,n,a,i){function s(){b.userid=n.localStorage.getItem("userid"),b.nickname=n.localStorage.getItem("nickname"),b.useremail=n.localStorage.getItem("useremail"),b.photo=n.localStorage.getItem("photo"),a.getuserproblems(b.useremail).success(function(e){if(e.success){for(var o=0;o<e.problems.length;o++)e.problems[o].description=e.problems[o].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);b.problemList=e.problems}else i.errorMessage(e.message)}),a.getproblemscollaborator(b.useremail).success(function(e){if(e.success){for(var o=0;o<e.problems.length;o++)e.problems[o].description=e.problems[o].description.replace(/(<([^>]+)>)/gi,"").substring(0,460);b.problemCollaboratorList=e.problems}else i.errorMessage(e.message)}),b.loginInProgress=!1}function l(e){a.removeproblem(e).success(function(o){if(o.success){for(var t=0;t<b.problemList.length;t++)if(b.problemList[t]._id==e){b.problemList.splice(t,1);break}}else i.errorMessage(o.message)})}function c(o,t){var r=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+t.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(o);e.show(r).then(function(){l(t._id)})}function u(e){e.userid=b.userid,a.newproblem(e).success(function(e){e.success?b.editProblem(e.problem):i.errorMessage(e.message)})}function m(e){n.localStorage.setItem("problemid",e._id);var t={idproblem:e._id,nickname:b.nickname};r.emit("initProblem",t),o.go("problem.stakeholders")}function d(){t.logout(),o.go("init.login")}function p(){o.go("profile")}function g(o){e.show({controller:f,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:o})}function f(e,o){e.hide=function(){o.hide()},e.cancel=function(){o.cancel()},e.addNewProblem=function(e){b.startNewProblem(e),o.cancel()},e.addArtifact=function(e){console.log(e)}}var b=this;b.nickname="",b.userid="",b.useremail="",b.problemList=[],b.problemCollaboratorList=[],b.loginInProgress=!0,b.getProblems=s,b.revomveProblem=c,b.startNewProblem=u,b.editProblem=m,b.doLogout=d,b.newProblem=g,b.editProfile=p,b.photo,f.$inject=["$scope","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,o,t,r){function n(){u.idproblem=e.localStorage.getItem("problemid"),o.getonion(u.idproblem).success(function(e){if(e.success){if(e.stakeholders.length>0){for(var o=1;o<u.sugestionValuesArray.length;o++)u.sugestionValues+=u.sugestionValuesArray[o]+", ";u.sugestionValues[u.sugestionValuesArray[u.sugestionValuesArray.length-1]]+".";for(var r=0;r<e.stakeholders.length;r++)for(var n=0;n<u.stakeholderList.length;n++){var a={_id:e.stakeholders[r]._id,onionlayer:e.stakeholders[r].onionlayer,values:e.stakeholders[r].values,name:e.stakeholders[r].name,description:e.stakeholders[r].description,openEdit:e.stakeholders[r].openEdit,x:e.stakeholders[r].x,y:e.stakeholders[r].y,newValues:[]};e.stakeholders[r].onionlayer!=u.stakeholderList[n].onionlayer||u.stakeholderList[n].stakeholders.push(a)}}u.inProcessing=!1}else t.errorMessage(e.message)})}function a(e){e.openEdit=!0}function i(e){e.openEdit=!1}function s(e,o){for(var t=[],n=0;n<o.values.length;n++)o.values[n]!=e&&t.push(o.values[n]);o.values=t,r.emit("broadcastOnionSave",o)}function l(e){if(""===e.newValues||void 0===e.newValues)t.errorMessage("Valor não especificado.");else{for(var o=e.newValues.split(","),n=0;n<o.length;n++)c(e.values,o[n])?t.errorMessage("Duplicate value: "+o[n]):e.values.push(o[n]);e.newValues="",e.openEdit=!1,r.emit("broadcastOnionSave",e)}}function c(e,o){for(var t=0;t<e.length;t++)if(o===e[t])return!0;return!1}var u=this;u.inProcessing=!0,u.idProblem="",u.useremail="",u.newvalues="",u.initValueIdentificationFrame=n,u.setSuggestionShow=a,u.leaveSuggestionShow=i,u.removeValueIdentication=s,u.setValueIdentication=l,u.sugestionValues="",u.stakeholderList=[{onionlayer:"Community",stakeholders:[]},{onionlayer:"Market",stakeholders:[]},{onionlayer:"Source",stakeholders:[]},{onionlayer:"Contribution",stakeholders:[]},{onionlayer:"Technico",stakeholders:[]}],u.sugestionValuesArray=["Acessibilidade","Adaptabilidade","Estética","Autonomia","Disponibilidade","Consciência","Colaboração","Conversação","Emoção e Afeto","Grupos","Identidade","Consentimento informado","Meta-comunicação","Normas","Objeto","Portabilidade","Presença","Privacidade","Propriedade","Reciprocidade, Relacionamento, Reputação","Escalabilidade","Segurança","Compartilhamento","Confiança","Usabilidade","Visibilidade"],r.on("onBroadcastOnionSave",function(e){angular.forEach(u.stakeholderList,function(o){o._id==e._id&&(o.stakeholder=e.stakeholder,o.name=e.name,o.description=e.description,o.openEdit=e.openEdit,o.x=e.x,o.y=e.y,o.newValues=[])})})}angular.module("app").controller("valueIdentificationFrameController",e),e.$inject=["$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,o,t,r){function n(){o.go("startproblem")}function a(){s.userid=e.localStorage.getItem("userid"),void 0!==s.userid}function i(o){var t={userid:e.localStorage.getItem("userid"),photo:o};r.uploadPhoto(t).success(function(t){t.success?e.localStorage.setItem("photo",o):toastApp.errorMessage("-----")})}var s=this;s.startProfile=a,s.uploadInProgress=!0,s.uploadProgress=0,s.userid,s.savePhoto=i,s.systemReturn=n,s.myImage="",s.myCroppedImage="";var l=function(e){var o=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){t.$apply(function(o){o.myImage=e.target.result})},r.readAsDataURL(o)};angular.element(document.querySelector("#fileInput")).on("change",l)}angular.module("app").controller("profileController",e),e.$inject=["$window","$state","$scope","signupService"]}(),function(){"use strict";function e(e,o,t,r,n,a,i,s,l){function c(e){t.create(e).success(function(o){o.success?(n.errorMessage(s("translate")("WELCOME_SYSTEM")+e.nickname),r.go("init.login")):n.errorMessage("Email Já cadastrado")})}function u(o){e.use(o)}function m(e){t.rescuePassword(e).success(function(o){o.success?(n.errorMessage("Email com instruções enviado para "+e.email),r.go("init.login")):n.errorMessage("Error")})}function d(e){t.changePassword(e).success(function(e){e.success?(n.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),r.go("init.login")):n.errorMessage("Error")})}var p=this;p.message="",p.saveUser=c,p.rescuePassword=m,p.changePassword=d,p.setLang=u,p.loginInProgress=!1}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,o){function t(o){return e.post(i,o)}function r(o){return e.post(s,o)}function n(t){var r=o.search();return e.get(l+"?mytoken="+r.mytoken+"&password="+t.password)}function a(o){return e.post(c,o)}var i="/api/signup/",s="/api/rescuepasswd/",l="/api/rescuepasswd/newpasswd/",c="/api/profile/photo/",u={create:t,rescuePassword:r,changePassword:n,uploadPhoto:a};return u}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e){var o=e.extendPalette("teal",{50:"E0F2F1",100:"B2DFDB",200:"80CBC4",300:"4DB6AC",400:"26A69A",500:"009688",600:"00897B",700:"00796B",800:"00695C",900:"004D40",A100:"A7FFEB",A200:"64FFDA",A400:"1DE9B6",A700:"00BFA5",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0});e.definePalette("teal",o),e.theme("default").primaryPalette("teal").accentPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,o,t){var r={};return r.login=function(o,r){return e.post("/api/login",{email:o,password:r}).success(function(e){return t.setToken(e.token),e})},r.logout=function(){t.setToken()},r.isLoggedIn=function(){return t.getToken()?!0:!1},r.getUser=function(r){return t.getToken()?e.get("/api/me/?userid="+r):o.reject({message:"User has no token"})},r}]).factory("AuthToken",["$window",function(e){var o={};return o.getToken=function(){return e.localStorage.getItem("token")},o.setToken=function(o){o?e.localStorage.setItem("token",o):e.localStorage.removeItem("token")},o}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,o,t){var r={};return r.request=function(e){var o=t.getToken();return o&&(e.headers["x-access-token"]=o),e},r}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket","$window",function(e,o,t){return{restrict:"A",replace:!0,link:function(r,n,a){function i(e){var o=e.target.id;"svg"==o&&(o=""),r.stakeholder.onionlayer=o,y=e.pageY,x=e.pageX,n.css({top:y+"px",left:x+"px"}),r.stakeholder.x=x+"px",r.stakeholder.y=y+"px"}function s(){e.unbind("mousemove",i),e.unbind("mouseup",s),o.emit("broadcastMove",r.stakeholder)}n.on("mousedown",function(o){"stakeholder"==o.target.id.substring(0,11)&&(r.stakeholder.localcode=t.localStorage.getItem("localcode"),o.preventDefault(),e.bind("mousemove",i),e.bind("mouseup",s))})}}}]),function(e){angular.module("appRxDrag",["rx"]).directive("rxdraggable",["$document","$window","rx","Socket",function(e,o,t,r){return function(n,a,i){var s=o.localStorage.getItem("localcode"),l=t.Observable.fromEvent(a,"mouseup"),c=t.Observable.fromEvent(e,"mousemove"),u=t.Observable.fromEvent(a,"mousedown").map(function(e){return e.preventDefault(),{left:e.clientX-a[0].getBoundingClientRect().left,top:e.clientY-a[0].getBoundingClientRect().top}}),m=u.selectMany(function(e){return c.map(function(o){return{left:o.clientX-e.left,top:o.clientY-e.top}}).takeUntil(l)});m.subscribe(function(e){a.css({top:e.top+"px",left:e.left+"px"}),e.localcode=s,r.emit("broadcastMove",e)})}}])}.call(this),function(){"use strict";function e(e,o,t,r,n,a,i){function s(o){e.use(o)}function l(){return Math.random()+Math.floor(10*Math.random())}function c(e){m.inProcessing=!0,m.error="",r.login(e.email,e.password).success(function(e){n.localStorage.setItem("useremail",e.email),n.localStorage.setItem("userid",e.id),n.localStorage.setItem("localcode",e.id+"-"+l()),n.localStorage.setItem("nickname",e.nickname),m.setLang(e.language),m.inProcessing=!1,r.getUser(e.id).then(function(o){i.errorMessage(a("translate")("WELCOME_SYSTEM")+": "+e.nickname),e.success?(n.localStorage.setItem("photo",o.data.photo),t.go("startproblem")):i.errorMessage("Usuário e senha não conferem.")})})}function u(){r.logout(),t("init")}var m=this;m.inProcessing=!1,m.setLang=s,m.doLogout=u,m.doLogin=c,m.loggedIn=r.isLoggedIn(),o.$on("$routeChangeStart",function(){m.loggedIn=r.isLoggedIn(),r.getUser().then(function(e){m.user=e.data})})}angular.module("app").controller("loginController",e),e.$inject=["$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),function(){"use strict";angular.module("app").service("Socket",["$location","$timeout",function(e,o){this.socket=io(),this.on=function(e,t){this.socket&&this.socket.on(e,function(e){o(function(){t(e)})})},this.emit=function(e,o){this.socket&&this.socket.emit(e,o)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}])}();
//# sourceMappingURL=data:application/json;base64,
