!function(){"use strict";angular.module("app",["ngImgCrop","toastService","textAngular","luegg.directives","appRxDrag","DropDSC","authService","ui.router","ngMaterial","ngMdIcons","ngCookies","pascalprecht.translate"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}])}(),function(){"use strict";function e(e){function t(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:2e3})}function o(t){this.message=t,e.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"bottom left",hideDelay:1e3})}var n={message:"",errorMessage:t,errorMessageBottom:o};return n}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(e,t){var o=this;o.message=t.message,o.closeToast=function(){e.hide()}}]).factory("toastApp",e),e.$inject=["$mdToast"]}(),function(){"use strict";function e(e,t){e.state("init",{url:"/",templateUrl:"views/pages/initpage.html",controller:"loginController as vm"}).state("init.login",{url:"login",views:{"content-tab":{templateUrl:"views/pages/userlogin.html",controller:"loginController as vm"}}}).state("init.signup",{url:"signup",views:{"content-tab":{templateUrl:"views/pages/signup.html",controller:"signupController as vm"}}}).state("init.rescuepassword",{url:"rescuepassword",views:{"content-tab":{templateUrl:"views/pages/rescuepassword.html",controller:"signupController as vm"}}}).state("startproblem",{url:"/startproblem",templateUrl:"views/pages/startproblem.html",controller:"startProblemController as vm"}).state("profile",{url:"/profile",templateUrl:"views/pages/profile.html",controller:"profileController as vm"}).state("dscreport",{url:"/dscreport",templateUrl:"views/pages/problemreport.html",controller:"problemReportController as vm"}).state("newpassword",{url:"/newpassword/:mytoken",templateUrl:"views/pages/newpassword.html",controller:"signupController as vm"}).state("problem",{url:"/problem",templateUrl:"views/pages/problem.html",controller:"menuProblemController as vm"}).state("problem.stakeholders",{url:"/stakeholders",views:{"dsc-artifact":{templateUrl:"views/pages/stakeholders.html",controller:"stakeholderController as vm"}}}).state("problem.evaluationframework",{url:"/evaluationframework",views:{"dsc-artifact":{templateUrl:"views/pages/evaluationframework.html",controller:"evaluationframeworkController as vm"}}}).state("problem.semioticframework",{url:"/semioticframework",views:{"dsc-artifact":{templateUrl:"views/pages/semioticframework.html",controller:"semioticframeworkController as vm"}}}).state("problem.carf",{url:"/carf",views:{"dsc-artifact":{templateUrl:"views/pages/carf.html",controller:"carfController as vm"}}}).state("problem.vif",{url:"/vif",views:{"dsc-artifact":{templateUrl:"views/pages/vif.html",controller:"valueIdentificationFrameController as vm"}}}).state("problem.onion",{url:"/onion",views:{"dsc-artifact":{templateUrl:"views/pages/onion.html",controller:"onion3LayerController as vm"}}}),t.otherwise("/login")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){function t(t){e.show({controller:o,templateUrl:"views/pages/helpdsc.html",parent:angular.element(document.body),targetEvent:t})}function o(e,t,o,n,r){function i(n){n.nickname=r.localStorage.getItem("nickname"),n.emilContact=r.localStorage.getItem("useremail"),o.sendemailDSC(n).success(function(o){o.success&&(e.hide(),t.errorMessage("Thank you for you message"))})}e.sendEmailDSC=i,e.hide=function(){n.hide()},e.cancel=function(){n.cancel()}}var n=this;n.openFormEmail=t,o.$inject=["$scope","toastApp","signupService","$mdDialog","$window"]}function t(){return{templateUrl:"app/feedback/helpbutton.html",restrict:"E"}}angular.module("app").controller("helpController",e).directive("buttonhelp",t),e.$inject=["$mdDialog"]}(),function(){"use strict";function e(e){e.useStaticFilesLoader({prefix:"app/language/lang-",suffix:".json"}),e.preferredLanguage("en"),e.useSanitizeValueStrategy("escaped"),e.useLocalStorage()}function t(e){function t(t){e.use(t)}var o=this;o.setLang=t}function o(){return{templateUrl:"app/language/changeLanguage.html",restrict:"E"}}angular.module("app").config(e).controller("languageController",t).directive("changeLanguage",o),e.$inject=["$translateProvider"],t.$inject=["$translate"]}(),function(){"use strict";function e(e,t,o,n){function r(){d.idProblem=e.localStorage.getItem("problemid"),o.getcarf(d.idProblem).success(function(e){e.success&&(d.localStakeholders=e.stakeholders,d.stakeholderList=d.localStakeholders,d.carfList=e.carf,d.carfPriorityList=d.localPriorityList)}),d.inProcessing=!1}function i(){d.carf={_id:"",pms:"",values:[],priority:"",requirement:"",stakeholders:[]},d.valueList=[]}function a(e){""===e.pms?n.errorMessage("Select PMS"):e.values.length<1?n.errorMessage("Select one or more Value"):e.stakeholders.length<1?n.errorMessage("Select one or more Stakeholder(s)"):""===e.priority?n.errorMessage("Select priority [Low, Medium or High]"):(t.emit("broadcastCARFadd",e),d.stakeholderList=[],d.carfPriorityList=[])}function s(e,o){var n={index:e,carf:o};t.emit("broadcastCARFremove",n)}function l(e){void 0!==e&&angular.forEach(d.carfPMSValue,function(t){return t.pms==e?(d.carf.values=[],void(d.valueList=t.values)):void 0})}function c(e){d.carf.priority=e}function u(e){if(0===d.carf.values.length)d.carf.values.push(e);else{for(var t=0;t<d.carf.values.length;t++)if(e==d.carf.values[t])return void d.carf.values.splice(t,1);d.carf.values.push(e)}}function m(e){if(0===d.carf.stakeholders.length)d.carf.stakeholders.push(e);else{for(var t=0;t<d.carf.stakeholders.length;t++)if(e==d.carf.stakeholders[t])return void d.carf.stakeholders.splice(t,1);d.carf.stakeholders.push(e)}}var d=this;d.idProblem="",d.inProcessing=!0,d.valueList=[],d.stakeholderList=[],d.localStakeholders=[],d.addpmsvalue=a,d.removeCARF=s,d.selectPMSValue=l,d.setPriotity=c,d.addListValue=u,d.addStakeholder=m,d.carf={pms:"",values:[],priority:"",requirement:"",stakeholders:[]},d.initCarf=r,d.carfList=[],d.carfPriorityList=[],t.on("onBroadcastCARFadd",function(e){d.carfList.push(e),i(),d.stakeholderList=d.localStakeholders,d.carfPriorityList=d.localPriorityList}),t.on("onBroadcastCARFremove",function(e){d.carfList.splice(e,1)}),d.localPriorityList=["Low","Medium","High"],d.carfPMSValue=[{pms:"Interaction",values:["Identity","Norms"]},{pms:"Association",values:["Conversation","Groups","Relationship","Trust"]},{pms:"Learning",values:["Meta-communication"]},{pms:"Play",values:["Aesthetics","Emotion and Affection"]},{pms:"Protection",values:["Informed consert","Reputation","Security"]},{pms:"Exploitation",values:["Accessibility","Object","Property (ownership)","Usability"]},{pms:"Teporality",values:["Availability","Awareness","Presence"]},{pms:"Territoriality",values:["Portability","Privacy","Scalability","Visibility"]},{pms:"Classification",values:["Autonomy","Collaboration","Sharing","Adaptability"]},{pms:"Subsistence",values:["Reciprocity"]}]}angular.module("app").controller("carfController",e),e.$inject=["$window","Socket","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,n,r,i){function a(){g.usersOnLine.length>1&&(g.showUser=!g.showUser)}function s(){g.isOpenChat=!g.isOpenChat,document.getElementById("message").focus()}function l(){g.idProblem=i.localStorage.getItem("problemid"),g.nickname=i.localStorage.getItem("nickname"),g.photo=i.localStorage.getItem("photo"),r.gethistorychat(g.idProblem).success(function(e){if(e.success)for(var t=0;t<e.historychat.length;t++){var o=new Date(e.historychat[t].time),n={nickname:e.historychat[t].nickname,msg:e.historychat[t].msg,time:o.getDate()+"/"+(o.getMonth()+1)+"/"+o.getFullYear()+" ["+o.getHours()+":"+o.getMinutes()+"] "};g.messages.push(n)}})}function c(e){for(var t=0;t<g.usersOnLine.length;t++)if(g.usersOnLine[t]===e)return;g.usersOnLine.push(e),g.usersOnLine.sort()}function u(){g.replay?g.replay=!1:g.replay=!0}function m(e){void 0===e||e.length<2||(n.emit("broadcastChat",e),g.newmsg="",g.contador=0)}function d(){g.contador=0}function p(t,o){13==t.keyCode&&(g.contador++,1==g.contador&&e(d,2e3),g.contador>1&&m(o))}var g=this;g.newmsg="",g.messages=[],g.replay=!1,g.nickname="",g.usersOnLine=[],g.initHistoryChat=l,g.showReplay=u,g.sendMessage=m,g.photo="",g.openChat=s,g.isOpenChat=!1,g.keypressChat=p,g.contador=0,g.showUsersOnLine=a,g.showUser=!1,n.on("onUserON",function(e){e!==g.nickname&&c(e)}),n.on("onNotifyON",function(e){return g.nickname!==e.nickname?(o.errorMessageBottom(e.nickname+", "+t("translate")(e.msg)),c(e.nickname),void n.emit("userON",g.nickname)):(g.usersOnLine=[],void g.usersOnLine.push(g.nickname))}),n.on("onNotifyOFF",function(e){e.nickname!==g.nickname&&o.errorMessageBottom(e.nickname+", "+t("translate")(e.msg));for(var n=0;n<g.usersOnLine.length;n++)e.nickname===g.usersOnLine[n]&&g.usersOnLine.splice(n,1)}),n.on("onBroadcastChat",function(e){var t=new Date(e[e.length-1].time);g.messages.push({nickname:e[e.length-1].nickname,msg:e[e.length-1].msg,time:t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()+" ["+t.getHours()+":"+t.getMinutes()+"] "})})}angular.module("app").controller("chatDSC",e),e.$inject=["$timeout","$filter","toastApp","Socket","problemService","$window"]}(),function(){"use strict";function e(){function e(e){var t=document.getElementById("projectResport"),o=new jsPDF("l","px");o.addHTML(t,0,0,{pagesplit:!0},function(e){o.save("test.pdf")})}var t=this;t.idproblem="ajflajfljalfjaljf",t.buidReport=e}angular.module("app").controller("dscReportController",e)}(),function(){"use strict";function e(e,t,o,n){function r(){s.idproblem=e.localStorage.getItem("problemid"),t.getevaluation(s.idproblem).success(function(e){e.success?s.evaluationframeworkList=e.evaluationframework:n.errorMessage(e.message)})}function i(e){o.emit("broadcastFrameSave",e)}function a(e){e.openEdit=!0}var s=this;s.evaluationframeworkList=[],s.initEvaluation=r,s.setOpenEditDiscution=a,s.saveFrame=i,o.on("onBroadcastFrameEdit",function(e){angular.forEach(s.evaluationframeworkList,function(t){t.onionlayer==e.onionlayer&&angular.forEach(t.stakeholders,function(t){t._id==e._id&&(t.name=e.name,t.onionlayer=e.onionlayer,t.description=e.description,t.openEdit=e.openEdit,t.problems=e.problems,t.solutions=e.solutions)})})}),o.on("onUpdateStakeholder",function(e){})}angular.module("app").controller("evaluationframeworkController",e),e.$inject=["$window","problemService","Socket","toastApp"]}(),function(){"use strict";function e(e,t,o,n,r,i,a,s,l){function c(e){e.localcode=w,l.emit("atualizarProblema",e)}function u(e){t.show({controller:m,templateUrl:"views/pages/problemdescription.html",parent:angular.element(document.body),targetEvent:e})}function m(e,t,o){function n(){t.nickname=i.localStorage.getItem("nickname"),t.idProblem=i.localStorage.getItem("problemid"),a.getproblem(y.idProblem).success(function(e){e.success?t.problem=e.problem:s.errorMessage(e.message)})}function r(){m=!0}function l(t){console.log(t);var o={update:m,description:t};c(o),m&&(m=!1,e(r,2e3))}function u(e){var t={update:!0,description:e};c(t)}var m=!0;t.problem,t.problemUpdate=l,t.getProblemEdit=n,t.saveDescription=u,t.nickname="",t.hide=function(){o.hide()},t.cancel=function(){o.cancel()}}function d(e){t.show({controller:p,templateUrl:"views/pages/collaborators.html",parent:angular.element(document.body),targetEvent:e})}function p(e,t){function o(){e.idProblem=i.localStorage.getItem("problemid"),e.useremail=i.localStorage.getItem("useremail"),a.getcollaborators(e.idProblem).success(function(t){t.success?e.collaborators=t.collaborators:s.errorMessage(t.message)})}function n(t){for(var o=0;o<e.collaborators.length;o++)if(t==e.collaborators[o].email)return!0;return!1}function r(t){if(e.useremail==t)s.errorMessage(e.useremail+" is email of owner.");else if(n(t))s.errorMessage("Usuario Cadastrado.");else{var o={idproblem:e.idProblem,email:t};a.invite(o).success(function(t){t.success?(e.collaborators=t.collaborators,e.email=""):s.errorMessage(t.message)})}}function l(e){e.isDeleted=!e.isDeleted}function c(t){t.idproblem=e.idProblem,a.removecollaborators(t).success(function(o){o.success?(e.collaborators=o.collaborators,e.isDeleteCollaborator=!e.isDeleteCollaborator,s.errorMessage("Colaborador "+t.nickname+" foi removido do projeto.")):s.errorMessage(o.message)})}e.idProblem="",e.collaborators=[],e.useremail="",e.initCollaborators=o,e.addCollaborator=r,e.removeCollaborator=c,e.alertDeleteCollaborator=l,e.email="",e.hide=function(){t.hide()},e.cancel=function(){t.cancel()}}function g(){y.nickname=i.localStorage.getItem("nickname"),y.idProblem=i.localStorage.getItem("problemid"),w=i.localStorage.getItem("localcode"),a.getproblem(y.idProblem).success(function(e){e.success?(y.problem=e.problem,angular.forEach(e.problem.artifacts,function(e){var t=e.split("_");y.dsc_artifacts.push({name:"problem."+t[2].toLowerCase(),label:n("translate")(e)})})):s.errorMessage(e.message)});var e={idproblem:y.idProblem,nickname:y.nickname};l.emit("initProblem",e)}function f(){l.emit("disconnectProblem",y.nickname),r.go("startproblem")}function h(){r.go("problem.collaborators")}function b(){r.go("dscreport")}function v(){r.go("problem.description")}function k(){l.emit("disconnectProblem",y.nickname),e.logout(),r.go("init.login")}var y=this;y.formAddCollaborators=h,y.editDescriptionProblem=v,y.doLogout=k,y.systemReturn=f,y.formProblemReport=b,y.getCurrentProblem=g,y.nickname,y.dsc_artifacts=[],y.formEditProblem=u,y.formInviteCollaborator=d;var w="";l.on("onAtualizarProblema",function(e){w!==e.localcode&&setDescrition(e.description)}),m.$inject=["$timeout","$scope","$mdDialog"],p.$inject=["$scope","$mdDialog"],y.selectedIndex=0;var S=null,L=null;o.$watch("selectedIndex",function(e){L=S,S=y.dsc_artifacts[e],y.selectedIndex=e})}angular.module("app").controller("menuProblemController",e),e.$inject=["Auth","$mdDialog","$scope","$filter","$state","$window","problemService","toastApp","Socket"]}(),function(e){"use strict";function t(e,t,o,n,r){function i(){p.inProcessing=!0,p.idproblem=t.localStorage.getItem("problemid"),p.localcode=t.localStorage.getItem("localcode"),o.getonion3layer(p.idproblem).success(function(e){e.success?angular.forEach(e.postits,function(e){e.openEdit=!1,p.onion3LayerList.push(e)}):r.errorMessage(e.message)}),p.inProcessing=!1}function a(t){e.emit("broadcastOnion3LayerSave",t)}function s(t){e.emit("broadcastOnion3LayerEdit",t)}function l(t,o){e.emit("broadcastOnion3LayerRemove",{index:t,postit:o})}function c(e,t,o){var r=n.confirm().parent(angular.element(document.body)).title("Detete Postit?").content("Title: "+o.title).ariaLabel("Remove postit").ok("Yes!").cancel("Cancel").targetEvent(e);n.show(r).then(function(){l(t,o)})}function u(t,o){e.emit("broadcastOnion3LayerAdd",{postit:{layer:o,title:"",description:"",x:t.pageX+"px",y:t.pageY+"px",zindex:9999},localcode:p.localcode})}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline;"),document.getElementById(e).setAttribute("style","fill:#D1C4E9;"),document.getElementById("legend"+e).setAttribute("style","fill:#D1C4E9;")}function d(e,t){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById(e).setAttribute("style","fill: "+t+";"),document.getElementById("legend"+e).setAttribute("style","fill: "+t+";")}var p=this;p.idproblem="",p.initOnion3Layer=i,p.move=!1,p.onion3LayerList=[],p.inProcessing=!1,p.saveOnion3Layer=a,p.setOpenEdit=s,p.delPostIt=c,p.addPostIt=u,p.acende=m,p.apaga=d,p.localcode="",e.on("onBroadcastOnion3LayerSave",function(e){angular.forEach(p.onion3LayerList,function(t){t._id==e._id&&(t.title=e.title,t.description=e.description,t.openEdit=!1,t.layer=e.layer,t.x=e.x,t.y=e.y,t.zindex=1)})}),e.on("onBroadcastOnion3LayerEdit",function(e){angular.forEach(p.onion3LayerList,function(t){t._id===e&&(t.openEdit=!0,t.zindex=9999)})}),e.on("onBroadcastOnion3LayerRemove",function(e){var t=document.getElementById("postit"+p.onion3LayerList[e]._id);t.style.display="none",p.onion3LayerList.splice(e,1)}),e.on("onBroadcastOnion3LayerMove",function(e){p.localcode!==e.localcode&&(document.getElementById("postit"+e._id).style.left=e.x,document.getElementById("postit"+e._id).style.top=e.y)}),e.on("onBroadcastOnion3LayerAdd",function(e){p.localcode!==e.localcode?(e.postit.openEdit=!1,e.postit.title="new Postit"):e.postit.openEdit=!0,p.onion3LayerList.push(e.postit)})}angular.module("app").controller("onion3LayerController",t),t.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,t,o,n){function r(){a.idProblem=e.localStorage.getItem("problemid"),t.getproblemreport(a.idProblem).success(function(e){e.success?(angular.forEach(e.problem.stakeholders,function(e){e.x=parseInt(e.x.substring(0,e.x.length-2))-100+"px",e.y=parseInt(e.y.substring(0,e.y.length-2))+400+"px"}),a.problem=e.problem):o.errorMessage(e.message)})}function i(){n.go("problem.stakeholders")}var a=this;a.idProblem,a.problem,a.initProblemPeport=r,a.systemReturn=i}angular.module("app").controller("problemReportController",e),e.$inject=["$window","problemService","toastApp","$state"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(k,t)}function n(t){return e.get(w+"?idproblem="+t)}function r(t){return e.get(y+"?idproblem="+t)}function i(t){return e.get(b+"?email="+t)}function a(t){return e.get(S+"?idproblem="+t)}function s(t){return e.post(L,t)}function l(t){return e.get(A+"?idproblem="+t)}function c(t){return e.get(M+"?idproblem="+t)}function u(t){return e.get(E+"?idproblem="+t)}function m(t){return e.get(C+"?idproblem="+t)}function d(t){return e.get(I+"?idproblem="+t)}function p(t){return e.get(P+"?idproblem="+t)}function g(t){return e.get(v+"?email="+t)}function f(t){return e.get($+"?idproblem="+t.idproblem+"&email="+t.email)}function h(t){return e.get(x+"?idproblem="+t)}var b="/api/problem/getproblems",v="/api/problem/getproblemscollaborator",k="/api/problem/newproblem",y="/api/problem/getproblem",w="/api/problem/getproblemreport",S="/api/problem/getcollaborators",L="/api/problem/invite",A="/api/problem/getonion",E="/api/problem/getevaluation",C="/api/problem/getsemiotic",I="/api/problem/getcarf",P="/api/problem/removeproblem",$="/api/problem/removecollaborator",x="/api/problem/historychat",M="/api/problem/getonion3layer",O={newproblem:o,getuserproblems:i,getproblem:r,getcollaborators:a,invite:s,getonion:l,getevaluation:u,getsemiotic:m,getcarf:d,removeproblem:p,getproblemscollaborator:g,removecollaborators:f,gethistorychat:h,getproblemreport:n,getonion3layer:c};return O}angular.module("app").factory("problemService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e,t,o,n){function r(){m.idproblem=t.localStorage.getItem("problemid"),o.getsemiotic(m.idproblem).success(function(e){e.success?m.semioticframework=e.semioticframework:n.errorMessage(e.message)})}function i(t,o){var n={text:t,update:o};e.emit("updateSocialWorld",n)}function a(t,o){var n={text:t,update:o};e.emit("updatePragmatic",n)}function s(t,o){var n={text:t,update:o};e.emit("updateSemantic",n)}function l(t,o){var n={text:t,update:o};e.emit("updateSyntatic",n)}function c(t,o){var n={text:t,update:o};e.emit("updateEmpirical",n)}function u(t,o){var n={text:t,update:o};e.emit("updatePhysical",n)}var m=this;m.idproblem="",m.saveSocialWorld=i,m.savePragmatic=a,m.saveSemantic=s,m.saveSyntatic=l,m.saveEmpirical=c,m.savePhysical=u,m.semioticframework="",m.initSemioticFramework=r,e.on("onUpdateSocialWorld",function(e){m.semioticframework.socialworld=e}),e.on("onUpdatePragmatic",function(e){m.semioticframework.pragmatic=e}),e.on("onUpdateSemantic",function(e){m.semioticframework.semioticramework=e}),e.on("onUpdateSyntatic",function(e,t){m.semioticframework.syntatic=e}),e.on("onUpdateEmpirical",function(e){m.semioticframework.empirical=e}),e.on("onUpdatePhysical",function(e){m.semioticframework.physical=e})}angular.module("app").controller("semioticframeworkController",e),e.$inject=["Socket","$window","problemService","toastApp"]}(),function(e){"use strict";function t(e,t,o,n,r){function i(){p.idproblem=t.localStorage.getItem("problemid"),p.localcode=t.localStorage.getItem("localcode"),o.getonion(p.idproblem).success(function(e){e.success?p.stakeholderList=e.stakeholders:r.errorMessage(e.message)}),p.inProcessing=!1}function a(t){e.emit("broadcastOnionSave",t)}function s(t){angular.forEach(p.stakeholderList,function(e){e._id===t&&(e.openEdit=!0,e.zindex=9999)}),e.emit("broadcastOnionEdit",t)}function l(t,o){var n={index:t,stakeholder:o};e.emit("broadcastOnionRemove",n)}function c(e,t,o){var r=n.confirm().parent(angular.element(document.body)).title("Detete Stakeholder?").content("Title: "+o.name).ariaLabel("Remove Stakeholder").ok("Yes!").cancel("Cancel").targetEvent(e);n.show(r).then(function(){l(t,o)})}function u(t,o){e.emit("broadcastOnionAdd",{stakeholder:{onionlayer:o,name:"",description:"",openEdit:!0,x:t.pageX+"px",y:t.pageY+"px",zindex:9999},localcode:p.localcode})}function m(e){document.getElementById("name"+e).setAttribute("style","text-decoration: underline;"),document.getElementById(e).setAttribute("style","fill:#D1C4E9;"),document.getElementById("legend"+e).setAttribute("style","fill:#D1C4E9;")}function d(e,t){document.getElementById("name"+e).setAttribute("style","text-decoration: none;"),document.getElementById(e).setAttribute("style","fill: "+t+";"),document.getElementById("legend"+e).setAttribute("style","fill: "+t+";")}var p=this;p.idproblem="",p.stakeholderList=[],p.stakeholder="",p.intitOnion=i,p.move=!1,p.inProcessing=!0,p.saveStakeholder=a,p.setOpenEdit=s,p.delPostIt=c,p.addPostIt=u,p.acende=m,p.apaga=d,p.localcode="",e.on("onBroadcastOnionSave",function(e){angular.forEach(p.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.zindex=1)})}),e.on("onBroadcastOnionEdit",function(e){angular.forEach(p.stakeholderList,function(t){t._id===e&&(t.openEdit=!0,t.zindex=9999)})}),e.on("onBroadcastOnionRemove",function(e){var t=document.getElementById("stakeholder"+p.stakeholderList[e]._id);t.style.display="none",p.stakeholderList.splice(e,1)}),e.on("onBroadcastMove",function(e){p.localcode!==e.localcode&&(document.getElementById("stakeholder"+e._id).style.left=e.x,document.getElementById("stakeholder"+e._id).style.top=e.y)}),e.on("onBroadcastOnionAdd",function(e){console.log(e.stakeholder),p.localcode!==e.localcode?(e.stakeholder.openEdit=!1,e.stakeholder.name="New"):e.stakeholder.openEdit=!0,p.stakeholderList.push(e.stakeholder)})}angular.module("app").controller("stakeholderController",t),t.$inject=["Socket","$window","problemService","$mdDialog","toastApp"]}(this),function(){"use strict";function e(e,t,o,n,r,i,a){function s(){h.userid=r.localStorage.getItem("userid"),h.nickname=r.localStorage.getItem("nickname"),h.useremail=r.localStorage.getItem("useremail"),h.photo=r.localStorage.getItem("photo"),i.getuserproblems(h.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)e.problems[t].description.length>300?e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,280):e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"");h.problemList=e.problems,i.getproblemscollaborator(h.useremail).success(function(e){if(e.success){for(var t=0;t<e.problems.length;t++)null!==e.problems[t].description&&(e.problems[t].description.length>300?e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,"").substring(0,280):e.problems[t].description=e.problems[t].description.replace(/(<([^>]+)>)/gi,""));h.problemCollaboratorList=e.problems}else a.errorMessage(e.message)})}else a.errorMessage(e.message)}),h.loginInProgress=!1}function l(e){i.removeproblem(e).success(function(t){if(t.success){for(var o=0;o<h.problemList.length;o++)if(h.problemList[o]._id==e){h.problemList.splice(o,1);break}}else a.errorMessage(t.message)})}function c(t,o){var n=e.confirm().parent(angular.element(document.body)).title("Detete Problem?").content("Title: "+o.title).ariaLabel("Remove Problem").ok("Desejo remover!").cancel("Cancel").targetEvent(t);e.show(n).then(function(){l(o._id)})}function u(e){e.userid=h.userid,i.newproblem(e).success(function(e){e.success?h.editProblem(e.problem):a.errorMessage(e.message)})}function m(e){r.localStorage.setItem("problemid",e._id),t.go("problem.stakeholders")}function d(){o.logout(),t.go("init.login")}function p(){t.go("profile")}function g(t){e.show({controller:f,templateUrl:"views/pages/newproblem.html",parent:angular.element(document.body),targetEvent:t})}function f(e,t,o){e.items=["LABEL_ARTIFACT_STAKEHOLDERS","LABEL_ARTIFACT_EVALUATIONFRAMEWORK","LABEL_ARTIFACT_SEMIOTICFRAMEWORK","LABEL_ARTIFACT_VIF","LABEL_ARTIFACT_CARF","LABEL_ARTIFACT_ONION"],e.selected=[],e.toggle=function(e,o){var n=o.indexOf(e);if(n>-1)if("LABEL_ARTIFACT_STAKEHOLDERS"!==e)o.splice(n,1);else if(2===o.length){var r=o.indexOf("LABEL_ARTIFACT_SEMIOTICFRAMEWORK");r>-1&&o.splice(n,1)}else 1===o.length?o.splice(n,1):a.errorMessage(t("translate")("LABEL_ARTIFACT_STAKEHOLDERS_NECESSARY"));else"LABEL_ARTIFACT_SEMIOTICFRAMEWORK"!=e?(n=o.indexOf("LABEL_ARTIFACT_STAKEHOLDERS"),0>n?(o.push("LABEL_ARTIFACT_STAKEHOLDERS"),"LABEL_ARTIFACT_STAKEHOLDERS"!==e&&o.push(e)):o.push(e)):o.push(e)},e.exists=function(e,t){return t.indexOf(e)>-1},e.isIndeterminate=function(){return 0!==e.selected.length&&e.selected.length!==e.items.length},e.isChecked=function(){return e.selected.length===e.items.length},e.toggleAll=function(){e.selected.length===e.items.length?e.selected=[]:(0===e.selected.length||e.selected.length>0)&&(e.selected=e.items.slice(0))},e.artifactList=[],e.hide=function(){o.hide()},e.cancel=function(){o.cancel()},e.addNewProblem=function(n){return e.selected.length<1?void a.errorMessage(t("translate")("LABEL_CHOICE_ARTIFACTS")):(n.artifacts=e.selected,h.startNewProblem(n),void o.cancel())}}var h=this;h.nickname="",h.userid="",h.useremail="",h.problemList=[],h.problemCollaboratorList=[],h.loginInProgress=!0,h.getProblems=s,h.revomveProblem=c,h.startNewProblem=u,h.editProblem=m,h.doLogout=d,h.newProblem=g,h.editProfile=p,h.photo,f.$inject=["$scope","$filter","$mdDialog"]}angular.module("app").controller("startProblemController",e),e.$inject=["$mdDialog","$state","Auth","Socket","$window","problemService","toastApp"]}(),function(){"use strict";function e(e,t,o,n){function r(){u.idproblem=e.localStorage.getItem("problemid"),t.getonion(u.idproblem).success(function(e){if(e.success){if(e.stakeholders.length>0){for(var t=1;t<u.sugestionValuesArray.length;t++)u.sugestionValues+=u.sugestionValuesArray[t]+", ";u.sugestionValues[u.sugestionValuesArray[u.sugestionValuesArray.length-1]]+".";for(var n=0;n<e.stakeholders.length;n++)for(var r=0;r<u.stakeholderList.length;r++){var i={_id:e.stakeholders[n]._id,onionlayer:e.stakeholders[n].onionlayer,values:e.stakeholders[n].values,name:e.stakeholders[n].name,description:e.stakeholders[n].description,openEdit:e.stakeholders[n].openEdit,x:e.stakeholders[n].x,y:e.stakeholders[n].y,newValues:[]};e.stakeholders[n].onionlayer!=u.stakeholderList[r].onionlayer||u.stakeholderList[r].stakeholders.push(i)}}u.inProcessing=!1}else o.errorMessage(e.message)})}function i(e){e.openEdit=!0}function a(e){e.openEdit=!1}function s(e,t){for(var o=[],r=0;r<t.values.length;r++)t.values[r]!=e&&o.push(t.values[r]);t.values=o,n.emit("broadcastOnionSave",t)}function l(e){if(""===e.newValues||void 0===e.newValues)o.errorMessage("Valor não especificado.");else{for(var t=e.newValues.split(","),r=0;r<t.length;r++)c(e.values,t[r])?o.errorMessage("Duplicate value: "+t[r]):e.values.push(t[r]);e.newValues="",e.openEdit=!1,n.emit("broadcastOnionSave",e)}}function c(e,t){for(var o=0;o<e.length;o++)if(t===e[o])return!0;return!1}var u=this;u.inProcessing=!0,u.idProblem="",u.useremail="",u.newvalues="",u.initValueIdentificationFrame=r,u.setSuggestionShow=i,u.leaveSuggestionShow=a,u.removeValueIdentication=s,u.setValueIdentication=l,u.sugestionValues="",u.stakeholderList=[{onionlayer:"Community",stakeholders:[]},{onionlayer:"Market",stakeholders:[]},{onionlayer:"Source",stakeholders:[]},{onionlayer:"Contribution",stakeholders:[]},{onionlayer:"Technico",stakeholders:[]}],u.sugestionValuesArray=["Acessibilidade","Adaptabilidade","Estética","Autonomia","Disponibilidade","Consciência","Colaboração","Conversação","Emoção e Afeto","Grupos","Identidade","Consentimento informado","Meta-comunicação","Normas","Objeto","Portabilidade","Presença","Privacidade","Propriedade","Reciprocidade, Relacionamento, Reputação","Escalabilidade","Segurança","Compartilhamento","Confiança","Usabilidade","Visibilidade"],n.on("onBroadcastOnionSave",function(e){angular.forEach(u.stakeholderList,function(t){t._id==e._id&&(t.stakeholder=e.stakeholder,t.name=e.name,t.description=e.description,t.openEdit=e.openEdit,t.x=e.x,t.y=e.y,t.newValues=[])})})}angular.module("app").controller("valueIdentificationFrameController",e),e.$inject=["$window","problemService","toastApp","Socket"]}(),function(){"use strict";function e(e,t,o,n,r,i){function a(){e.emit("disconnectProblem",t.localStorage.getItem("nickname")),o.go("startproblem")}function s(){c.userid=t.localStorage.getItem("userid"),void 0!==c.userid}function l(e){var o={userid:t.localStorage.getItem("userid"),photo:e};i.uploadPhoto(o).success(function(o){o.success?t.localStorage.setItem("photo",e):n.errorMessage("-----")})}var c=this;c.startProfile=s,c.uploadInProgress=!0,c.uploadProgress=0,c.userid,c.savePhoto=l,c.systemReturn=a,c.myImage="",c.myCroppedImage="";var u=function(e){var t=e.currentTarget.files[0],o=new FileReader;o.onload=function(e){r.$apply(function(t){t.myImage=e.target.result})},o.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",u)}angular.module("app").controller("profileController",e),e.$inject=["Socket","$window","$state","toastApp","$scope","signupService"]}(),function(){"use strict";function e(e,t,o,n,r,i,a,s,l){function c(e){o.create(e).success(function(t){t.success?(r.errorMessage(s("translate")("WELCOME_SYSTEM")+e.nickname),n.go("init.login")):r.errorMessage("Email Já cadastrado")})}function u(t){e.use(t)}function m(e){o.rescuePassword(e).success(function(t){t.success?(r.errorMessage("Email com instruções enviado para "+e.email),n.go("init.login")):r.errorMessage("Error")})}function d(e){o.changePassword(e).success(function(e){e.success?(r.errorMessage("Senha alterada com sucesso. Faça login com a nova senha."),n.go("init.login")):r.errorMessage("Error")})}var p=this;p.message="",p.saveUser=c,p.rescuePassword=m,p.changePassword=d,p.setLang=u,p.loginInProgress=!1}angular.module("app").controller("signupController",e),e.$inject=["$translate","$window","signupService","$state","toastApp","AuthToken","Auth","$filter","$stateParams"]}(),function(){"use strict";function e(e,t){function o(t){return e.post(m,t)}function n(t){return e.post(s,t)}function r(t){return e.post(l,t)}function i(o){var n=t.search();return e.get(c+"?mytoken="+n.mytoken+"&password="+o.password)}function a(t){return e.post(u,t)}var s="/api/signup/",l="/api/rescuepasswd/",c="/api/rescuepasswd/newpasswd/",u="/api/profile/photo/",m="/api/sendmessage/",d={create:n,rescuePassword:r,changePassword:i,uploadPhoto:a,sendemailDSC:o};return d}angular.module("app").factory("signupService",e),e.$inject=["$http","$location"]}(),function(){"use strict";function e(e){var t=e.extendPalette("teal",{50:"E0F2F1",100:"B2DFDB",200:"80CBC4",300:"4DB6AC",400:"26A69A",500:"009688",600:"00897B",700:"00796B",800:"00695C",900:"004D40",A100:"A7FFEB",A200:"64FFDA",A400:"1DE9B6",A700:"00BFA5",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],
contrastLightColors:void 0});e.definePalette("teal",t),e.theme("default").primaryPalette("teal").accentPalette("green")}angular.module("app").config(e),e.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken",function(e,t,o){var n={};return n.login=function(t,n){return e.post("/api/login",{email:t,password:n}).success(function(e){return o.setToken(e.token),e})},n.logout=function(){o.setToken()},n.isLoggedIn=function(){return o.getToken()?!0:!1},n.getUser=function(n){return o.getToken()?e.get("/api/me/?userid="+n):t.reject({message:"User has no token"})},n}]).factory("AuthToken",["$window",function(e){var t={};return t.getToken=function(){return e.localStorage.getItem("token")},t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token")},t}]).factory("AuthInterceptor",["$q","$location","AuthToken",function(e,t,o){var n={};return n.request=function(e){var t=o.getToken();return t&&(e.headers["x-access-token"]=t),e},n}])}(),angular.module("DropDSC",[]).directive("draggable",["$document","Socket","$window",function(e,t,o){return{restrict:"A",replace:!0,link:function(o,n,r){function i(e){var t=e.target.id;"svg"==t&&(t=""),o.stakeholder.onionlayer=t,y=e.pageY,x=e.pageX,n.css({top:y+"px",left:x+"px"}),o.stakeholder.x=x+"px",o.stakeholder.y=y+"px"}function a(e){var t=e.target.id;"svg"==t&&(t=""),o.postit.layer=t,y=e.pageY,x=e.pageX,n.css({top:y+"px",left:x+"px"}),o.postit.x=x+"px",o.postit.y=y+"px"}function s(){e.unbind("mousemove",i),e.unbind("mouseup",s),t.emit("broadcastMove",o.stakeholder)}function l(){e.unbind("mousemove",a),e.unbind("mouseup",l),t.emit("broadcastOnion3LayerMove",o.postit)}n.on("mousedown",function(t){"stakeholder"==t.target.id.substring(0,11)?(t.preventDefault(),e.bind("mousemove",i),e.bind("mouseup",s)):"postit"==t.target.id.substring(0,6)&&(t.preventDefault(),e.bind("mousemove",a),e.bind("mouseup",l))})}}}]),function(e){angular.module("appRxDrag",["rx"]).directive("rxdraggable",["$document","$window","rx","Socket",function(e,t,o,n){return function(r,i,a){var s=t.localStorage.getItem("localcode"),l=o.Observable.fromEvent(i,"mouseup"),c=o.Observable.fromEvent(e,"mousemove"),u=o.Observable.fromEvent(i,"mousedown").map(function(e){return e.preventDefault(),{left:e.clientX-i[0].getBoundingClientRect().left,top:e.clientY-i[0].getBoundingClientRect().top}}),m=u.selectMany(function(e){return c.map(function(t){return{left:t.clientX-e.left,top:t.clientY-e.top}}).takeUntil(l)});m.subscribe(function(e){i.css({top:e.top+"px",left:e.left+"px"}),e.localcode=s,n.emit("broadcastMove",e)})}}])}.call(this),function(){"use strict";function e(e,t,o,n,r,i,a,s){function l(e){t.use(e)}function c(){return Math.random()+Math.floor(10*Math.random())}function u(e){d.inProcessing=!0,d.error="",r.login(e.email,e.password).success(function(e){i.localStorage.setItem("useremail",e.email),i.localStorage.setItem("userid",e.id),i.localStorage.setItem("localcode",e.id+"-"+c()),i.localStorage.setItem("nickname",e.nickname),d.setLang(e.language),d.inProcessing=!1,r.getUser(e.id).then(function(t){s.errorMessage(a("translate")("WELCOME_SYSTEM")+": "+e.nickname),e.success?(i.localStorage.setItem("photo",t.data.photo),n.go("startproblem")):s.errorMessage("Usuário e senha não conferem.")})})}function m(){r.logout(),n("init")}var d=this;d.inProcessing=!1,d.setLang=l,d.doLogout=m,d.doLogin=u,d.loggedIn=r.isLoggedIn(),o.$on("$routeChangeStart",function(){d.loggedIn=r.isLoggedIn(),r.getUser().then(function(e){d.user=e.data})})}angular.module("app").controller("loginController",e),e.$inject=["Socket","$translate","$rootScope","$state","Auth","$window","$filter","toastApp"]}(),function(){"use strict";angular.module("app").service("Socket",["$location","$timeout",function(e,t){this.socket=io(),this.on=function(e,o){this.socket&&this.socket.on(e,function(e){t(function(){o(e)})})},this.emit=function(e,t){this.socket&&this.socket.emit(e,t)},this.removeListener=function(e){this.socket&&this.socket.removeListener(e)}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRzYy5hcHAuanMiLCJ0b2FzdC5zZXJ2aWNlLmpzIiwicm91dGVyLmFwcC5qcyIsImFwcC5kc2MubWluLmpzIiwiZmVlZGJhY2svaGVscC5jb250cm9sbGVyLmpzIiwibGFuZ3VhZ2UvdHJhbnNsYXRlLmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL2NhcmYuY29udHJvbGxlci5qcyIsInByb2JsZW0vY2hhdC5jb250cm9sbGVyLmpzIiwicHJvYmxlbS9kc2NyZXNwb3J0LmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL2V2YWx1YXRpb25mcmFtZXdvcmsuY29udHJvbGxlci5qcyIsInByb2JsZW0vbWVudS5wcm9ibGVtLmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL29uaW9uLmVkaXQuY29udHJvbGxlci5qcyIsInByb2JsZW0vcHJvYmxlbS5yZXBvcnQuY29udHJvbGxlci5qcyIsInByb2JsZW0vcHJvYmxlbS5zZXJ2aWNlLmpzIiwicHJvYmxlbS9zZW1pb3RpY2ZyYW1ld29yay5lZGl0LmNvbnRyb2xsZXIuanMiLCJwcm9ibGVtL3N0YWtlaG9sZGVyLmVkaXQuY29udHJvbGxlci5qcyIsInByb2JsZW0vc3RhcnQucHJvYmxlbS5jb250cm9sbGVyLmpzIiwicHJvYmxlbS92YWx1ZWRlbnRpZmljYXRpb25mcmFtZS5jb250cm9sbGVyLmpzIiwidXNlci9wcm9maWxlLmNvbnRyb2xsZXIuanMiLCJ1c2VyL3NpZ251cC5jb250cm9sbGVyLmpzIiwidXNlci9zaWdudXAuc2VydmljZS5qcyIsImFwcC5jb25maWcuanMiLCJhdXRoLnNlcnZpY2UuanMiLCJkcmFnLmRzYy5qcyIsImRyYWdyeC5kc2MuanMiLCJsb2dpbi5jb250cm9sbGVyLmpzIiwic29ja2V0LnNlcnZpY2UuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRodHRwUHJvdmlkZXIiLCJpbnRlcmNlcHRvcnMiLCJwdXNoIiwidG9hc3RBcHAiLCIkbWRUb2FzdCIsImVycm9yTWVzc2FnZSIsInRoaXMiLCJtZXNzYWdlIiwic2hvdyIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJ0ZW1wbGF0ZVVybCIsImFjdGlvbiIsImhpZ2hsaWdodEFjdGlvbiIsInBvc2l0aW9uIiwiaGlkZURlbGF5IiwiZXJyb3JNZXNzYWdlQm90dG9tIiwic2VydmljZSIsInNlbGYiLCJjbG9zZVRvYXN0IiwiaGlkZSIsImZhY3RvcnkiLCIkaW5qZWN0Iiwicm91dGVzIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJzdGF0ZSIsInVybCIsInZpZXdzIiwiY29udGVudC10YWIiLCJkc2MtYXJ0aWZhY3QiLCJvdGhlcndpc2UiLCJoZWxwQ29udHJvbGxlciIsIiRtZERpYWxvZyIsIm9wZW5Gb3JtRW1haWwiLCJldiIsIkhlbHBFbWlsQ29udHJvbGxlciIsInBhcmVudCIsImVsZW1lbnQiLCJkb2N1bWVudCIsImJvZHkiLCJ0YXJnZXRFdmVudCIsIiRzY29wZSIsInNpZ251cFNlcnZpY2UiLCIkd2luZG93Iiwic2VuZEVtYWlsRFNDIiwibmlja25hbWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiZW1pbENvbnRhY3QiLCJzZW5kZW1haWxEU0MiLCJzdWNjZXNzIiwiZGF0YSIsImNhbmNlbCIsImJ1dHRvbmhlbHAiLCJyZXN0cmljdCIsImRpcmVjdGl2ZSIsImluaXRMYW5ndWFnZSIsIiR0cmFuc2xhdGVQcm92aWRlciIsInVzZVN0YXRpY0ZpbGVzTG9hZGVyIiwicHJlZml4Iiwic3VmZml4IiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJ1c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kiLCJ1c2VMb2NhbFN0b3JhZ2UiLCJsYW5ndWFnZUNvbnRyb2xsZXIiLCIkdHJhbnNsYXRlIiwic2V0TGFuZyIsImxhbmdLZXkiLCJ1c2UiLCJjaGFuZ2VMYW5ndWFnZSIsImNhcmZDb250cm9sbGVyIiwiU29ja2V0IiwicHJvYmxlbVNlcnZpY2UiLCJpbml0Q2FyZiIsImlkUHJvYmxlbSIsImdldGNhcmYiLCJsb2NhbFN0YWtlaG9sZGVycyIsInN0YWtlaG9sZGVycyIsInN0YWtlaG9sZGVyTGlzdCIsImNhcmZMaXN0IiwiY2FyZiIsImNhcmZQcmlvcml0eUxpc3QiLCJsb2NhbFByaW9yaXR5TGlzdCIsImluUHJvY2Vzc2luZyIsInJlc2V0Q2FyZiIsIl9pZCIsInBtcyIsInZhbHVlcyIsInByaW9yaXR5IiwicmVxdWlyZW1lbnQiLCJ2YWx1ZUxpc3QiLCJhZGRwbXN2YWx1ZSIsImxlbmd0aCIsImVtaXQiLCJyZW1vdmVDQVJGIiwiaW5kZXgiLCJvYmoiLCJzZWxlY3RQTVNWYWx1ZSIsInVuZGVmaW5lZCIsImZvckVhY2giLCJjYXJmUE1TVmFsdWUiLCJwbXNfdmFsdWUiLCJzZXRQcmlvdGl0eSIsImFkZExpc3RWYWx1ZSIsIm5ld3ZhbHVlIiwiaSIsInNwbGljZSIsImFkZFN0YWtlaG9sZGVyIiwibmV3U3Rha2Vob2xkZXIiLCJvbiIsImlkIiwiY2hhdERTQyIsIiR0aW1lb3V0IiwiJGZpbHRlciIsInNob3dVc2Vyc09uTGluZSIsInVzZXJzT25MaW5lIiwic2hvd1VzZXIiLCJvcGVuQ2hhdCIsImlzT3BlbkNoYXQiLCJnZXRFbGVtZW50QnlJZCIsImZvY3VzIiwiaW5pdEhpc3RvcnlDaGF0IiwicGhvdG8iLCJnZXRoaXN0b3J5Y2hhdCIsImhpc3RvcnljaGF0IiwidG1wIiwiRGF0ZSIsInRpbWUiLCJtc24iLCJtc2ciLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsIm1lc3NhZ2VzIiwic2V0VXNlcnNMaXN0Iiwic29ydCIsInNob3dSZXBsYXkiLCJyZXBsYXkiLCJzZW5kTWVzc2FnZSIsImNoYXRtc2ciLCJuZXdtc2ciLCJjb250YWRvciIsInplcmFyQ29udGFkb3IiLCJrZXlwcmVzc0NoYXQiLCJldmVudCIsImtleUNvZGUiLCJkc2NSZXBvcnRDb250cm9sbGVyIiwiYnVpZFJlcG9ydCIsImh0bWwiLCJwZGYiLCJqc1BERiIsImFkZEhUTUwiLCJwYWdlc3BsaXQiLCJkaXNwb3NlIiwic2F2ZSIsImlkcHJvYmxlbSIsImV2YWx1YXRpb25mcmFtZXdvcmtDb250cm9sbGVyIiwiaW5pdEV2YWx1YXRpb24iLCJnZXRldmFsdWF0aW9uIiwiZXZhbHVhdGlvbmZyYW1ld29ya0xpc3QiLCJldmFsdWF0aW9uZnJhbWV3b3JrIiwic2F2ZUZyYW1lIiwic3Rha2Vob2xkZXIiLCJzZXRPcGVuRWRpdERpc2N1dGlvbiIsImN1cnJlbnRTdGFrZWhvbGRlciIsIm9wZW5FZGl0Iiwib25pb25sYXllciIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInByb2JsZW1zIiwic29sdXRpb25zIiwic3Rha2Vob2xkZXJPbmlvbiIsIm1lbnVQcm9ibGVtYUNvbnRyb2xsZXIiLCJBdXRoIiwiJHN0YXRlIiwic2F2ZVByb2JsZW0iLCJwcm9ibGVtIiwibG9jYWxjb2RlIiwiZm9ybUVkaXRQcm9ibGVtIiwiRGlhbG9nRWRpdFByb2JsZW1Db250cm9sbGVyIiwiZ2V0UHJvYmxlbUVkaXQiLCJnZXRwcm9ibGVtIiwic2V0VXBkYXRlIiwidXBkYXRlVHJ1ZSIsInByb2JsZW1VcGRhdGUiLCJjb25zb2xlIiwibG9nIiwidXBkYXRlIiwic2F2ZURlc2NyaXB0aW9uIiwiZm9ybUludml0ZUNvbGxhYm9yYXRvciIsIkRpYWxvZ0ludml0ZUNvbGxhYm9yYXRvckNvbnRyb2xsZXIiLCJpbml0Q29sbGFib3JhdG9ycyIsInVzZXJlbWFpbCIsImdldGNvbGxhYm9yYXRvcnMiLCJjb2xsYWJvcmF0b3JzIiwic2VhcmNoQ2FsbGFib3JhdGlvbiIsImVtYWlsIiwiYWRkQ29sbGFib3JhdG9yIiwiaW52aXRlIiwiYWxlcnREZWxldGVDb2xsYWJvcmF0b3IiLCJjb2xsYWJvcmF0b3IiLCJpc0RlbGV0ZWQiLCJyZW1vdmVDb2xsYWJvcmF0b3IiLCJyZW1vdmVjb2xsYWJvcmF0b3JzIiwiaXNEZWxldGVDb2xsYWJvcmF0b3IiLCJnZXRDdXJyZW50UHJvYmxlbSIsImFydGlmYWN0cyIsImFydGlmYWN0Iiwic3BsaXQiLCJkc2NfYXJ0aWZhY3RzIiwidG9Mb3dlckNhc2UiLCJsYWJlbCIsImluaXRzb2NrZXRwcm9ibGVtIiwic3lzdGVtUmV0dXJuIiwiZ28iLCJmb3JtQWRkQ29sbGFib3JhdG9ycyIsImZvcm1Qcm9ibGVtUmVwb3J0IiwiZWRpdERlc2NyaXB0aW9uUHJvYmxlbSIsImRvTG9nb3V0IiwibG9nb3V0IiwicmV0b3JubyIsInNldERlc2NyaXRpb24iLCJzZWxlY3RlZEluZGV4Iiwic2VsZWN0ZWQiLCJwcmV2aW91cyIsIiR3YXRjaCIsImN1cnJlbnQiLCJvbmlvbjNMYXllckNvbnRyb2xsZXIiLCJpbml0T25pb24zTGF5ZXIiLCJnZXRvbmlvbjNsYXllciIsInBvc3RpdHMiLCJwb3N0aXQiLCJvbmlvbjNMYXllckxpc3QiLCJzYXZlT25pb24zTGF5ZXIiLCJzZXRPcGVuRWRpdCIsInJlbW92ZVBvc3RJdCIsImRlbFBvc3RJdCIsImNvbmZpcm0iLCJ0aXRsZSIsImNvbnRlbnQiLCJhcmlhTGFiZWwiLCJvayIsInRoZW4iLCJhZGRQb3N0SXQiLCJlIiwiY2FtYWRhIiwibGF5ZXIiLCJ4IiwicGFnZVgiLCJ5IiwicGFnZVkiLCJ6aW5kZXgiLCJhY2VuZGUiLCJzZXRBdHRyaWJ1dGUiLCJhcGFnYSIsImNvbG9yIiwibW92ZSIsInN0eWxlIiwiZGlzcGxheSIsImxlZnQiLCJ0b3AiLCJwcm9ibGVtUmVwb3J0Q29udHJvbGxlciIsImluaXRQcm9ibGVtUGVwb3J0IiwiZ2V0cHJvYmxlbXJlcG9ydCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiJGh0dHAiLCIkbG9jYXRpb24iLCJuZXdwcm9ibGVtIiwicG9zdCIsIkFQSV9ST1VURV9ORVdQUk9CTEVNIiwiZ2V0IiwiQVBJX1JPVVRFX0dFVFBST0JMRU1SRVBPUlQiLCJBUElfUk9VVEVfR0VUUFJPQkxFTSIsImdldHVzZXJwcm9ibGVtcyIsIkFQSV9ST1VURV9HRVRVU0VSUFJPQkxFTVMiLCJBUElfUk9VVEVfR0VUQ09MTEFCT1JBVE9SUyIsIkFQSV9ST1VURV9JTlZJVEUiLCJnZXRvbmlvbiIsIkFQSV9ST1VURV9HRVRPTklPTiIsIkFQSV9ST1VURV9HRVRPTklPTjNMQUxZRVIiLCJBUElfUk9VVEVfR0VURVZBTFVBVElPTiIsImdldHNlbWlvdGljIiwiQVBJX1JPVVRFX0dFVFNFTUlPVElDRlJBTUVXT1JLIiwiQVBJX1JPVVRFX0dFVENBUkYiLCJyZW1vdmVwcm9ibGVtIiwiQVBJX1JPVVRFX1JFTU9WRVBST0JMRU0iLCJnZXRwcm9ibGVtc2NvbGxhYm9yYXRvciIsIkFQSV9ST1VURV9HRVRVU0VSUFJPQkxFTVNDT0xMQUJPUkFUT1IiLCJBUElfUk9VVEVfUkVNT1ZFQ09MTEFCT1JBVE9SIiwiQVBJX1JPVVRFX0dFVEhJU1RPUllDSEFUIiwic2VtaW90aWNmcmFtZXdvcmtDb250cm9sbGVyIiwiaW5pdFNlbWlvdGljRnJhbWV3b3JrIiwic2VtaW90aWNmcmFtZXdvcmsiLCJzYXZlU29jaWFsV29ybGQiLCJ0ZXh0IiwiZmxhZ1NhdmUiLCJzYXZlUHJhZ21hdGljIiwic2F2ZVNlbWFudGljIiwic2F2ZVN5bnRhdGljIiwic2F2ZUVtcGlyaWNhbCIsInNhdmVQaHlzaWNhbCIsInNvY2lhbHdvcmxkIiwicHJhZ21hdGljIiwic2VtaW90aWNyYW1ld29yayIsInN5bnRhdGljIiwiZW1waXJpY2FsIiwicGh5c2ljYWwiLCJzdGFrZWhvbGRlckNvbnRyb2xsZXIiLCJpbnRpdE9uaW9uIiwic2F2ZVN0YWtlaG9sZGVyIiwic3RhcnRQcm9ibGVtQ29udHJvbGxlciIsImdldFByb2JsZW1zIiwidXNlcmlkIiwicmVwbGFjZSIsInByb2JsZW1MaXN0IiwicHJvYmxlbUNvbGxhYm9yYXRvckxpc3QiLCJsb2dpbkluUHJvZ3Jlc3MiLCJkZWxldGVQcm9ibGVtIiwicHJvYmxlbWlkIiwicmV2b212ZVByb2JsZW0iLCJzdGFydE5ld1Byb2JsZW0iLCJlZGl0UHJvYmxlbSIsInNldEl0ZW0iLCJlZGl0UHJvZmlsZSIsIm5ld1Byb2JsZW0iLCJEaWFsb2dDb250cm9sbGVyIiwiaXRlbXMiLCJ0b2dnbGUiLCJpdGVtIiwibGlzdCIsImlkeCIsImluZGV4T2YiLCJpZHhTRiIsImV4aXN0cyIsImlzSW5kZXRlcm1pbmF0ZSIsImlzQ2hlY2tlZCIsInRvZ2dsZUFsbCIsInNsaWNlIiwiYXJ0aWZhY3RMaXN0IiwiYWRkTmV3UHJvYmxlbSIsInZhbHVlSWRlbnRpZmljYXRpb25GcmFtZUNvbnRyb2xsZXIiLCJpbml0VmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lIiwiayIsInN1Z2VzdGlvblZhbHVlc0FycmF5Iiwic3VnZXN0aW9uVmFsdWVzIiwiaiIsIm5ld1ZhbHVlcyIsInNldFN1Z2dlc3Rpb25TaG93IiwibGVhdmVTdWdnZXN0aW9uU2hvdyIsInJlbW92ZVZhbHVlSWRlbnRpY2F0aW9uIiwidmFsdWUiLCJuZXdMaXN0Iiwic2V0VmFsdWVJZGVudGljYXRpb24iLCJ2YWx1ZXNMaXN0IiwiZmluZFZhbHVlIiwibmV3dmFsdWVzIiwicHJvZmlsZUNvbnRyb2xsZXIiLCJzdGFydFByb2ZpbGUiLCJzYXZlUGhvdG8iLCJteWltYWdlIiwidXNlclBob3RvIiwidXBsb2FkUGhvdG8iLCJ1cGxvYWRJblByb2dyZXNzIiwidXBsb2FkUHJvZ3Jlc3MiLCJteUltYWdlIiwibXlDcm9wcGVkSW1hZ2UiLCJoYW5kbGVGaWxlU2VsZWN0IiwiZXZ0IiwiZmlsZSIsImN1cnJlbnRUYXJnZXQiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCIkYXBwbHkiLCJ0YXJnZXQiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwicXVlcnlTZWxlY3RvciIsInNpZ251cENvbnRyb2xsZXIiLCJBdXRoVG9rZW4iLCIkc3RhdGVQYXJhbXMiLCJzYXZlVXNlciIsInVzZXIiLCJjcmVhdGUiLCJyZXNjdWVQYXNzd29yZCIsInVzZXJFbWFpbCIsImNoYW5nZVBhc3N3b3JkIiwiQVBJX1JPVVRFX1NFTkRNRVNTQUdFIiwiQVBJX1JPVVRFX1VTRVIiLCJBUElfUk9VVEVfUkVTQ1VFUEFTU1dPUkQiLCJteXRva2VuVVJMIiwic2VhcmNoIiwiQVBJX1JPVVRFX1NFVE5FV1BBU1NXT1JEIiwibXl0b2tlbiIsInBhc3N3b3JkIiwiQVBJX1JPVVRFX1VQREFURVBIT1RPIiwiYXBwQ29uZmlnIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwibmVvblJlZE1hcCIsImV4dGVuZFBhbGV0dGUiLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJjb250cmFzdERlZmF1bHRDb2xvciIsImNvbnRyYXN0RGFya0NvbG9ycyIsImNvbnRyYXN0TGlnaHRDb2xvcnMiLCJkZWZpbmVQYWxldHRlIiwidGhlbWUiLCJwcmltYXJ5UGFsZXR0ZSIsImFjY2VudFBhbGV0dGUiLCIkcSIsImF1dGhGYWN0b3J5IiwibG9naW4iLCJzZXRUb2tlbiIsInRva2VuIiwiaXNMb2dnZWRJbiIsImdldFRva2VuIiwiZ2V0VXNlciIsInJlamVjdCIsImF1dGhUb2tlbkZhY3RvcnkiLCJyZW1vdmVJdGVtIiwiaW50ZXJjZXB0b3JGYWN0b3J5IiwicmVxdWVzdCIsImhlYWRlcnMiLCIkZG9jdW1lbnQiLCJsaW5rIiwic2NvcGUiLCJhdHRyIiwibW91c2Vtb3ZlIiwiaWRfZGl2IiwiY3NzIiwibW91c2Vtb3ZlUG9zdEl0IiwibW91c2V1cCIsInVuYmluZCIsIm1vdXNldXBQb3N0SXQiLCJwcmV2ZW50RGVmYXVsdCIsImJpbmQiLCJyeCIsImF0dHJzIiwiT2JzZXJ2YWJsZSIsImZyb21FdmVudCIsIm1vdXNlZG93biIsIm1hcCIsImNsaWVudFgiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRZIiwibW91c2VkcmFnIiwic2VsZWN0TWFueSIsImltYWdlT2Zmc2V0IiwicG9zIiwidGFrZVVudGlsIiwic3Vic2NyaWJlIiwiY2FsbCIsImxvZ2luQ29udHJvbGxlciIsIiRyb290U2NvcGUiLCJnZXRMb2NhbENvZGUiLCJNYXRoIiwicmFuZG9tIiwiZmxvb3IiLCJkb0xvZ2luIiwiZXJyb3IiLCJsYW5ndWFnZSIsInVzZXJEYXRhIiwibG9nZ2VkSW4iLCIkb24iLCJzb2NrZXQiLCJpbyIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwicmVtb3ZlTGlzdGVuZXIiXSwibWFwcGluZ3MiOiJDQUdBLFdBQ0EsWUFFQUEsU0FDQUMsT0FBQSxPQUFBLFlBQUEsZUFBQSxjQUFBLG1CQUFBLFlBQUEsVUFBQSxjQUFBLFlBQUEsYUFBQSxZQUFBLFlBQUEsMkJBQ0FDLFFBQUEsZ0JBQUEsU0FBQUMsR0FDQUEsRUFBQUMsYUFBQUMsS0FBQSx5QkNOQSxXQUVBLFlBY0EsU0FBQUMsR0FBQUMsR0FpQkEsUUFBQUMsR0FBQUEsR0FDQUMsS0FBQUMsUUFBQUYsRUFDQUQsRUFBQUksTUFFQUMsV0FBQSxrQkFDQUMsYUFBQSxLQUNBQyxZQUFBLDRCQUNBQyxPQUFBLEtBQ0FDLGlCQUFBLEVBQ0FDLFNBQUEsWUFDQUMsVUFBQSxNQUtBLFFBQUFDLEdBQUFYLEdBQ0FDLEtBQUFDLFFBQUFGLEVBQ0FELEVBQUFJLE1BRUFDLFdBQUEsa0JBQ0FDLGFBQUEsS0FDQUMsWUFBQSw0QkFDQUMsT0FBQSxLQUNBQyxpQkFBQSxFQUNBQyxTQUFBLGNBQ0FDLFVBQUEsTUF6Q0EsR0FBQUUsSUFDQVYsUUFBQSxHQUNBRixhQUFBQSxFQUNBVyxtQkFBQUEsRUFFQSxPQUFBQyxHQWxCQXBCLFFBQUFDLE9BQUEsbUJBQ0FXLFdBQUEsbUJBQUEsV0FBQSxXQUFBLFNBQUFMLEVBQUFELEdBQ0EsR0FBQWUsR0FBQVosSUFDQVksR0FBQVgsUUFBQUosRUFBQUksUUFDQVcsRUFBQUMsV0FBQSxXQUNBZixFQUFBZ0IsV0FHQUMsUUFBQSxXQUFBbEIsR0FFQUEsRUFBQW1CLFNBQUEsZUNkQSxXQUNBLFlBTUEsU0FBQUMsR0FBQUMsRUFBQUMsR0FHQUQsRUFBQUUsTUFBQSxRQUNBQyxJQUFBLElBQ0FoQixZQUFBLDRCQUNBRixXQUFBLDBCQUVBaUIsTUFBQSxjQUNBQyxJQUFBLFFBQ0FDLE9BQ0FD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UUFDQUMsT0FBQSxPQUNBVyxXQUFBLGtCQUFBNGMsR3RCd2xGUUEsRUFBZ0IvYixTQUFXLFNBQVUsYUFBYyxhQUFjLFNBQVUsT0FBUSxVQUFXLFVBQVcsZXVCOWxGakgsV0FFQSxZQUVBekIsU0FDQUMsT0FBQSxPQUNBbUIsUUFBQSxVQUNBLFlBQUEsV0FDQSxTQUFBNlAsRUFBQTdKLEdBRUEzRyxLQUFBMmQsT0FBQUMsS0FLQTVkLEtBQUF3RyxHQUFBLFNBQUFxWCxFQUFBQyxHQUNBOWQsS0FBQTJkLFFBQ0EzZCxLQUFBMmQsT0FBQW5YLEdBQUFxWCxFQUFBLFNBQUEvYSxHQUNBNkQsRUFBQSxXQUNBbVgsRUFBQWhiLFFBTUE5QyxLQUFBd0YsS0FBQSxTQUFBcVksRUFBQS9hLEdBQ0E5QyxLQUFBMmQsUUFDQTNkLEtBQUEyZCxPQUFBblksS0FBQXFZLEVBQUEvYSxJQUlBOUMsS0FBQStkLGVBQUEsU0FBQUYsR0FDQTdkLEtBQUEyZCxRQUNBM2QsS0FBQTJkLE9BQUFJLGVBQUFGIiwiZmlsZSI6ImFwcC5kc2MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyNS8wNi8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJyxbJ25nSW1nQ3JvcCcsJ3RvYXN0U2VydmljZScsJ3RleHRBbmd1bGFyJywnbHVlZ2cuZGlyZWN0aXZlcycsICdhcHBSeERyYWcnLCAnRHJvcERTQycsJ2F1dGhTZXJ2aWNlJywndWkucm91dGVyJywnbmdNYXRlcmlhbCcsJ25nTWRJY29ucycsJ25nQ29va2llcycsJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnXSlcclxuICAgICAgICAuY29uZmlnKGZ1bmN0aW9uKCRodHRwUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnQXV0aEludGVyY2VwdG9yJyk7XHJcbiAgICAgICAgfSlcclxuXHJcbn0pKCk7XHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyNy8wNi8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCd0b2FzdFNlcnZpY2UnLFtdKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCd0b2FzdENvbnRyb2xsZXInLCBmdW5jdGlvbigkbWRUb2FzdCx0b2FzdEFwcCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYubWVzc2FnZSA9ICB0b2FzdEFwcC5tZXNzYWdlO1xyXG4gICAgICAgICAgICBzZWxmLmNsb3NlVG9hc3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRtZFRvYXN0LmhpZGUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5mYWN0b3J5KCAndG9hc3RBcHAnLCB0b2FzdEFwcCApO1xyXG5cclxuICAgIHRvYXN0QXBwLiRpbmplY3QgPSBbICckbWRUb2FzdCcgXTtcclxuXHJcbiAgICBmdW5jdGlvbiB0b2FzdEFwcCAoJG1kVG9hc3QpIHtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VCb3R0b206IGVycm9yTWVzc2FnZUJvdHRvbVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8qZnVuY3Rpb24gZXJyb3JNZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudChlcnJvck1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDgwMClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXJyb3JNZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3RvYXN0Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvZHNjdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIk9LXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QWN0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcCByaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhpZGVEZWxheTogMjAwMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXJyb3JNZXNzYWdlQm90dG9tKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3RvYXN0Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvZHNjdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIk9LXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QWN0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcImJvdHRvbSBsZWZ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZURlbGF5OiAxMDAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI1LzA2LzIwMTUuXHJcbiAqL1xyXG4oZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29uZmlnKHJvdXRlcyk7XHJcblxyXG4gICAgZnVuY3Rpb24gcm91dGVzKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuXHJcblxyXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdpbml0Jywge1xyXG4gICAgICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9pbml0cGFnZS5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2luaXQubG9naW4nLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdsb2dpbicsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50LXRhYic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy91c2VybG9naW4uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2luaXQuc2lnbnVwJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnc2lnbnVwJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdGFiJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3NpZ251cC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2luaXQucmVzY3VlcGFzc3dvcmQnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdyZXNjdWVwYXNzd29yZCcsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50LXRhYic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9yZXNjdWVwYXNzd29yZC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3N0YXJ0cHJvYmxlbScsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9zdGFydHByb2JsZW0nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9zdGFydHByb2JsZW0uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc3RhcnRQcm9ibGVtQ29udHJvbGxlciBhcyB2bSdcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvZmlsZScsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9wcm9maWxlJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcHJvZmlsZS5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9maWxlQ29udHJvbGxlciBhcyB2bSdcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnZHNjcmVwb3J0Jywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2RzY3JlcG9ydCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvcHJvYmxlbXJlcG9ydC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2JsZW1SZXBvcnRDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ25ld3Bhc3N3b3JkJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL25ld3Bhc3N3b3JkLzpteXRva2VuJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvbmV3cGFzc3dvcmQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lnbnVwQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3Byb2JsZW0nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9wcm9ibGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21lbnVQcm9ibGVtQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAvKiAuc3RhdGUoJ3Byb2JsZW0uZGVzY3JpcHRpb24nLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGVzY3JpcHRpb24nLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAncHJvYmxlbS1kZXNjcmlwdGlvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9wcm9ibGVtZGVzY3JpcHRpb24uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdlZGl0UHJvYmxlbUNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSovXHJcbiAgICAgICAgICAgIC8qLnN0YXRlKCdwcm9ibGVtLmNvbGxhYm9yYXRvcnMnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvY29sbGFib3JhdG9ycycsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdwcm9ibGVtLWRlc2NyaXB0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL2NvbGxhYm9yYXRvcnMuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjb250cm9sbGVyQ29sbGFib3JhdG9ycyBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKi9cclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLnN0YWtlaG9sZGVycycsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9zdGFrZWhvbGRlcnMnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnZHNjLWFydGlmYWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3N0YWtlaG9sZGVycy5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3N0YWtlaG9sZGVyQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncHJvYmxlbS5ldmFsdWF0aW9uZnJhbWV3b3JrJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2V2YWx1YXRpb25mcmFtZXdvcmsnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnZHNjLWFydGlmYWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL2V2YWx1YXRpb25mcmFtZXdvcmsuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdldmFsdWF0aW9uZnJhbWV3b3JrQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAuc3RhdGUoJ3Byb2JsZW0uc2VtaW90aWNmcmFtZXdvcmsnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvc2VtaW90aWNmcmFtZXdvcmsnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnZHNjLWFydGlmYWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3NlbWlvdGljZnJhbWV3b3JrLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2VtaW90aWNmcmFtZXdvcmtDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLmNhcmYnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvY2FyZicsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdkc2MtYXJ0aWZhY3QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvY2FyZi5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2NhcmZDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdwcm9ibGVtLnZpZicsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy92aWYnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnZHNjLWFydGlmYWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3ZpZi5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3ZhbHVlSWRlbnRpZmljYXRpb25GcmFtZUNvbnRyb2xsZXIgYXMgdm0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3Byb2JsZW0ub25pb24nLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvb25pb24nLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnZHNjLWFydGlmYWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL29uaW9uLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnb25pb24zTGF5ZXJDb250cm9sbGVyIGFzIHZtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2xvZ2luJyk7XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIixudWxsLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDE5LzA2LzIwMTUuXHJcbiAqL1xyXG4oZnVuY3Rpb24oKXtcclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ2hlbHBDb250cm9sbGVyJyxoZWxwQ29udHJvbGxlcilcclxuICAgIC5kaXJlY3RpdmUoJ2J1dHRvbmhlbHAnLGJ1dHRvbmhlbHApO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGhlbHBDb250cm9sbGVyKCRtZERpYWxvZykge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5vcGVuRm9ybUVtYWlsID0gb3BlbkZvcm1FbWFpbDtcclxuICAgIGZ1bmN0aW9uIG9wZW5Gb3JtRW1haWwoZXYpe1xyXG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcclxuICAgICAgICAgICAgY29udHJvbGxlcjogSGVscEVtaWxDb250cm9sbGVyLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL2hlbHBkc2MuaHRtbCcsXHJcbiAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxyXG4gICAgICAgICAgICB0YXJnZXRFdmVudDogZXZcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBIZWxwRW1pbENvbnRyb2xsZXIoJHNjb3BlLHRvYXN0QXBwLCBzaWdudXBTZXJ2aWNlLCRtZERpYWxvZywkd2luZG93KSB7XHJcblxyXG4gICAgICAgICRzY29wZS5zZW5kRW1haWxEU0MgPSBzZW5kRW1haWxEU0M7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlbmRFbWFpbERTQyhtZXNzYWdlKXtcclxuICAgICAgICAgICAgbWVzc2FnZS5uaWNrbmFtZSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25pY2tuYW1lJyk7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UuZW1pbENvbnRhY3QgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyZW1haWwnKTtcclxuXHJcbiAgICAgICAgICAgIHNpZ251cFNlcnZpY2Uuc2VuZGVtYWlsRFNDKG1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZSgnVGhhbmsgeW91IGZvciB5b3UgbWVzc2FnZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gYnV0dG9uaGVscCgpe1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0ZW1wbGF0ZVVybCA6IFwiYXBwL2ZlZWRiYWNrL2hlbHBidXR0b24uaHRtbFwiLFxyXG4gICAgICAgIHJlc3RyaWN0OiBcIkVcIlxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMTkvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKGluaXRMYW5ndWFnZSlcclxuICAgIC5jb250cm9sbGVyKCdsYW5ndWFnZUNvbnRyb2xsZXInLGxhbmd1YWdlQ29udHJvbGxlcilcclxuICAgIC5kaXJlY3RpdmUoJ2NoYW5nZUxhbmd1YWdlJyxjaGFuZ2VMYW5ndWFnZSk7XHJcblxyXG5pbml0TGFuZ3VhZ2UuJGluamVjdCA9IFsnJHRyYW5zbGF0ZVByb3ZpZGVyJ107XHJcbmxhbmd1YWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckdHJhbnNsYXRlJ107XHJcblxyXG5mdW5jdGlvbiBpbml0TGFuZ3VhZ2UgKCR0cmFuc2xhdGVQcm92aWRlcikge1xyXG4gICAgICAgICR0cmFuc2xhdGVQcm92aWRlci51c2VTdGF0aWNGaWxlc0xvYWRlcih7XHJcbiAgICAgICAgICAgIHByZWZpeDogJ2FwcC9sYW5ndWFnZS9sYW5nLScsXHJcbiAgICAgICAgICAgIHN1ZmZpeDogJy5qc29uJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICR0cmFuc2xhdGVQcm92aWRlci5wcmVmZXJyZWRMYW5ndWFnZSgnZW4nKTtcclxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KCdlc2NhcGVkJyk7XHJcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZUxvY2FsU3RvcmFnZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsYW5ndWFnZUNvbnRyb2xsZXIgKCR0cmFuc2xhdGUpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuc2V0TGFuZyA9IHNldExhbmc7XHJcbiAgICBmdW5jdGlvbiBzZXRMYW5nKGxhbmdLZXkpIHtcclxuICAgICAgICAgICAgJHRyYW5zbGF0ZS51c2UobGFuZ0tleSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoYW5nZUxhbmd1YWdlKCl7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRlbXBsYXRlVXJsIDogXCJhcHAvbGFuZ3VhZ2UvY2hhbmdlTGFuZ3VhZ2UuaHRtbFwiLFxyXG4gICAgICAgIHJlc3RyaWN0OiBcIkVcIlxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMTQvMDcvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKFwiY2FyZkNvbnRyb2xsZXJcIixjYXJmQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gY2FyZkNvbnRyb2xsZXIoJHdpbmRvdyxTb2NrZXQscHJvYmxlbVNlcnZpY2UsdG9hc3RBcHApe1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5pZFByb2JsZW0gPSBcIlwiO1xyXG4gICAgICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gdHJ1ZTtcclxuICAgICAgICBzZWxmLnZhbHVlTGlzdCA9IFtdO1xyXG4gICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5sb2NhbFN0YWtlaG9sZGVycyA9IFtdO1xyXG4gICAgICAgIHNlbGYuYWRkcG1zdmFsdWUgPSBhZGRwbXN2YWx1ZTtcclxuICAgICAgICBzZWxmLnJlbW92ZUNBUkYgPSByZW1vdmVDQVJGO1xyXG4gICAgICAgIHNlbGYuc2VsZWN0UE1TVmFsdWUgPSBzZWxlY3RQTVNWYWx1ZTtcclxuICAgICAgICBzZWxmLnNldFByaW90aXR5ID0gc2V0UHJpb3RpdHk7XHJcbiAgICAgICAgc2VsZi5hZGRMaXN0VmFsdWUgPSBhZGRMaXN0VmFsdWU7XHJcbiAgICAgICAgc2VsZi5hZGRTdGFrZWhvbGRlciA9IGFkZFN0YWtlaG9sZGVyO1xyXG4gICAgICAgIHNlbGYuY2FyZiA9IHtcclxuICAgICAgICAgICAgcG1zOiBcIlwiLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IFtdLFxyXG4gICAgICAgICAgICBwcmlvcml0eTogXCJcIixcclxuICAgICAgICAgICAgcmVxdWlyZW1lbnQ6IFwiXCIsXHJcbiAgICAgICAgICAgIHN0YWtlaG9sZGVyczogW11cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmluaXRDYXJmID0gaW5pdENhcmY7XHJcbiAgICAgICAgc2VsZi5jYXJmTGlzdCA9IFtdO1xyXG4gICAgICAgIHNlbGYuY2FyZlByaW9yaXR5TGlzdCA9IFtdO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbml0Q2FyZigpe1xyXG4gICAgICAgICAgICBzZWxmLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRjYXJmKHNlbGYuaWRQcm9ibGVtKVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvY2FsU3Rha2Vob2xkZXJzID0gZGF0YS5zdGFrZWhvbGRlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0ID0gc2VsZi5sb2NhbFN0YWtlaG9sZGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYXJmTGlzdCA9IGRhdGEuY2FyZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYXJmUHJpb3JpdHlMaXN0ID0gc2VsZi5sb2NhbFByaW9yaXR5TGlzdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0Q2FyZigpe1xyXG4gICAgICAgICAgICBzZWxmLmNhcmYgPSB7XHJcbiAgICAgICAgICAgICAgICBfaWQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwbXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlbWVudDogXCJcIixcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyczogW11cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc2VsZi52YWx1ZUxpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0Q0FSRmFkZCcsIGZ1bmN0aW9uIChjYXJmKSB7XHJcbiAgICAgICAgICAgIHNlbGYuY2FyZkxpc3QucHVzaChjYXJmKTtcclxuICAgICAgICAgICAgcmVzZXRDYXJmKCk7XHJcbiAgICAgICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0ID0gc2VsZi5sb2NhbFN0YWtlaG9sZGVycztcclxuICAgICAgICAgICAgc2VsZi5jYXJmUHJpb3JpdHlMaXN0ID0gc2VsZi5sb2NhbFByaW9yaXR5TGlzdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkcG1zdmFsdWUoY2FyZil7XHJcblxyXG4gICAgICAgICAgICBpZihjYXJmLnBtcyA9PT0gXCJcIil7XHJcbiAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJTZWxlY3QgUE1TXCIpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGlmKGNhcmYudmFsdWVzLmxlbmd0aCA8IDEgKXtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJTZWxlY3Qgb25lIG9yIG1vcmUgVmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBpZihjYXJmLnN0YWtlaG9sZGVycy5sZW5ndGggPCAxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiU2VsZWN0IG9uZSBvciBtb3JlIFN0YWtlaG9sZGVyKHMpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjYXJmLnByaW9yaXR5ID09PSBcIlwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIlNlbGVjdCBwcmlvcml0eSBbTG93LCBNZWRpdW0gb3IgSGlnaF1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdENBUkZhZGQnLCBjYXJmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmZQcmlvcml0eUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RDQVJGcmVtb3ZlJywgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgIHNlbGYuY2FyZkxpc3Quc3BsaWNlKGlkLDEpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiByZW1vdmVDQVJGKGluZGV4LGNhcmYpe1xyXG4gICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgY2FyZjogY2FyZlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0Q0FSRnJlbW92ZScsIG9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0UE1TVmFsdWUocG1zKXtcclxuICAgICAgICAgICAgaWYocG1zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxmLmNhcmZQTVNWYWx1ZSwgZnVuY3Rpb24gKHBtc192YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbXNfdmFsdWUucG1zID09IHBtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmYudmFsdWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudmFsdWVMaXN0ID0gcG1zX3ZhbHVlLnZhbHVlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRQcmlvdGl0eShwcmlvcml0eSl7XHJcbiAgICAgICAgICAgIHNlbGYuY2FyZi5wcmlvcml0eSA9IHByaW9yaXR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkTGlzdFZhbHVlKG5ld3ZhbHVlKXtcclxuICAgICAgICAgICBpZihzZWxmLmNhcmYudmFsdWVzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNhcmYudmFsdWVzLnB1c2gobmV3dmFsdWUpO1xyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5jYXJmLnZhbHVlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKG5ld3ZhbHVlID09IHNlbGYuY2FyZi52YWx1ZXNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcmYudmFsdWVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgc2VsZi5jYXJmLnZhbHVlcy5wdXNoKG5ld3ZhbHVlKTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRTdGFrZWhvbGRlcihuZXdTdGFrZWhvbGRlcil7XHJcbiAgICAgICAgICAgIGlmKHNlbGYuY2FyZi5zdGFrZWhvbGRlcnMubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgICAgIHNlbGYuY2FyZi5zdGFrZWhvbGRlcnMucHVzaChuZXdTdGFrZWhvbGRlcik7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZWxmLmNhcmYuc3Rha2Vob2xkZXJzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihuZXdTdGFrZWhvbGRlciA9PSBzZWxmLmNhcmYuc3Rha2Vob2xkZXJzW2ldKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYXJmLnN0YWtlaG9sZGVycy5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlbGYuY2FyZi5zdGFrZWhvbGRlcnMucHVzaChuZXdTdGFrZWhvbGRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYubG9jYWxQcmlvcml0eUxpc3QgPSBbJ0xvdycsICdNZWRpdW0nLCdIaWdoJ107XHJcblxyXG4gICAgICAgIHNlbGYuY2FyZlBNU1ZhbHVlID0gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiSW50ZXJhY3Rpb25cIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiSWRlbnRpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJOb3Jtc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcInBtc1wiOiBcIkFzc29jaWF0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbnZlcnNhdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkdyb3Vwc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlJlbGF0aW9uc2hpcFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRydXN0XCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiTGVhcm5pbmdcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTWV0YS1jb21tdW5pY2F0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiUGxheVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBZXN0aGV0aWNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRW1vdGlvbiBhbmQgQWZmZWN0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiUHJvdGVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJJbmZvcm1lZCBjb25zZXJ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVwdXRhdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlNlY3VyaXR5XCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiRXhwbG9pdGF0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkFjY2Vzc2liaWxpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJPYmplY3RcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQcm9wZXJ0eSAob3duZXJzaGlwKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlVzYWJpbGl0eVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcInBtc1wiOiBcIlRlcG9yYWxpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQXZhaWxhYmlsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQXdhcmVuZXNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUHJlc2VuY2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJUZXJyaXRvcmlhbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQb3J0YWJpbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlByaXZhY3lcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTY2FsYWJpbGl0eVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlZpc2liaWxpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbXNcIjogXCJDbGFzc2lmaWNhdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBdXRvbm9teVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbGxhYm9yYXRpb25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTaGFyaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQWRhcHRhYmlsaXR5XCJcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicG1zXCI6IFwiU3Vic2lzdGVuY2VcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVjaXByb2NpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAxNS8wNy8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdjaGF0RFNDJyxjaGF0RFNDKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjaGF0RFNDKCR0aW1lb3V0LCAkZmlsdGVyLCB0b2FzdEFwcCwgU29ja2V0LCBwcm9ibGVtU2VydmljZSwgJHdpbmRvdykge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5uZXdtc2cgPSBcIlwiO1xyXG4gICAgICAgIHNlbGYubWVzc2FnZXMgPSBbXTtcclxuICAgICAgICBzZWxmLnJlcGxheSA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYubmlja25hbWUgPSBcIlwiO1xyXG4gICAgICAgIHNlbGYudXNlcnNPbkxpbmUgPSBbXTtcclxuICAgICAgICBzZWxmLmluaXRIaXN0b3J5Q2hhdCA9IGluaXRIaXN0b3J5Q2hhdDtcclxuICAgICAgICBzZWxmLnNob3dSZXBsYXkgPSBzaG93UmVwbGF5O1xyXG4gICAgICAgIHNlbGYuc2VuZE1lc3NhZ2UgPSBzZW5kTWVzc2FnZTtcclxuICAgICAgICBzZWxmLnBob3RvID0gXCJcIjtcclxuICAgICAgICBzZWxmLm9wZW5DaGF0ID0gb3BlbkNoYXQ7XHJcbiAgICAgICAgc2VsZi5pc09wZW5DaGF0ID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5rZXlwcmVzc0NoYXQgPSBrZXlwcmVzc0NoYXQ7XHJcbiAgICAgICAgc2VsZi5jb250YWRvciA9IDA7XHJcbiAgICAgICAgc2VsZi5zaG93VXNlcnNPbkxpbmUgPSBzaG93VXNlcnNPbkxpbmU7XHJcbiAgICAgICAgc2VsZi5zaG93VXNlciA9IGZhbHNlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzaG93VXNlcnNPbkxpbmUoKXtcclxuICAgICAgICAgICAgaWYoc2VsZi51c2Vyc09uTGluZS5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2hvd1VzZXIgPSAhc2VsZi5zaG93VXNlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5DaGF0KCl7XHJcbiAgICAgICAgICAgIHNlbGYuaXNPcGVuQ2hhdCA9ICFzZWxmLmlzT3BlbkNoYXQ7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJykuZm9jdXMoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW5pdEhpc3RvcnlDaGF0KCl7XHJcbiAgICAgICAgICAgIHNlbGYuaWRQcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgICAgIHNlbGYubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgICAgICAgICBzZWxmLnBob3RvID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGhvdG8nKTtcclxuICAgICAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0aGlzdG9yeWNoYXQoc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5oaXN0b3J5Y2hhdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBEYXRlKGRhdGEuaGlzdG9yeWNoYXRbaV0udGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNuID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pY2tuYW1lOiBkYXRhLmhpc3RvcnljaGF0W2ldLm5pY2tuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZzogZGF0YS5oaXN0b3J5Y2hhdFtpXS5tc2csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogdG1wLmdldERhdGUoKSArIFwiL1wiICsgKHRtcC5nZXRNb250aCgpICsgMSApKyBcIi9cIiArIHRtcC5nZXRGdWxsWWVhcigpICsgXCIgW1wiICsgdG1wLmdldEhvdXJzKCkgKyBcIjpcIiArIHRtcC5nZXRNaW51dGVzKCkgKyBcIl0gXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLnB1c2gobXNuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgU29ja2V0Lm9uKCdvblVzZXJPTicsIGZ1bmN0aW9uIChuaWNrbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaWYobmlja25hbWUgIT09IHNlbGYubmlja25hbWUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFVzZXJzTGlzdChuaWNrbmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldFVzZXJzTGlzdChuaWNrbmFtZSl7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VsZi51c2Vyc09uTGluZS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBpZihzZWxmLnVzZXJzT25MaW5lW2ldID09PSBuaWNrbmFtZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNlbGYudXNlcnNPbkxpbmUucHVzaChuaWNrbmFtZSk7XHJcbiAgICAgICAgICAgIHNlbGYudXNlcnNPbkxpbmUuc29ydCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgU29ja2V0Lm9uKCdvbk5vdGlmeU9OJywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICBpZihzZWxmLm5pY2tuYW1lICE9PSBvYmoubmlja25hbWUpIHtcclxuICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZUJvdHRvbShvYmoubmlja25hbWUgKyBcIiwgXCIgKyAkZmlsdGVyKCd0cmFuc2xhdGUnKShvYmoubXNnKSk7XHJcbiAgICAgICAgICAgICAgICBzZXRVc2Vyc0xpc3Qob2JqLm5pY2tuYW1lKTtcclxuICAgICAgICAgICAgICAgIFNvY2tldC5lbWl0KCd1c2VyT04nLCBzZWxmLm5pY2tuYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLnVzZXJzT25MaW5lID0gW107XHJcbiAgICAgICAgICAgIHNlbGYudXNlcnNPbkxpbmUucHVzaChzZWxmLm5pY2tuYW1lKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgU29ja2V0Lm9uKCdvbk5vdGlmeU9GRicsIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgaWYob2JqLm5pY2tuYW1lICE9PSBzZWxmLm5pY2tuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2VCb3R0b20ob2JqLm5pY2tuYW1lICsgXCIsIFwiICsgJGZpbHRlcigndHJhbnNsYXRlJykob2JqLm1zZykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi51c2Vyc09uTGluZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iai5uaWNrbmFtZSA9PT0gc2VsZi51c2Vyc09uTGluZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXNlcnNPbkxpbmUuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNob3dSZXBsYXkoKXtcclxuICAgICAgICAgICAgaWYoc2VsZi5yZXBsYXkpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXBsYXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlcGxheSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RDaGF0JywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICB2YXIgdG1wID0gbmV3IERhdGUob2JqW29iai5sZW5ndGggLTFdLnRpbWUpO1xyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmlja25hbWU6IG9ialtvYmoubGVuZ3RoIC0xXS5uaWNrbmFtZSxcclxuICAgICAgICAgICAgICAgIG1zZzogb2JqW29iai5sZW5ndGggLTFdLm1zZyxcclxuICAgICAgICAgICAgICAgIHRpbWU6IHRtcC5nZXREYXRlKCkgKyBcIi9cIiArICh0bXAuZ2V0TW9udGgoKSArIDEpICsgXCIvXCIgKyB0bXAuZ2V0RnVsbFllYXIoKSArIFwiIFtcIiArIHRtcC5nZXRIb3VycygpICsgXCI6XCIgKyB0bXAuZ2V0TWludXRlcygpICsgXCJdIFwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2VuZE1lc3NhZ2UoY2hhdG1zZyl7XHJcbiAgICAgICAgICAgIGlmKGNoYXRtc2cgPT09IHVuZGVmaW5lZCB8fCBjaGF0bXNnLmxlbmd0aCA8IDIgKXtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0Q2hhdCcsIGNoYXRtc2cpO1xyXG4gICAgICAgICAgICBzZWxmLm5ld21zZyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHNlbGYuY29udGFkb3IgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gemVyYXJDb250YWRvcigpe1xyXG4gICAgICAgICAgICBzZWxmLmNvbnRhZG9yID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGtleXByZXNzQ2hhdChldmVudCxjaGF0bXNnKXtcclxuICAgICAgICAgICAgaWYoZXZlbnQua2V5Q29kZSA9PSAxMyl7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNvbnRhZG9yKys7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb250YWRvciA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoemVyYXJDb250YWRvciwgMjAwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihzZWxmLmNvbnRhZG9yID4gMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UoY2hhdG1zZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICB9XHJcblxyXG59KSgpO1xyXG5cclxuXHJcblxyXG4vKlxyXG52YXIgc2VsZiA9IHRoaXM7XHJcbnNlbGYubmV3bXNnID0gXCJcIjtcclxuc2VsZi5tZXNzYWdlcyA9IFtdO1xyXG5zZWxmLnJlcGxheSA9IGZhbHNlO1xyXG5zZWxmLm5pY2tuYW1lID0gXCJcIjtcclxuc2VsZi51c2VyTGlzdCA9IFtdO1xyXG5zZWxmLmluaXRIaXN0b3J5Q2hhdCA9IGluaXRIaXN0b3J5Q2hhdDtcclxuc2VsZi5jbG9zZSA9IGNsb3NlO1xyXG5zZWxmLnNob3dSZXBsYXkgPSBzaG93UmVwbGF5O1xyXG5zZWxmLnNlbmRNZXNzYWdlID0gc2VuZE1lc3NhZ2U7XHJcblxyXG5mdW5jdGlvbiBjbG9zZSgpIHtcclxuICAgICRtZFNpZGVuYXYoJ2NoYXQnKS5jbG9zZSgpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkbG9nLmRlYnVnKFwiY2xvc2UgY2hhdFwiKTtcclxuICAgICAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdEhpc3RvcnlDaGF0KCl7XHJcbiAgICBzZWxmLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgc2VsZi5uaWNrbmFtZSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25pY2tuYW1lJyk7XHJcbiAgICBzZWxmLnBob3RvID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGhvdG8nKTtcclxuICAgIHByb2JsZW1TZXJ2aWNlLmdldGhpc3RvcnljaGF0KHNlbGYuaWRQcm9ibGVtKVxyXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEuaGlzdG9yeWNoYXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gbmV3IERhdGUoZGF0YS5oaXN0b3J5Y2hhdFtpXS50aW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbXNuID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuaWNrbmFtZTogZGF0YS5oaXN0b3J5Y2hhdFtpXS5uaWNrbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBkYXRhLmhpc3RvcnljaGF0W2ldLm1zZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogdG1wLmdldERhdGUoKSArIFwiL1wiICsgKHRtcC5nZXRNb250aCgpICsgMSApKyBcIi9cIiArIHRtcC5nZXRGdWxsWWVhcigpICsgXCIgW1wiICsgdG1wLmdldEhvdXJzKCkgKyBcIjpcIiArIHRtcC5nZXRNaW51dGVzKCkgKyBcIl0gXCJcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWVzc2FnZXMucHVzaChtc24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBTb2NrZXQuZW1pdCgnY2hlY2tVc2VycycpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93UmVwbGF5KCl7XHJcbiAgICBpZihzZWxmLnJlcGxheSl7XHJcbiAgICAgICAgc2VsZi5yZXBsYXkgPSBmYWxzZTtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIHNlbGYucmVwbGF5ID0gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuU29ja2V0Lm9uKCdvbkJyb2FkY2FzdENoYXQnLCBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICB2YXIgdG1wID0gbmV3IERhdGUob2JqW29iai5sZW5ndGggLTFdLnRpbWUpO1xyXG4gICAgc2VsZi5tZXNzYWdlcy5wdXNoKHtcclxuICAgICAgICBuaWNrbmFtZTogb2JqW29iai5sZW5ndGggLTFdLm5pY2tuYW1lLFxyXG4gICAgICAgIG1zZzogb2JqW29iai5sZW5ndGggLTFdLm1zZyxcclxuICAgICAgICB0aW1lOiB0bXAuZ2V0RGF0ZSgpICsgXCIvXCIgKyAodG1wLmdldE1vbnRoKCkgKyAxKSArIFwiL1wiICsgdG1wLmdldEZ1bGxZZWFyKCkgKyBcIiBbXCIgKyB0bXAuZ2V0SG91cnMoKSArIFwiOlwiICsgdG1wLmdldE1pbnV0ZXMoKSArIFwiXSBcIlxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuU29ja2V0Lm9uKCdvbkNoZWNrVXNlcnMnLCBmdW5jdGlvbiAodXNlckxpc3QpIHtcclxuICAgIHNlbGYudXNlckxpc3QgPSB1c2VyTGlzdDtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBzZW5kTWVzc2FnZShjaGF0bXNnKXtcclxuICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RDaGF0JywgY2hhdG1zZyk7XHJcbiAgICBzZWxmLm5ld21zZyA9IFwiXCI7XHJcbn0qL1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDIyLzA3LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdkc2NSZXBvcnRDb250cm9sbGVyJyxkc2NSZXBvcnRDb250cm9sbGVyKTtcclxuXHJcbmZ1bmN0aW9uIGRzY1JlcG9ydENvbnRyb2xsZXIoKSB7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5pZHByb2JsZW0gPSAnYWpmbGFqZmxqYWxmamFsamYnO1xyXG4gICAgc2VsZi5idWlkUmVwb3J0ID0gYnVpZFJlcG9ydDtcclxuXHJcbiAgICBmdW5jdGlvbiBidWlkUmVwb3J0KGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0UmVzcG9ydCcpO1xyXG4gICAgICAgIHZhciBwZGYgPSBuZXcganNQREYoJ2wnLCdweCcpO1xyXG4gICAgICAgIHBkZi5hZGRIVE1MKFxyXG4gICAgICAgICAgICBodG1sLCAwLCAwLCB7XHJcbiAgICAgICAgICAgICAgICBwYWdlc3BsaXQ6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24oZGlzcG9zZSl7XHJcbiAgICAgICAgICAgICAgICBwZGYuc2F2ZSgndGVzdC5wZGYnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI5LzA2LzIwMTUuXHJcbiAqL1xyXG4oZnVuY3Rpb24oKXtcclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXInLGV2YWx1YXRpb25mcmFtZXdvcmtDb250cm9sbGVyKTtcclxuXHJcbiAgZnVuY3Rpb24gZXZhbHVhdGlvbmZyYW1ld29ya0NvbnRyb2xsZXIgKCR3aW5kb3cscHJvYmxlbVNlcnZpY2UsU29ja2V0LHRvYXN0QXBwKXtcclxuXHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgc2VsZi5ldmFsdWF0aW9uZnJhbWV3b3JrTGlzdCA9W107XHJcbiAgICAgIHNlbGYuaW5pdEV2YWx1YXRpb24gPSBpbml0RXZhbHVhdGlvbjtcclxuICAgICAgc2VsZi5zZXRPcGVuRWRpdERpc2N1dGlvbiA9IHNldE9wZW5FZGl0RGlzY3V0aW9uO1xyXG4gICAgICBzZWxmLnNhdmVGcmFtZSA9IHNhdmVGcmFtZTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGluaXRFdmFsdWF0aW9uKCl7XHJcbiAgICAgICAgICBzZWxmLmlkcHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRldmFsdWF0aW9uKHNlbGYuaWRwcm9ibGVtKVxyXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmV2YWx1YXRpb25mcmFtZXdvcmtMaXN0ID0gZGF0YS5ldmFsdWF0aW9uZnJhbWV3b3JrO1xyXG4gICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RGcmFtZUVkaXQnLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuZXZhbHVhdGlvbmZyYW1ld29ya0xpc3QsZnVuY3Rpb24oZXZhbHVhdGlvbmZyYW1ld29yayl7XHJcbiAgICAgICAgICAgICBpZiggZXZhbHVhdGlvbmZyYW1ld29yay5vbmlvbmxheWVyID09IGRhdGEub25pb25sYXllcil7XHJcbiAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGV2YWx1YXRpb25mcmFtZXdvcmsuc3Rha2Vob2xkZXJzLGZ1bmN0aW9uKHN0YWtlaG9sZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWtlaG9sZGVyLl9pZCA9PSBkYXRhLl9pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIub25pb25sYXllciA9IGRhdGEub25pb25sYXllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gZGF0YS5vcGVuRWRpdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnByb2JsZW1zID0gZGF0YS5wcm9ibGVtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnNvbHV0aW9ucyA9IGRhdGEuc29sdXRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmdW5jdGlvbiBzYXZlRnJhbWUoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RGcmFtZVNhdmUnLCBzdGFrZWhvbGRlcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFNvY2tldC5vbignb25VcGRhdGVTdGFrZWhvbGRlcicsIGZ1bmN0aW9uIChzdGFrZWhvbGRlck9uaW9uKSB7XHJcblxyXG5cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmdW5jdGlvbiBzZXRPcGVuRWRpdERpc2N1dGlvbihjdXJyZW50U3Rha2Vob2xkZXIpe1xyXG4gICAgICAgICAgY3VycmVudFN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdtZW51UHJvYmxlbUNvbnRyb2xsZXInLCBtZW51UHJvYmxlbWFDb250cm9sbGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBtZW51UHJvYmxlbWFDb250cm9sbGVyKEF1dGgsICRtZERpYWxvZywgJHNjb3BlLCAkZmlsdGVyLCAkc3RhdGUsICR3aW5kb3csIHByb2JsZW1TZXJ2aWNlLHRvYXN0QXBwLCBTb2NrZXQpe1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgLy9zZWxmLm9wZW5DaGF0ID0gYnVpbGRUb2dnbGVyKCdjaGF0Jyk7XHJcbiAgICAgICAgc2VsZi5mb3JtQWRkQ29sbGFib3JhdG9ycyA9IGZvcm1BZGRDb2xsYWJvcmF0b3JzO1xyXG4gICAgICAgIHNlbGYuZWRpdERlc2NyaXB0aW9uUHJvYmxlbSA9IGVkaXREZXNjcmlwdGlvblByb2JsZW07XHJcbiAgICAgICAgc2VsZi5kb0xvZ291dCA9IGRvTG9nb3V0O1xyXG4gICAgICAgIHNlbGYuc3lzdGVtUmV0dXJuID0gc3lzdGVtUmV0dXJuO1xyXG4gICAgICAgIHNlbGYuZm9ybVByb2JsZW1SZXBvcnQgPSBmb3JtUHJvYmxlbVJlcG9ydDtcclxuICAgICAgICBzZWxmLmdldEN1cnJlbnRQcm9ibGVtID0gZ2V0Q3VycmVudFByb2JsZW07XHJcbiAgICAgICAgc2VsZi5uaWNrbmFtZTtcclxuICAgICAgICBzZWxmLmRzY19hcnRpZmFjdHMgPSBbXTtcclxuICAgICAgICBzZWxmLmZvcm1FZGl0UHJvYmxlbSA9IGZvcm1FZGl0UHJvYmxlbTtcclxuICAgICAgICBzZWxmLmZvcm1JbnZpdGVDb2xsYWJvcmF0b3IgPSBmb3JtSW52aXRlQ29sbGFib3JhdG9yO1xyXG4gICAgICAgIHZhciBsb2NhbGNvZGUgPSAnJztcclxuXHJcblxyXG5cclxuICAgICAgICAvKkVkaXQgUHJvYmxlbSovXHJcblxyXG4gICAgICAgIFNvY2tldC5vbignb25BdHVhbGl6YXJQcm9ibGVtYScsIGZ1bmN0aW9uIChyZXRvcm5vKSB7XHJcbiAgICAgICAgICAgIGlmKGxvY2FsY29kZSAhPT0gcmV0b3Juby5sb2NhbGNvZGUpIHtcclxuICAgICAgICAgICAgICAgIHNldERlc2NyaXRpb24ocmV0b3Juby5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZVByb2JsZW0ocHJvYmxlbSl7XHJcbiAgICAgICAgICAgIHByb2JsZW0ubG9jYWxjb2RlID0gbG9jYWxjb2RlO1xyXG4gICAgICAgICAgICBTb2NrZXQuZW1pdCgnYXR1YWxpemFyUHJvYmxlbWEnLCBwcm9ibGVtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1FZGl0UHJvYmxlbShldikge1xyXG4gICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBEaWFsb2dFZGl0UHJvYmxlbUNvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhZ2VzL3Byb2JsZW1kZXNjcmlwdGlvbi5odG1sJyxcclxuICAgICAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRGlhbG9nRWRpdFByb2JsZW1Db250cm9sbGVyKCR0aW1lb3V0LCRzY29wZSwkbWREaWFsb2cpIHtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZVRydWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAkc2NvcGUucHJvYmxlbTtcclxuICAgICAgICAgICAgJHNjb3BlLnByb2JsZW1VcGRhdGUgPSBwcm9ibGVtVXBkYXRlO1xyXG4gICAgICAgICAgICAkc2NvcGUuZ2V0UHJvYmxlbUVkaXQgPSBnZXRQcm9ibGVtRWRpdDtcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVEZXNjcmlwdGlvbiA9IHNhdmVEZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgJHNjb3BlLm5pY2tuYW1lID0gJyc7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFByb2JsZW1FZGl0KCl7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0cHJvYmxlbShzZWxmLmlkUHJvYmxlbSlcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2JsZW0gPSBkYXRhLnByb2JsZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRVcGRhdGUoKXtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVRydWUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBwcm9ibGVtVXBkYXRlKGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvYmxlbSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAndXBkYXRlJzogdXBkYXRlVHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAnZGVzY3JpcHRpb24nOiBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2F2ZVByb2JsZW0ocHJvYmxlbSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlVHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRydWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChzZXRVcGRhdGUsIDIwMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzYXZlRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9ibGVtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICd1cGRhdGUnOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6IGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgc2F2ZVByb2JsZW0ocHJvYmxlbSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXREZXNjcml0aW9uKHByb2JsZW0pe1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb2JsZW0gPSBwcm9ibGVtO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAvKiBDb252aWRhciBQYXJ0aWNpcGFudGVzICovXHJcbiAgICAgICAgZnVuY3Rpb24gZm9ybUludml0ZUNvbGxhYm9yYXRvcihldikge1xyXG4gICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBEaWFsb2dJbnZpdGVDb2xsYWJvcmF0b3JDb250cm9sbGVyLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9jb2xsYWJvcmF0b3JzLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRFdmVudDogZXZcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBEaWFsb2dJbnZpdGVDb2xsYWJvcmF0b3JDb250cm9sbGVyKCRzY29wZSwkbWREaWFsb2cpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmlkUHJvYmxlbSA9IFwiXCI7XHJcbiAgICAgICAgICAgICRzY29wZS5jb2xsYWJvcmF0b3JzID0gW107XHJcbiAgICAgICAgICAgICRzY29wZS51c2VyZW1haWwgPSBcIlwiO1xyXG4gICAgICAgICAgICAkc2NvcGUuaW5pdENvbGxhYm9yYXRvcnMgPSBpbml0Q29sbGFib3JhdG9ycztcclxuICAgICAgICAgICAgJHNjb3BlLmFkZENvbGxhYm9yYXRvciA9IGFkZENvbGxhYm9yYXRvcjtcclxuICAgICAgICAgICAgJHNjb3BlLnJlbW92ZUNvbGxhYm9yYXRvciA9IHJlbW92ZUNvbGxhYm9yYXRvcjtcclxuICAgICAgICAgICAgJHNjb3BlLmFsZXJ0RGVsZXRlQ29sbGFib3JhdG9yID0gYWxlcnREZWxldGVDb2xsYWJvcmF0b3I7XHJcbiAgICAgICAgICAgICRzY29wZS5lbWFpbCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdENvbGxhYm9yYXRvcnMoKXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pZFByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS51c2VyZW1haWwgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyZW1haWwnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRjb2xsYWJvcmF0b3JzKCRzY29wZS5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb2xsYWJvcmF0b3JzID0gZGF0YS5jb2xsYWJvcmF0b3JzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9Tb2NrZXQuZW1pdCgnY2hlY2tVc2VycycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNlYXJjaENhbGxhYm9yYXRpb24oZW1haWwpe1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8ICRzY29wZS5jb2xsYWJvcmF0b3JzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihlbWFpbCA9PSAkc2NvcGUuY29sbGFib3JhdG9yc1tpXS5lbWFpbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkQ29sbGFib3JhdG9yKGVtYWlsKXtcclxuICAgICAgICAgICAgICAgIGlmKCRzY29wZS51c2VyZW1haWwgPT0gZW1haWwpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZSgkc2NvcGUudXNlcmVtYWlsICsgXCIgaXMgZW1haWwgb2Ygb3duZXIuXCIpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWFyY2hDYWxsYWJvcmF0aW9uKGVtYWlsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJVc3VhcmlvIENhZGFzdHJhZG8uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnZpdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHByb2JsZW06ICRzY29wZS5pZFByb2JsZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvYmxlbVNlcnZpY2UuaW52aXRlKGludml0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sbGFib3JhdG9ycyA9IGRhdGEuY29sbGFib3JhdG9ycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhbGVydERlbGV0ZUNvbGxhYm9yYXRvcihjb2xsYWJvcmF0b3Ipe1xyXG4gICAgICAgICAgICAgICAgIGNvbGxhYm9yYXRvci5pc0RlbGV0ZWQgPSAhY29sbGFib3JhdG9yLmlzRGVsZXRlZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQ29sbGFib3JhdG9yKGNvbGxhYm9yYXRvcil7XHJcbiAgICAgICAgICAgICAgICAgICBjb2xsYWJvcmF0b3IuaWRwcm9ibGVtID0gJHNjb3BlLmlkUHJvYmxlbTtcclxuICAgICAgICAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLnJlbW92ZWNvbGxhYm9yYXRvcnMoY29sbGFib3JhdG9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sbGFib3JhdG9ycyA9IGRhdGEuY29sbGFib3JhdG9ycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNEZWxldGVDb2xsYWJvcmF0b3IgPSAhJHNjb3BlLmlzRGVsZXRlQ29sbGFib3JhdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShcIkNvbGFib3JhZG9yIFwiICsgY29sbGFib3JhdG9yLm5pY2tuYW1lICsgXCIgZm9pIHJlbW92aWRvIGRvIHByb2pldG8uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuXHJcbi8qTWVudSBDb250cm9sKi9cclxuICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRQcm9ibGVtKCl7XHJcbiAgICAgICAgICAgIHNlbGYubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgICAgICAgICBzZWxmLmlkUHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgICAgICBsb2NhbGNvZGUgPSAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9jYWxjb2RlJyk7XHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldHByb2JsZW0oc2VsZi5pZFByb2JsZW0pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJvYmxlbSA9IGRhdGEucHJvYmxlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEucHJvYmxlbS5hcnRpZmFjdHMsIGZ1bmN0aW9uIChhcnRpZmFjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBhcnRpZmFjdC5zcGxpdChcIl9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRzY19hcnRpZmFjdHMucHVzaCh7bmFtZTogXCJwcm9ibGVtLlwiICsgbmFtZVsyXS50b0xvd2VyQ2FzZSgpLCBsYWJlbDogJGZpbHRlcigndHJhbnNsYXRlJykoYXJ0aWZhY3QpfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NlbGYuZHNjX2FydGlmYWN0cyA9IGRzY19hcnRpZmFjdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBpbml0c29ja2V0cHJvYmxlbSA9IHtcclxuICAgICAgICAgICAgXCJpZHByb2JsZW1cIjpzZWxmLmlkUHJvYmxlbSxcclxuICAgICAgICAgICAgIFwibmlja25hbWVcIjogc2VsZi5uaWNrbmFtZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ2luaXRQcm9ibGVtJywgaW5pdHNvY2tldHByb2JsZW0pO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgICAgIHNlbGYuc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIHNlbGVjdGVkID0gbnVsbCxcclxuICAgICAgICAgICAgcHJldmlvdXMgPSBudWxsO1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ3NlbGVjdGVkSW5kZXgnLCBmdW5jdGlvbihjdXJyZW50KXtcclxuICAgICAgICAgICAgcHJldmlvdXMgPSBzZWxlY3RlZDtcclxuICAgICAgICAgICAgc2VsZWN0ZWQgPSAgc2VsZi5kc2NfYXJ0aWZhY3RzW2N1cnJlbnRdO1xyXG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkSW5kZXggPSBjdXJyZW50O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzeXN0ZW1SZXR1cm4oKXtcclxuICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Rpc2Nvbm5lY3RQcm9ibGVtJywgc2VsZi5uaWNrbmFtZSk7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnc3RhcnRwcm9ibGVtJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZm9ybUFkZENvbGxhYm9yYXRvcnMoKXtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9ibGVtLmNvbGxhYm9yYXRvcnMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1Qcm9ibGVtUmVwb3J0KCl7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnZHNjcmVwb3J0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBlZGl0RGVzY3JpcHRpb25Qcm9ibGVtKCkge1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3Byb2JsZW0uZGVzY3JpcHRpb24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvTG9nb3V0KCkge1xyXG4gICAgICAgICAgICBTb2NrZXQuZW1pdCgnZGlzY29ubmVjdFByb2JsZW0nLCBzZWxmLm5pY2tuYW1lKTtcclxuICAgICAgICAgICAgQXV0aC5sb2dvdXQoKTtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdpbml0LmxvZ2luJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjkvMDYvMjAxNS5cclxuICovXHJcblxyXG47KGZ1bmN0aW9uKHVuZGVmaW5lZCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ29uaW9uM0xheWVyQ29udHJvbGxlcicsb25pb24zTGF5ZXJDb250cm9sbGVyKTtcclxuXHJcblxyXG5mdW5jdGlvbiBvbmlvbjNMYXllckNvbnRyb2xsZXIoU29ja2V0LCR3aW5kb3cscHJvYmxlbVNlcnZpY2UsJG1kRGlhbG9nLHRvYXN0QXBwKXtcclxuXHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmlkcHJvYmxlbSA9IFwiXCI7XHJcbiAgICBzZWxmLmluaXRPbmlvbjNMYXllciA9IGluaXRPbmlvbjNMYXllcjtcclxuICAgIHNlbGYubW92ZSA9IGZhbHNlO1xyXG4gICAgc2VsZi5vbmlvbjNMYXllckxpc3QgPSBbXTtcclxuICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gZmFsc2U7XHJcbiAgICBzZWxmLnNhdmVPbmlvbjNMYXllciA9IHNhdmVPbmlvbjNMYXllcjtcclxuICAgIHNlbGYuc2V0T3BlbkVkaXQgPSBzZXRPcGVuRWRpdDtcclxuICAgIHNlbGYuZGVsUG9zdEl0ID0gZGVsUG9zdEl0O1xyXG4gICAgc2VsZi5hZGRQb3N0SXQgPSBhZGRQb3N0SXQ7XHJcbiAgICBzZWxmLmFjZW5kZSA9IGFjZW5kZTtcclxuICAgIHNlbGYuYXBhZ2EgPSBhcGFnYTtcclxuICAgIHNlbGYubG9jYWxjb2RlID0gJyc7XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdE9uaW9uM0xheWVyKCl7XHJcbiAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYuaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgc2VsZi5sb2NhbGNvZGUgPSAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9jYWxjb2RlJyk7XHJcbiAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0b25pb24zbGF5ZXIoc2VsZi5pZHByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkYXRhLnBvc3RpdHMsIGZ1bmN0aW9uIChwb3N0aXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGl0Lm9wZW5FZGl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25pb24zTGF5ZXJMaXN0LnB1c2gocG9zdGl0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb24zTGF5ZXJTYXZlJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYub25pb24zTGF5ZXJMaXN0LCBmdW5jdGlvbiAocG9zdGl0KSB7XHJcbiAgICAgICAgICAgIGlmIChwb3N0aXQuX2lkID09IGRhdGEuX2lkKSB7XHJcbiAgICAgICAgICAgICAgICBwb3N0aXQudGl0bGUgPSBkYXRhLnRpdGxlO1xyXG4gICAgICAgICAgICAgICAgcG9zdGl0LmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIHBvc3RpdC5vcGVuRWRpdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcG9zdGl0LmxheWVyID0gZGF0YS5sYXllcjtcclxuICAgICAgICAgICAgICAgIHBvc3RpdC54ID0gZGF0YS54O1xyXG4gICAgICAgICAgICAgICAgcG9zdGl0LnkgPSBkYXRhLnk7XHJcbiAgICAgICAgICAgICAgICBwb3N0aXQuemluZGV4ID0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVPbmlvbjNMYXllcihwb3N0aXQpIHtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb24zTGF5ZXJTYXZlJywgcG9zdGl0KTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb24zTGF5ZXJFZGl0JywgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYub25pb24zTGF5ZXJMaXN0LCBmdW5jdGlvbiAocG9zdGl0KSB7XHJcbiAgICAgICAgICAgIGlmKHBvc3RpdC5faWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICBwb3N0aXQub3BlbkVkaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcG9zdGl0LnppbmRleCA9IDk5OTk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXRPcGVuRWRpdChpZCl7XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE9uaW9uM0xheWVyRWRpdCcsIGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb24zTGF5ZXJSZW1vdmUnLCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICB2YXIgcG9zdGl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwb3N0aXRcIiArIHNlbGYub25pb24zTGF5ZXJMaXN0W2lkXS5faWQpO1xyXG4gICAgICAgIHBvc3RpdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHNlbGYub25pb24zTGF5ZXJMaXN0LnNwbGljZShpZCwxKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVBvc3RJdChpbmRleCxwb3N0aXQpIHtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb24zTGF5ZXJSZW1vdmUnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBwb3N0aXQ6IHBvc3RpdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWxQb3N0SXQoZXYsaW5kZXgscG9zdGl0KSB7XHJcbiAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgIC5wYXJlbnQoYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpKVxyXG4gICAgICAgICAgICAudGl0bGUoJ0RldGV0ZSBQb3N0aXQ/JylcclxuICAgICAgICAgICAgLmNvbnRlbnQoJ1RpdGxlOiAnICsgcG9zdGl0LnRpdGxlKVxyXG4gICAgICAgICAgICAuYXJpYUxhYmVsKCdSZW1vdmUgcG9zdGl0JylcclxuICAgICAgICAgICAgLm9rKCdZZXMhJylcclxuICAgICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsJylcclxuICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KTtcclxuICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZW1vdmVQb3N0SXQoaW5kZXgscG9zdGl0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb24zTGF5ZXJNb3ZlJywgZnVuY3Rpb24gKHBvc3RpdCkge1xyXG4gICAgICAgICAgICBpZihzZWxmLmxvY2FsY29kZSAhPT0gcG9zdGl0LmxvY2FsY29kZSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc3RpdCcrcG9zdGl0Ll9pZCkuc3R5bGUubGVmdCA9IHBvc3RpdC54O1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc3RpdCcrcG9zdGl0Ll9pZCkuc3R5bGUudG9wID0gcG9zdGl0Lnk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb24zTGF5ZXJBZGQnLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGlmKHNlbGYubG9jYWxjb2RlICE9PSBkYXRhLmxvY2FsY29kZSkge1xyXG4gICAgICAgICAgICBkYXRhLnBvc3RpdC5vcGVuRWRpdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkYXRhLnBvc3RpdC50aXRsZSA9ICduZXcgUG9zdGl0JztcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgZGF0YS5wb3N0aXQub3BlbkVkaXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZWxmLm9uaW9uM0xheWVyTGlzdC5wdXNoKGRhdGEucG9zdGl0KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBhZGRQb3N0SXQoZSxjYW1hZGEpIHtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb24zTGF5ZXJBZGQnLCB7XHJcbiAgICAgICAgICAgIHBvc3RpdDoge1xyXG4gICAgICAgICAgICAgICAgbGF5ZXI6IGNhbWFkYSxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcclxuICAgICAgICAgICAgICAgIHg6IGUucGFnZVggKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgeTogZS5wYWdlWSArICdweCcsXHJcbiAgICAgICAgICAgICAgICB6aW5kZXg6IDk5OTlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9jYWxjb2RlOiBzZWxmLmxvY2FsY29kZVxyXG4gICAgICAgIH1cclxuICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWNlbmRlKGlkKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lXCIraWQpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAndGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7Jyk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZmlsbDojRDFDNEU5OycpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVnZW5kXCIraWQpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZmlsbDojRDFDNEU5OycpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFwYWdhKGlkLGNvbG9yKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lXCIraWQpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAndGV4dC1kZWNvcmF0aW9uOiBub25lOycpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2ZpbGw6ICcrY29sb3IrJzsnKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlZ2VuZFwiK2lkKS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2ZpbGw6ICcrY29sb3IrJzsnKTtcclxuICAgIH1cclxufVxyXG5cclxufSkodGhpcyk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAxMi8wOC8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcigncHJvYmxlbVJlcG9ydENvbnRyb2xsZXInLHByb2JsZW1SZXBvcnRDb250cm9sbGVyKTtcclxuXHJcblxyXG4gICAgIGZ1bmN0aW9uIHByb2JsZW1SZXBvcnRDb250cm9sbGVyKCR3aW5kb3cscHJvYmxlbVNlcnZpY2UsdG9hc3RBcHAsJHN0YXRlKXtcclxuXHJcbiAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgc2VsZi5pZFByb2JsZW07XHJcbiAgICAgICAgIHNlbGYucHJvYmxlbTtcclxuICAgICAgICAgc2VsZi5pbml0UHJvYmxlbVBlcG9ydCA9IGluaXRQcm9ibGVtUGVwb3J0O1xyXG4gICAgICAgICBzZWxmLnN5c3RlbVJldHVybiA9IHN5c3RlbVJldHVybjtcclxuXHJcbiAgICAgICAgIGZ1bmN0aW9uIGluaXRQcm9ibGVtUGVwb3J0KCl7XHJcblxyXG4gICAgICAgICAgICAgc2VsZi5pZFByb2JsZW0gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9ibGVtaWQnKTtcclxuXHJcbiAgICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXRwcm9ibGVtcmVwb3J0KHNlbGYuaWRQcm9ibGVtKVxyXG4gICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0YS5wcm9ibGVtLnN0YWtlaG9sZGVycywgZnVuY3Rpb24gKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci54ID0gKHBhcnNlSW50KHN0YWtlaG9sZGVyLnguc3Vic3RyaW5nKDAsc3Rha2Vob2xkZXIueC5sZW5ndGggLTIpKSAtIDEwMCkrJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIueSA9ICAocGFyc2VJbnQoc3Rha2Vob2xkZXIueS5zdWJzdHJpbmcoMCxzdGFrZWhvbGRlci55Lmxlbmd0aCAtMikpICsgNDAwKSsncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm9ibGVtID0gZGF0YS5wcm9ibGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICBmdW5jdGlvbiBzeXN0ZW1SZXR1cm4oKXtcclxuICAgICAgICAgICAgICRzdGF0ZS5nbygncHJvYmxlbS5zdGFrZWhvbGRlcnMnKTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICB9XHJcblxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZhY3RvcnkoJ3Byb2JsZW1TZXJ2aWNlJywgcHJvYmxlbVNlcnZpY2UpO1xyXG5cclxuICBwcm9ibGVtU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsJyRsb2NhdGlvbiddO1xyXG5cclxuICBmdW5jdGlvbiBwcm9ibGVtU2VydmljZSgkaHR0cCwkbG9jYXRpb24pIHtcclxuXHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNUyA9ICcvYXBpL3Byb2JsZW0vZ2V0cHJvYmxlbXMnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRVU0VSUFJPQkxFTVNDT0xMQUJPUkFUT1IgPSAnL2FwaS9wcm9ibGVtL2dldHByb2JsZW1zY29sbGFib3JhdG9yJztcclxuICAgIHZhciBBUElfUk9VVEVfTkVXUFJPQkxFTSA9ICcvYXBpL3Byb2JsZW0vbmV3cHJvYmxlbSc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVFBST0JMRU0gPSAnL2FwaS9wcm9ibGVtL2dldHByb2JsZW0nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRQUk9CTEVNUkVQT1JUID0gJy9hcGkvcHJvYmxlbS9nZXRwcm9ibGVtcmVwb3J0JztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUQ09MTEFCT1JBVE9SUyA9ICcvYXBpL3Byb2JsZW0vZ2V0Y29sbGFib3JhdG9ycyc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0lOVklURSA9ICcvYXBpL3Byb2JsZW0vaW52aXRlJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VUT05JT04gPSAnL2FwaS9wcm9ibGVtL2dldG9uaW9uJztcclxuICAgIHZhciBBUElfUk9VVEVfR0VURVZBTFVBVElPTiA9ICcvYXBpL3Byb2JsZW0vZ2V0ZXZhbHVhdGlvbic7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVFNFTUlPVElDRlJBTUVXT1JLID0gJy9hcGkvcHJvYmxlbS9nZXRzZW1pb3RpYyc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX0dFVENBUkYgPSAnL2FwaS9wcm9ibGVtL2dldGNhcmYnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9SRU1PVkVQUk9CTEVNID0gJy9hcGkvcHJvYmxlbS9yZW1vdmVwcm9ibGVtJztcclxuICAgIHZhciBBUElfUk9VVEVfUkVNT1ZFQ09MTEFCT1JBVE9SID0gJy9hcGkvcHJvYmxlbS9yZW1vdmVjb2xsYWJvcmF0b3InO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRISVNUT1JZQ0hBVCA9ICcvYXBpL3Byb2JsZW0vaGlzdG9yeWNoYXQnO1xyXG4gICAgdmFyIEFQSV9ST1VURV9HRVRPTklPTjNMQUxZRVIgPSAnL2FwaS9wcm9ibGVtL2dldG9uaW9uM2xheWVyJztcclxuXHJcbiAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgbmV3cHJvYmxlbSAgICAgICA6IG5ld3Byb2JsZW0sXHJcbiAgICAgIGdldHVzZXJwcm9ibGVtcyAgOiBnZXR1c2VycHJvYmxlbXMsXHJcbiAgICAgIGdldHByb2JsZW0gICAgICAgOiBnZXRwcm9ibGVtLFxyXG4gICAgICBnZXRjb2xsYWJvcmF0b3JzIDogZ2V0Y29sbGFib3JhdG9ycyxcclxuICAgICAgaW52aXRlICAgICAgICAgICA6IGludml0ZSxcclxuICAgICAgZ2V0b25pb24gICAgICAgICA6IGdldG9uaW9uLFxyXG4gICAgICBnZXRldmFsdWF0aW9uICAgIDogZ2V0ZXZhbHVhdGlvbixcclxuICAgICAgZ2V0c2VtaW90aWMgICAgICA6IGdldHNlbWlvdGljLFxyXG4gICAgICBnZXRjYXJmICAgICAgICAgIDogZ2V0Y2FyZixcclxuICAgICAgcmVtb3ZlcHJvYmxlbSAgICA6IHJlbW92ZXByb2JsZW0sXHJcbiAgICAgIGdldHByb2JsZW1zY29sbGFib3JhdG9yOiBnZXRwcm9ibGVtc2NvbGxhYm9yYXRvcixcclxuICAgICAgcmVtb3ZlY29sbGFib3JhdG9ycyA6IHJlbW92ZWNvbGxhYm9yYXRvcnMsXHJcbiAgICAgIGdldGhpc3RvcnljaGF0OiBnZXRoaXN0b3J5Y2hhdCxcclxuICAgICAgZ2V0cHJvYmxlbXJlcG9ydCA6IGdldHByb2JsZW1yZXBvcnQsXHJcbiAgICAgIGdldG9uaW9uM2xheWVyIDogZ2V0b25pb24zbGF5ZXJcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgZnVuY3Rpb24gbmV3cHJvYmxlbShkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX05FV1BST0JMRU0sIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldHByb2JsZW1yZXBvcnQoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFBST0JMRU1SRVBPUlQgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldHByb2JsZW0oZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFBST0JMRU0gKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldHVzZXJwcm9ibGVtcyhkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfR0VUVVNFUlBST0JMRU1TICsgJz9lbWFpbD0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldGNvbGxhYm9yYXRvcnMoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVENPTExBQk9SQVRPUlMgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGludml0ZShkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX0lOVklURSwgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldG9uaW9uKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRPTklPTiArICc/aWRwcm9ibGVtPScgKyBkYXRhICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0b25pb24zbGF5ZXIgKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRPTklPTjNMQUxZRVIgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldGV2YWx1YXRpb24gKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9HRVRFVkFMVUFUSU9OICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRzZW1pb3RpYyAoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFNFTUlPVElDRlJBTUVXT1JLICsgJz9pZHByb2JsZW09JyArIGRhdGEgKVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldGNhcmYoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVENBUkYgKyAnP2lkcHJvYmxlbT0nICsgZGF0YSApXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlcHJvYmxlbShkYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfUkVNT1ZFUFJPQkxFTSArICc/aWRwcm9ibGVtPScgKyBkYXRhICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3IoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVFVTRVJQUk9CTEVNU0NPTExBQk9SQVRPUiArICc/ZW1haWw9JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVjb2xsYWJvcmF0b3JzKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KEFQSV9ST1VURV9SRU1PVkVDT0xMQUJPUkFUT1IgKyAnP2lkcHJvYmxlbT0nICsgZGF0YS5pZHByb2JsZW0gKyAnJmVtYWlsPScgKyBkYXRhLmVtYWlsICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0aGlzdG9yeWNoYXQoZGF0YSl7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX1JPVVRFX0dFVEhJU1RPUllDSEFUICsgJz9pZHByb2JsZW09JyArIGRhdGEgKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI5LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3NlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlcicsc2VtaW90aWNmcmFtZXdvcmtDb250cm9sbGVyKTtcclxuXHJcbmZ1bmN0aW9uIHNlbWlvdGljZnJhbWV3b3JrQ29udHJvbGxlcihTb2NrZXQsJHdpbmRvdywgcHJvYmxlbVNlcnZpY2UsdG9hc3RBcHApe1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuaWRwcm9ibGVtID0gXCJcIjtcclxuICAgIHNlbGYuc2F2ZVNvY2lhbFdvcmxkID0gc2F2ZVNvY2lhbFdvcmxkO1xyXG4gICAgc2VsZi5zYXZlUHJhZ21hdGljID0gc2F2ZVByYWdtYXRpYztcclxuICAgIHNlbGYuc2F2ZVNlbWFudGljID0gc2F2ZVNlbWFudGljO1xyXG4gICAgc2VsZi5zYXZlU3ludGF0aWMgPSBzYXZlU3ludGF0aWM7XHJcbiAgICBzZWxmLnNhdmVFbXBpcmljYWwgPSBzYXZlRW1waXJpY2FsO1xyXG4gICAgc2VsZi5zYXZlUGh5c2ljYWwgPSBzYXZlUGh5c2ljYWw7XHJcbiAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrID0gXCJcIjtcclxuICAgIHNlbGYuaW5pdFNlbWlvdGljRnJhbWV3b3JrID0gaW5pdFNlbWlvdGljRnJhbWV3b3JrO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRTZW1pb3RpY0ZyYW1ld29yaygpe1xyXG4gICAgICAgIHNlbGYuaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0c2VtaW90aWMoc2VsZi5pZHByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2VtaW90aWNmcmFtZXdvcmsgPSBkYXRhLnNlbWlvdGljZnJhbWV3b3JrO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVTb2NpYWxXb3JsZCcsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yay5zb2NpYWx3b3JsZCA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlU29jaWFsV29ybGQodGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZVNvY2lhbFdvcmxkJywgb2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uVXBkYXRlUHJhZ21hdGljJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrLnByYWdtYXRpYyA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlUHJhZ21hdGljKHRleHQsZmxhZ1NhdmUpe1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZmxhZ1NhdmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCd1cGRhdGVQcmFnbWF0aWMnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVTZW1hbnRpYycsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yay5zZW1pb3RpY3JhbWV3b3JrID0gdGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVTZW1hbnRpYyh0ZXh0LGZsYWdTYXZlKXtcclxuICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZsYWdTYXZlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgndXBkYXRlU2VtYW50aWMnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVTeW50YXRpYycsIGZ1bmN0aW9uICh0ZXh0LGZsYWdTYXZlKSB7XHJcbiAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yay5zeW50YXRpYyA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlU3ludGF0aWModGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZVN5bnRhdGljJywgb2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uVXBkYXRlRW1waXJpY2FsJywgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBzZWxmLnNlbWlvdGljZnJhbWV3b3JrLmVtcGlyaWNhbCA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlRW1waXJpY2FsKHRleHQsZmxhZ1NhdmUpe1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZmxhZ1NhdmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCd1cGRhdGVFbXBpcmljYWwnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25VcGRhdGVQaHlzaWNhbCcsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgc2VsZi5zZW1pb3RpY2ZyYW1ld29yay5waHlzaWNhbCA9IHRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlUGh5c2ljYWwodGV4dCxmbGFnU2F2ZSl7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgdXBkYXRlOiBmbGFnU2F2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU29ja2V0LmVtaXQoJ3VwZGF0ZVBoeXNpY2FsJywgb2JqKTtcclxuICAgIH1cclxufVxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI5LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuOyhmdW5jdGlvbih1bmRlZmluZWQpe1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdzdGFrZWhvbGRlckNvbnRyb2xsZXInLHN0YWtlaG9sZGVyQ29udHJvbGxlcik7XHJcblxyXG5cclxuZnVuY3Rpb24gc3Rha2Vob2xkZXJDb250cm9sbGVyKFNvY2tldCwkd2luZG93LHByb2JsZW1TZXJ2aWNlLCRtZERpYWxvZyx0b2FzdEFwcCl7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5pZHByb2JsZW0gPSBcIlwiO1xyXG4gICAgc2VsZi5zdGFrZWhvbGRlckxpc3QgPSBbXTtcclxuICAgIHNlbGYuc3Rha2Vob2xkZXIgPSBcIlwiO1xyXG4gICAgc2VsZi5pbnRpdE9uaW9uID0gaW50aXRPbmlvbjtcclxuICAgIHNlbGYubW92ZSA9IGZhbHNlO1xyXG4gICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgc2VsZi5zYXZlU3Rha2Vob2xkZXIgPSBzYXZlU3Rha2Vob2xkZXI7XHJcbiAgICBzZWxmLnNldE9wZW5FZGl0ID0gc2V0T3BlbkVkaXQ7XHJcbiAgICBzZWxmLmRlbFBvc3RJdCA9IGRlbFBvc3RJdDtcclxuICAgIHNlbGYuYWRkUG9zdEl0ID0gYWRkUG9zdEl0O1xyXG4gICAgc2VsZi5hY2VuZGUgPSBhY2VuZGU7XHJcbiAgICBzZWxmLmFwYWdhID0gYXBhZ2E7XHJcbiAgICBzZWxmLmxvY2FsY29kZSA9ICcnO1xyXG5cclxuICAgIGZ1bmN0aW9uIGludGl0T25pb24oKXtcclxuICAgICAgICBzZWxmLmlkcHJvYmxlbSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2JsZW1pZCcpO1xyXG4gICAgICAgIHNlbGYubG9jYWxjb2RlID0gICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvY2FsY29kZScpO1xyXG4gICAgICAgIHByb2JsZW1TZXJ2aWNlLmdldG9uaW9uKHNlbGYuaWRwcm9ibGVtKVxyXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YWtlaG9sZGVyTGlzdCA9IGRhdGEuc3Rha2Vob2xkZXJzO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHNlbGYuaW5Qcm9jZXNzaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uU2F2ZScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxmLnN0YWtlaG9sZGVyTGlzdCwgZnVuY3Rpb24gKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFrZWhvbGRlci5faWQgPT0gZGF0YS5faWQpe1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuc3Rha2Vob2xkZXIgPSBkYXRhLnN0YWtlaG9sZGVyO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIubmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gZGF0YS5vcGVuRWRpdDtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnggPSBkYXRhLng7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci55ID0gZGF0YS55O1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuemluZGV4ID0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVTdGFrZWhvbGRlcihzdGFrZWhvbGRlcikge1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvblNhdmUnLCBzdGFrZWhvbGRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uRWRpdCcsIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxmLnN0YWtlaG9sZGVyTGlzdCwgZnVuY3Rpb24gKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgIGlmKHN0YWtlaG9sZGVyLl9pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnppbmRleCA9IDk5OTk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXRPcGVuRWRpdChpZCl7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuc3Rha2Vob2xkZXJMaXN0LCBmdW5jdGlvbiAoc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgaWYoc3Rha2Vob2xkZXIuX2lkID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIub3BlbkVkaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIuemluZGV4ID0gOTk5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvbkVkaXQnLCBpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uUmVtb3ZlJywgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdmFyIHN0YWtlaG9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFrZWhvbGRlclwiICtzZWxmLnN0YWtlaG9sZGVyTGlzdFtpZF0uX2lkKTtcclxuICAgICAgICBzdGFrZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0LnNwbGljZShpZCwxKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVBvc3RJdChpbmRleCxzdGFrZWhvbGRlcikge1xyXG4gICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXI6IHN0YWtlaG9sZGVyXHJcbiAgICAgICAgfTtcclxuICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb25SZW1vdmUnLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlbFBvc3RJdChldixpbmRleCxzdGFrZWhvbGRlcikge1xyXG4gICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxyXG4gICAgICAgICAgICAucGFyZW50KGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSlcclxuICAgICAgICAgICAgLnRpdGxlKCdEZXRldGUgU3Rha2Vob2xkZXI/JylcclxuICAgICAgICAgICAgLmNvbnRlbnQoJ1RpdGxlOiAnICsgc3Rha2Vob2xkZXIubmFtZSlcclxuICAgICAgICAgICAgLmFyaWFMYWJlbCgnUmVtb3ZlIFN0YWtlaG9sZGVyJylcclxuICAgICAgICAgICAgLm9rKCdZZXMhJylcclxuICAgICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsJylcclxuICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KTtcclxuICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZW1vdmVQb3N0SXQoaW5kZXgsc3Rha2Vob2xkZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIFNvY2tldC5vbignb25Ccm9hZGNhc3RNb3ZlJywgZnVuY3Rpb24gKHN0YWtlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgIGlmKHNlbGYubG9jYWxjb2RlICE9PSBzdGFrZWhvbGRlci5sb2NhbGNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFrZWhvbGRlcicrc3Rha2Vob2xkZXIuX2lkKS5zdHlsZS5sZWZ0ID0gc3Rha2Vob2xkZXIueDtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFrZWhvbGRlcicrc3Rha2Vob2xkZXIuX2lkKS5zdHlsZS50b3AgPSBzdGFrZWhvbGRlci55O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgU29ja2V0Lm9uKCdvbkJyb2FkY2FzdE9uaW9uQWRkJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhLnN0YWtlaG9sZGVyKTtcclxuICAgICAgICBpZihzZWxmLmxvY2FsY29kZSAhPT0gZGF0YS5sb2NhbGNvZGUpIHtcclxuICAgICAgICAgICAgZGF0YS5zdGFrZWhvbGRlci5vcGVuRWRpdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkYXRhLnN0YWtlaG9sZGVyLm5hbWUgPSAnTmV3JztcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgZGF0YS5zdGFrZWhvbGRlci5vcGVuRWRpdCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGYuc3Rha2Vob2xkZXJMaXN0LnB1c2goZGF0YS5zdGFrZWhvbGRlcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBhZGRQb3N0SXQoZSxjYW1hZGEpIHtcclxuICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvbkFkZCcsIHtcclxuICAgICAgICAgICAgICAgc3Rha2Vob2xkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgIFwib25pb25sYXllclwiOiBjYW1hZGEsXHJcbiAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgIFwib3BlbkVkaXRcIjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgIFwieFwiOiBlLnBhZ2VYICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgIFwieVwiOiBlLnBhZ2VZICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgIFwiemluZGV4XCI6IDk5OTlcclxuICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgXCJsb2NhbGNvZGVcIjogc2VsZi5sb2NhbGNvZGVcclxuICAgICAgICAgICB9XHJcblxyXG4gICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhY2VuZGUoaWQpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVcIitpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICd0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsnKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICdmaWxsOiNEMUM0RTk7Jyk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsZWdlbmRcIitpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICdmaWxsOiNEMUM0RTk7Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXBhZ2EoaWQsY29sb3IpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVcIitpZCkuc2V0QXR0cmlidXRlKCdzdHlsZScsICd0ZXh0LWRlY29yYXRpb246IG5vbmU7Jyk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZmlsbDogJytjb2xvcisnOycpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVnZW5kXCIraWQpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZmlsbDogJytjb2xvcisnOycpO1xyXG4gICAgfVxyXG59XHJcblxyXG59KSh0aGlzKTsiLCJcclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdzdGFydFByb2JsZW1Db250cm9sbGVyJyxzdGFydFByb2JsZW1Db250cm9sbGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBzdGFydFByb2JsZW1Db250cm9sbGVyKCRtZERpYWxvZywkc3RhdGUsQXV0aCxTb2NrZXQsICR3aW5kb3csIHByb2JsZW1TZXJ2aWNlLHRvYXN0QXBwICkge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5uaWNrbmFtZSA9IFwiXCI7XHJcbiAgICAgICAgc2VsZi51c2VyaWQgPSBcIlwiO1xyXG4gICAgICAgIHNlbGYudXNlcmVtYWlsID0gXCJcIjtcclxuICAgICAgICBzZWxmLnByb2JsZW1MaXN0ID0gW107XHJcbiAgICAgICAgc2VsZi5wcm9ibGVtQ29sbGFib3JhdG9yTGlzdCA9IFtdO1xyXG4gICAgICAgIHNlbGYubG9naW5JblByb2dyZXNzID0gdHJ1ZTtcclxuICAgICAgICBzZWxmLmdldFByb2JsZW1zID0gZ2V0UHJvYmxlbXM7XHJcbiAgICAgICAgc2VsZi5yZXZvbXZlUHJvYmxlbSA9IHJldm9tdmVQcm9ibGVtO1xyXG4gICAgICAgIHNlbGYuc3RhcnROZXdQcm9ibGVtID0gc3RhcnROZXdQcm9ibGVtO1xyXG4gICAgICAgIHNlbGYuZWRpdFByb2JsZW0gPSBlZGl0UHJvYmxlbTtcclxuICAgICAgICBzZWxmLmRvTG9nb3V0ID0gZG9Mb2dvdXQ7XHJcbiAgICAgICAgc2VsZi5uZXdQcm9ibGVtID0gbmV3UHJvYmxlbTtcclxuICAgICAgICBzZWxmLmVkaXRQcm9maWxlID0gZWRpdFByb2ZpbGU7XHJcbiAgICAgICAgc2VsZi5waG90bztcclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFByb2JsZW1zKCl7XHJcbiAgICAgICAgICAgIHNlbGYudXNlcmlkID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcmlkJyk7XHJcbiAgICAgICAgICAgIHNlbGYubmlja25hbWUgPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCduaWNrbmFtZScpO1xyXG4gICAgICAgICAgICBzZWxmLnVzZXJlbWFpbCA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJlbWFpbCcpO1xyXG4gICAgICAgICAgICBzZWxmLnBob3RvID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGhvdG8nKTtcclxuXHJcblxyXG4gICAgICAgICAgICBwcm9ibGVtU2VydmljZS5nZXR1c2VycHJvYmxlbXMoc2VsZi51c2VyZW1haWwpXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgZGF0YS5wcm9ibGVtcy5sZW5ndGg7IGkrKyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbi5sZW5ndGggPiAzMDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvYmxlbXNbaV0uZGVzY3JpcHRpb24gPSBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uLnJlcGxhY2UoLyg8KFtePl0rKT4pL2lnLFwiXCIpLnN1YnN0cmluZygwLDI4MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uID0gZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbi5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZyxcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb2JsZW1MaXN0ID0gZGF0YS5wcm9ibGVtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0cHJvYmxlbXNjb2xsYWJvcmF0b3Ioc2VsZi51c2VyZW1haWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgZGF0YS5wcm9ibGVtcy5sZW5ndGg7IGkrKyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uLmxlbmd0aCA+IDMwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uID0gZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbi5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZywgXCJcIikuc3Vic3RyaW5nKDAsIDI4MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2JsZW1zW2ldLmRlc2NyaXB0aW9uID0gZGF0YS5wcm9ibGVtc1tpXS5kZXNjcmlwdGlvbi5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJvYmxlbUNvbGxhYm9yYXRvckxpc3QgPSBkYXRhLnByb2JsZW1zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmxvZ2luSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlUHJvYmxlbShwcm9ibGVtaWQpe1xyXG4gICAgICAgICAgICBwcm9ibGVtU2VydmljZS5yZW1vdmVwcm9ibGVtKHByb2JsZW1pZClcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZWxmLnByb2JsZW1MaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYucHJvYmxlbUxpc3RbaV0uX2lkID09IHByb2JsZW1pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm9ibGVtTGlzdC5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJldm9tdmVQcm9ibGVtKGV2LHByb2JsZW0pIHtcclxuICAgICAgICAgICAgLy8gQXBwZW5kaW5nIGRpYWxvZyB0byBkb2N1bWVudC5ib2R5IHRvIGNvdmVyIHNpZGVuYXYgaW4gZG9jcyBhcHBcclxuICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgICAgICAucGFyZW50KGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSlcclxuICAgICAgICAgICAgICAgIC50aXRsZSgnRGV0ZXRlIFByb2JsZW0/JylcclxuICAgICAgICAgICAgICAgIC5jb250ZW50KCdUaXRsZTogJyArIHByb2JsZW0udGl0bGUpXHJcbiAgICAgICAgICAgICAgICAuYXJpYUxhYmVsKCdSZW1vdmUgUHJvYmxlbScpXHJcbiAgICAgICAgICAgICAgICAub2soJ0Rlc2VqbyByZW1vdmVyIScpXHJcbiAgICAgICAgICAgICAgICAuY2FuY2VsKCdDYW5jZWwnKVxyXG4gICAgICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KTtcclxuICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZVByb2JsZW0ocHJvYmxlbS5faWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0TmV3UHJvYmxlbShuZXdwcm9ibGVtKXtcclxuICAgICAgICAgICAgbmV3cHJvYmxlbS51c2VyaWQgPSBzZWxmLnVzZXJpZDtcclxuXHJcbiAgICAgICAgICAgIHByb2JsZW1TZXJ2aWNlLm5ld3Byb2JsZW0obmV3cHJvYmxlbSlcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lZGl0UHJvYmxlbShkYXRhLnByb2JsZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBlZGl0UHJvYmxlbShwcm9ibGVtKSB7XHJcbiAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9ibGVtaWRcIixwcm9ibGVtLl9pZCk7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygncHJvYmxlbS5zdGFrZWhvbGRlcnMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvTG9nb3V0KCkge1xyXG4gICAgICAgICAgICBBdXRoLmxvZ291dCgpO1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2luaXQubG9naW4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZWRpdFByb2ZpbGUoKSB7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygncHJvZmlsZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbmV3UHJvYmxlbShldikge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IERpYWxvZ0NvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9uZXdwcm9ibGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRGlhbG9nQ29udHJvbGxlcigkc2NvcGUsICRmaWx0ZXIsICRtZERpYWxvZykge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ0xBQkVMX0FSVElGQUNUX1NUQUtFSE9MREVSUycsXHJcbiAgICAgICAgICAgICAgICAnTEFCRUxfQVJUSUZBQ1RfRVZBTFVBVElPTkZSQU1FV09SSycsXHJcbiAgICAgICAgICAgICAgICAnTEFCRUxfQVJUSUZBQ1RfU0VNSU9USUNGUkFNRVdPUksnLFxyXG4gICAgICAgICAgICAgICAgJ0xBQkVMX0FSVElGQUNUX1ZJRicsXHJcbiAgICAgICAgICAgICAgICAnTEFCRUxfQVJUSUZBQ1RfQ0FSRicsXHJcbiAgICAgICAgICAgICAgICAnTEFCRUxfQVJUSUZBQ1RfT05JT04nXTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IGZ1bmN0aW9uIChpdGVtLCBsaXN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gbGlzdC5pbmRleE9mKGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpZHggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0gIT09ICdMQUJFTF9BUlRJRkFDVF9TVEFLRUhPTERFUlMnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobGlzdC5sZW5ndGggPT09IDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeFNGID0gbGlzdC5pbmRleE9mKCdMQUJFTF9BUlRJRkFDVF9TRU1JT1RJQ0ZSQU1FV09SSycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaWR4U0YgPiAtMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGxpc3QubGVuZ3RoID09PSAxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Quc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKCRmaWx0ZXIoJ3RyYW5zbGF0ZScpKCdMQUJFTF9BUlRJRkFDVF9TVEFLRUhPTERFUlNfTkVDRVNTQVJZJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbSAhPSAnTEFCRUxfQVJUSUZBQ1RfU0VNSU9USUNGUkFNRVdPUksnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gbGlzdC5pbmRleE9mKCdMQUJFTF9BUlRJRkFDVF9TVEFLRUhPTERFUlMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaCgnTEFCRUxfQVJUSUZBQ1RfU1RBS0VIT0xERVJTJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtICE9PSAnTEFCRUxfQVJUSUZBQ1RfU1RBS0VIT0xERVJTJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZXhpc3RzID0gZnVuY3Rpb24gKGl0ZW0sIGxpc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoaXRlbSkgPiAtMTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5pc0luZGV0ZXJtaW5hdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoJHNjb3BlLnNlbGVjdGVkLmxlbmd0aCAhPT0gMCAmJlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkLmxlbmd0aCAhPT0gJHNjb3BlLml0ZW1zLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuaXNDaGVja2VkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnNlbGVjdGVkLmxlbmd0aCA9PT0gJHNjb3BlLml0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS50b2dnbGVBbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2VsZWN0ZWQubGVuZ3RoID09PSAkc2NvcGUuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkID0gW107XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5zZWxlY3RlZC5sZW5ndGggPT09IDAgfHwgJHNjb3BlLnNlbGVjdGVkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuaXRlbXMuc2xpY2UoMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmFydGlmYWN0TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGROZXdQcm9ibGVtID0gZnVuY3Rpb24ocHJvYmxlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5zZWxlY3RlZC5sZW5ndGggPCAxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKCRmaWx0ZXIoJ3RyYW5zbGF0ZScpKCdMQUJFTF9DSE9JQ0VfQVJUSUZBQ1RTJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2JsZW0uYXJ0aWZhY3RzID0gICRzY29wZS5zZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJ0TmV3UHJvYmxlbShwcm9ibGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyMi8wNy8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcigndmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lQ29udHJvbGxlcicsIHZhbHVlSWRlbnRpZmljYXRpb25GcmFtZUNvbnRyb2xsZXIpO1xyXG5cclxuZnVuY3Rpb24gdmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lQ29udHJvbGxlcigkd2luZG93LHByb2JsZW1TZXJ2aWNlLHRvYXN0QXBwLFNvY2tldCl7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgc2VsZi5pZFByb2JsZW0gPSBcIlwiO1xyXG4gICAgc2VsZi51c2VyZW1haWwgPSBcIlwiO1xyXG4gICAgc2VsZi5uZXd2YWx1ZXMgPSBcIlwiO1xyXG4gICAgc2VsZi5pbml0VmFsdWVJZGVudGlmaWNhdGlvbkZyYW1lID0gaW5pdFZhbHVlSWRlbnRpZmljYXRpb25GcmFtZTtcclxuICAgIHNlbGYuc2V0U3VnZ2VzdGlvblNob3cgPSBzZXRTdWdnZXN0aW9uU2hvdztcclxuICAgIHNlbGYubGVhdmVTdWdnZXN0aW9uU2hvdyA9IGxlYXZlU3VnZ2VzdGlvblNob3c7XHJcbiAgICBzZWxmLnJlbW92ZVZhbHVlSWRlbnRpY2F0aW9uID0gcmVtb3ZlVmFsdWVJZGVudGljYXRpb247XHJcbiAgICBzZWxmLnNldFZhbHVlSWRlbnRpY2F0aW9uID0gc2V0VmFsdWVJZGVudGljYXRpb247XHJcbiAgICBzZWxmLnN1Z2VzdGlvblZhbHVlcyA9IFwiXCI7XHJcbiAgICBzZWxmLnN0YWtlaG9sZGVyTGlzdCA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9uaW9ubGF5ZXI6IFwiQ29tbXVuaXR5XCIsXHJcbiAgICAgICAgICAgIHN0YWtlaG9sZGVyczogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb25pb25sYXllcjogXCJNYXJrZXRcIixcclxuICAgICAgICAgICAgc3Rha2Vob2xkZXJzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBvbmlvbmxheWVyOiBcIlNvdXJjZVwiLFxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlcnM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9uaW9ubGF5ZXI6IFwiQ29udHJpYnV0aW9uXCIsXHJcbiAgICAgICAgICAgIHN0YWtlaG9sZGVyczogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb25pb25sYXllcjogXCJUZWNobmljb1wiLFxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlcnM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuICAgIHNlbGYuc3VnZXN0aW9uVmFsdWVzQXJyYXkgPSBbXHJcbiAgICAgICAgJ0FjZXNzaWJpbGlkYWRlJywnQWRhcHRhYmlsaWRhZGUnLCdFc3TDqXRpY2EnLCdBdXRvbm9taWEnLCAnRGlzcG9uaWJpbGlkYWRlJywgJ0NvbnNjacOqbmNpYScsICdDb2xhYm9yYcOnw6NvJyxcclxuICAgICAgICAnQ29udmVyc2HDp8OjbycsICdFbW/Dp8OjbyBlIEFmZXRvJywgJ0dydXBvcycsICdJZGVudGlkYWRlJywgJ0NvbnNlbnRpbWVudG8gaW5mb3JtYWRvJywgJ01ldGEtY29tdW5pY2HDp8OjbycsICdOb3JtYXMnLFxyXG4gICAgICAgICdPYmpldG8nLCAnUG9ydGFiaWxpZGFkZScsICdQcmVzZW7Dp2EnLCAnUHJpdmFjaWRhZGUnLCAnUHJvcHJpZWRhZGUnLCAnUmVjaXByb2NpZGFkZSwgUmVsYWNpb25hbWVudG8sIFJlcHV0YcOnw6NvJyxcclxuICAgICAgICAnRXNjYWxhYmlsaWRhZGUnLCAnU2VndXJhbsOnYScsICdDb21wYXJ0aWxoYW1lbnRvJywgJ0NvbmZpYW7Dp2EnLCAnVXNhYmlsaWRhZGUnLCAnVmlzaWJpbGlkYWRlJ107XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFZhbHVlSWRlbnRpZmljYXRpb25GcmFtZSgpe1xyXG4gICAgICAgIHNlbGYuaWRwcm9ibGVtID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvYmxlbWlkJyk7XHJcbiAgICAgICAgcHJvYmxlbVNlcnZpY2UuZ2V0b25pb24oc2VsZi5pZHByb2JsZW0pXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3Rha2Vob2xkZXJzLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBrID0gMTsgayA8IHNlbGYuc3VnZXN0aW9uVmFsdWVzQXJyYXkubGVuZ3RoOyBrKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3VnZXN0aW9uVmFsdWVzICs9IHNlbGYuc3VnZXN0aW9uVmFsdWVzQXJyYXlba10gKyAgXCIsIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN1Z2VzdGlvblZhbHVlc1tzZWxmLnN1Z2VzdGlvblZhbHVlc0FycmF5W3NlbGYuc3VnZXN0aW9uVmFsdWVzQXJyYXkubGVuZ3RoLTFdXSArICcuJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLnN0YWtlaG9sZGVycy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IHNlbGYuc3Rha2Vob2xkZXJMaXN0Lmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YWtlaG9sZGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lkIDogZGF0YS5zdGFrZWhvbGRlcnNbaV0uX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25pb25sYXllciA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLm9uaW9ubGF5ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgOiBkYXRhLnN0YWtlaG9sZGVyc1tpXS52YWx1ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lIDogZGF0YS5zdGFrZWhvbGRlcnNbaV0ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uIDogZGF0YS5zdGFrZWhvbGRlcnNbaV0uZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuRWRpdCA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLm9wZW5FZGl0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA6IGRhdGEuc3Rha2Vob2xkZXJzW2ldLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5IDogZGF0YS5zdGFrZWhvbGRlcnNbaV0ueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlcyA6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnN0YWtlaG9sZGVyc1tpXS5vbmlvbmxheWVyID09IHNlbGYuc3Rha2Vob2xkZXJMaXN0W2pdLm9uaW9ubGF5ZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFrZWhvbGRlckxpc3Rbal0uc3Rha2Vob2xkZXJzLnB1c2goc3Rha2Vob2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0QXBwLmVycm9yTWVzc2FnZShkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBTb2NrZXQub24oJ29uQnJvYWRjYXN0T25pb25TYXZlJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VsZi5zdGFrZWhvbGRlckxpc3QsIGZ1bmN0aW9uIChzdGFrZWhvbGRlcikge1xyXG4gICAgICAgICAgICBpZiAoc3Rha2Vob2xkZXIuX2lkID09IGRhdGEuX2lkKXtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLnN0YWtlaG9sZGVyID0gZGF0YS5zdGFrZWhvbGRlcjtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm5hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5kZXNjcmlwdGlvbiA9IGRhdGEuZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci5vcGVuRWRpdCA9IGRhdGEub3BlbkVkaXQ7XHJcbiAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci54ID0gZGF0YS54O1xyXG4gICAgICAgICAgICAgICAgc3Rha2Vob2xkZXIueSA9IGRhdGEueTtcclxuICAgICAgICAgICAgICAgIHN0YWtlaG9sZGVyLm5ld1ZhbHVlcyA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXRTdWdnZXN0aW9uU2hvdyhzdGFrZWhvbGRlcil7XHJcbiAgICAgICAgc3Rha2Vob2xkZXIub3BlbkVkaXQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxlYXZlU3VnZ2VzdGlvblNob3coc3Rha2Vob2xkZXIpe1xyXG4gICAgICAgIHN0YWtlaG9sZGVyLm9wZW5FZGl0ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlVmFsdWVJZGVudGljYXRpb24odmFsdWUsc3Rha2Vob2xkZXIpe1xyXG4gICAgICAgIHZhciBuZXdMaXN0ID0gW107XHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHN0YWtlaG9sZGVyLnZhbHVlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGlmKHN0YWtlaG9sZGVyLnZhbHVlc1tpXSAhPSB2YWx1ZSl7XHJcbiAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2goc3Rha2Vob2xkZXIudmFsdWVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdGFrZWhvbGRlci52YWx1ZXMgPSBuZXdMaXN0O1xyXG4gICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvblNhdmUnLCBzdGFrZWhvbGRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0VmFsdWVJZGVudGljYXRpb24oc3Rha2Vob2xkZXIpIHtcclxuICAgICAgICBpZigoc3Rha2Vob2xkZXIubmV3VmFsdWVzID09PSBcIlwiKSB8fCAoc3Rha2Vob2xkZXIubmV3VmFsdWVzID09PSB1bmRlZmluZWQpKXtcclxuICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKCdWYWxvciBuw6NvIGVzcGVjaWZpY2Fkby4nKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdmFyIHZhbHVlc0xpc3QgPSBzdGFrZWhvbGRlci5uZXdWYWx1ZXMuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCB2YWx1ZXNMaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKGZpbmRWYWx1ZShzdGFrZWhvbGRlci52YWx1ZXMsIHZhbHVlc0xpc3RbaV0pKXtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJEdXBsaWNhdGUgdmFsdWU6IFwiICsgdmFsdWVzTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBzdGFrZWhvbGRlci52YWx1ZXMucHVzaCh2YWx1ZXNMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGFrZWhvbGRlci5uZXdWYWx1ZXMgPSBcIlwiO1xyXG4gICAgICAgICAgICBzdGFrZWhvbGRlci5vcGVuRWRpdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBTb2NrZXQuZW1pdCgnYnJvYWRjYXN0T25pb25TYXZlJywgc3Rha2Vob2xkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmluZFZhbHVlKGxpc3QsIHZhbHVlKXtcclxuICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBpZih2YWx1ZSA9PT0gbGlzdFtpXSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjgvMDcvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3Byb2ZpbGVDb250cm9sbGVyJyxwcm9maWxlQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvZmlsZUNvbnRyb2xsZXIoU29ja2V0LCAkd2luZG93LCRzdGF0ZSwgdG9hc3RBcHAsICRzY29wZSxzaWdudXBTZXJ2aWNlKXtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5zdGFydFByb2ZpbGUgPSBzdGFydFByb2ZpbGU7XHJcbiAgICAgICAgc2VsZi51cGxvYWRJblByb2dyZXNzID0gdHJ1ZTtcclxuICAgICAgICBzZWxmLnVwbG9hZFByb2dyZXNzID0gMDtcclxuICAgICAgICBzZWxmLnVzZXJpZDtcclxuICAgICAgICBzZWxmLnNhdmVQaG90byA9IHNhdmVQaG90bztcclxuICAgICAgICBzZWxmLnN5c3RlbVJldHVybiA9IHN5c3RlbVJldHVybjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc3lzdGVtUmV0dXJuKCl7XHJcbiAgICAgICAgICAgIFNvY2tldC5lbWl0KCdkaXNjb25uZWN0UHJvYmxlbScsICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25pY2tuYW1lJykpO1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3N0YXJ0cHJvYmxlbScpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHNlbGYubXlJbWFnZT0nJztcclxuICAgICAgICBzZWxmLm15Q3JvcHBlZEltYWdlPScnO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlRmlsZVNlbGVjdCA9IGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgICAgICB2YXIgZmlsZSA9IGV2dC5jdXJyZW50VGFyZ2V0LmZpbGVzWzBdO1xyXG4gICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oJHNjb3BlKXtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubXlJbWFnZSA9IGV2dC50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWxlSW5wdXQnKSkub24oJ2NoYW5nZScsaGFuZGxlRmlsZVNlbGVjdCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0UHJvZmlsZSgpe1xyXG4gICAgICAgICAgICBzZWxmLnVzZXJpZCA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ1c2VyaWRcIik7XHJcbiAgICAgICAgICAgIGlmKHNlbGYudXNlcmlkICE9PSB1bmRlZmluZWQpe1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBzYXZlUGhvdG8obXlpbWFnZSl7XHJcbiAgICAgICAgICAgIHZhciB1c2VyUGhvdG8gPXtcclxuICAgICAgICAgICAgICAgIHVzZXJpZCA6ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ1c2VyaWRcIiksXHJcbiAgICAgICAgICAgICAgICBwaG90byA6IG15aW1hZ2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2lnbnVwU2VydmljZS51cGxvYWRQaG90byh1c2VyUGhvdG8pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwaG90b1wiLG15aW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCItLS0tLVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignc2lnbnVwQ29udHJvbGxlcicsIHNpZ251cENvbnRyb2xsZXIpO1xyXG4gICAgc2lnbnVwQ29udHJvbGxlci4kaW5qZWN0ID0gWyckdHJhbnNsYXRlJywnJHdpbmRvdycsJ3NpZ251cFNlcnZpY2UnLCckc3RhdGUnLCd0b2FzdEFwcCcsJ0F1dGhUb2tlbicsJ0F1dGgnLCckZmlsdGVyJywnJHN0YXRlUGFyYW1zJ107XHJcblxyXG4gIGZ1bmN0aW9uIHNpZ251cENvbnRyb2xsZXIoJHRyYW5zbGF0ZSwgJHdpbmRvdywgc2lnbnVwU2VydmljZSwkc3RhdGUsdG9hc3RBcHAsQXV0aFRva2VuLEF1dGgsJGZpbHRlciwkc3RhdGVQYXJhbXMpe1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5tZXNzYWdlICA9ICcnO1xyXG4gICAgc2VsZi5zYXZlVXNlciAgID0gc2F2ZVVzZXI7XHJcbiAgICBzZWxmLnJlc2N1ZVBhc3N3b3JkID0gcmVzY3VlUGFzc3dvcmQ7XHJcbiAgICBzZWxmLmNoYW5nZVBhc3N3b3JkID0gY2hhbmdlUGFzc3dvcmQ7XHJcbiAgICBzZWxmLnNldExhbmcgPSBzZXRMYW5nO1xyXG4gICAgc2VsZi5sb2dpbkluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYXZlVXNlcih1c2VyKSB7XHJcbiAgICAgIHNpZ251cFNlcnZpY2UuY3JlYXRlKHVzZXIpXHJcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoJGZpbHRlcigndHJhbnNsYXRlJykoJ1dFTENPTUVfU1lTVEVNJykgKyB1c2VyLm5pY2tuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnaW5pdC5sb2dpbicpO1xyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiRW1haWwgSsOhIGNhZGFzdHJhZG9cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gc2V0TGFuZyhsYW5nS2V5KSB7XHJcbiAgICAgICAgICAkdHJhbnNsYXRlLnVzZShsYW5nS2V5KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gcmVzY3VlUGFzc3dvcmQodXNlckVtYWlsKXtcclxuICAgICAgICAgIHNpZ251cFNlcnZpY2UucmVzY3VlUGFzc3dvcmQodXNlckVtYWlsKVxyXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJFbWFpbCBjb20gaW5zdHJ1w6fDtWVzIGVudmlhZG8gcGFyYSBcIiArIHVzZXJFbWFpbC5lbWFpbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2luaXQubG9naW4nKTtcclxuICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdEFwcC5lcnJvck1lc3NhZ2UoXCJFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBjaGFuZ2VQYXNzd29yZCh1c2VyKXtcclxuICAgICAgICAgIHNpZ251cFNlcnZpY2UuY2hhbmdlUGFzc3dvcmQodXNlcilcclxuICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiU2VuaGEgYWx0ZXJhZGEgY29tIHN1Y2Vzc28uIEZhw6dhIGxvZ2luIGNvbSBhIG5vdmEgc2VuaGEuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdpbml0LmxvZ2luJyk7XHJcbiAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiRXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmFjdG9yeSgnc2lnbnVwU2VydmljZScsIHNpZ251cFNlcnZpY2UpO1xyXG5cclxuICBzaWdudXBTZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJywnJGxvY2F0aW9uJ107XHJcblxyXG4gIGZ1bmN0aW9uIHNpZ251cFNlcnZpY2UoJGh0dHAsJGxvY2F0aW9uKSB7XHJcblxyXG4gICAgdmFyIEFQSV9ST1VURV9VU0VSID0gJy9hcGkvc2lnbnVwLyc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX1JFU0NVRVBBU1NXT1JEID0gJy9hcGkvcmVzY3VlcGFzc3dkLyc7XHJcbiAgICB2YXIgQVBJX1JPVVRFX1NFVE5FV1BBU1NXT1JEID0gJy9hcGkvcmVzY3VlcGFzc3dkL25ld3Bhc3N3ZC8nO1xyXG4gICAgdmFyIEFQSV9ST1VURV9VUERBVEVQSE9UTyA9ICcvYXBpL3Byb2ZpbGUvcGhvdG8vJztcclxuICAgIHZhciBBUElfUk9VVEVfU0VORE1FU1NBR0UgPSAnL2FwaS9zZW5kbWVzc2FnZS8nO1xyXG5cclxuXHJcbiAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgY3JlYXRlICAgICAgICAgOiBjcmVhdGUsXHJcbiAgICAgIHJlc2N1ZVBhc3N3b3JkIDogcmVzY3VlUGFzc3dvcmQsXHJcbiAgICAgIGNoYW5nZVBhc3N3b3JkIDogY2hhbmdlUGFzc3dvcmQsXHJcbiAgICAgIHVwbG9hZFBob3RvOiB1cGxvYWRQaG90byxcclxuICAgICAgc2VuZGVtYWlsRFNDOiBzZW5kZW1haWxEU0NcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgZnVuY3Rpb24gc2VuZGVtYWlsRFNDKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdChBUElfUk9VVEVfU0VORE1FU1NBR0UsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZShkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQVBJX1JPVVRFX1VTRVIsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2N1ZVBhc3N3b3JkKGRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdChBUElfUk9VVEVfUkVTQ1VFUEFTU1dPUkQsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoYW5nZVBhc3N3b3JkKGRhdGEpe1xyXG4gICAgICB2YXIgbXl0b2tlblVSTCA9ICRsb2NhdGlvbi5zZWFyY2goKTtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfU0VUTkVXUEFTU1dPUkQgKyAnP215dG9rZW49JyArIG15dG9rZW5VUkwubXl0b2tlbisnJnBhc3N3b3JkPScrZGF0YS5wYXNzd29yZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBsb2FkUGhvdG8oZGF0YSkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdChBUElfUk9VVEVfVVBEQVRFUEhPVE8sIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjUvMDYvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbmZpZyhhcHBDb25maWcpO1xyXG5cclxuICAgIGFwcENvbmZpZy4kaW5qZWN0ID0gWyckbWRUaGVtaW5nUHJvdmlkZXInLCckbG9jYXRpb25Qcm92aWRlciddO1xyXG5cclxuICAgLyogZnVuY3Rpb24gYXBwQ29uZmlnICgkbWRUaGVtaW5nUHJvdmlkZXIsJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuXHJcbiAgICAgICAgIC8vJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG4gICAgICAgIHZhciBjdXN0b21HcmVlbk1hcCA9ICRtZFRoZW1pbmdQcm92aWRlci5leHRlbmRQYWxldHRlKCd0ZWFsJywge1xyXG4gICAgICAgICAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxyXG4gICAgICAgICAgICAnY29udHJhc3REYXJrQ29sb3JzJzogWyc1MCddLFxyXG4gICAgICAgICAgICAnNTAnOiAnRTBGMkYxJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgnY3VzdG9tR3JlZW4nLCBjdXN0b21HcmVlbk1hcCk7XHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcclxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdjdXN0b21HcmVlbicsIHtcclxuICAgICAgICAgICAgICAgICdkZWZhdWx0JzogJzUwMCcsXHJcbiAgICAgICAgICAgICAgICAnaHVlLTEnOiAnNTAnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hY2NlbnRQYWxldHRlKCd0ZWFsJyk7XHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdpbnB1dCcsICdkZWZhdWx0JylcclxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdncmVlbicpO1xyXG5cclxuICAgIH07Ki9cclxuXHJcbiAgICBmdW5jdGlvbiBhcHBDb25maWcoJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gRXh0ZW5kIHRoZSByZWQgdGhlbWUgd2l0aCBhIGZldyBkaWZmZXJlbnQgY29sb3JzXHJcbiAgICAgICAgdmFyIG5lb25SZWRNYXAgPSAkbWRUaGVtaW5nUHJvdmlkZXIuZXh0ZW5kUGFsZXR0ZSgndGVhbCcsIHtcclxuICAgICAgICAgICAgJzUwJzogJ0UwRjJGMScsXHJcbiAgICAgICAgICAgICcxMDAnOiAnQjJERkRCJyxcclxuICAgICAgICAgICAgJzIwMCc6ICc4MENCQzQnLFxyXG4gICAgICAgICAgICAnMzAwJzogJzREQjZBQycsXHJcbiAgICAgICAgICAgICc0MDAnOiAnMjZBNjlBJyxcclxuICAgICAgICAgICAgJzUwMCc6ICcwMDk2ODgnLFxyXG4gICAgICAgICAgICAnNjAwJzogJzAwODk3QicsXHJcbiAgICAgICAgICAgICc3MDAnOiAnMDA3OTZCJyxcclxuICAgICAgICAgICAgJzgwMCc6ICcwMDY5NUMnLFxyXG4gICAgICAgICAgICAnOTAwJzogJzAwNEQ0MCcsXHJcbiAgICAgICAgICAgICdBMTAwJzogJ0E3RkZFQicsXHJcbiAgICAgICAgICAgICdBMjAwJzogJzY0RkZEQScsXHJcbiAgICAgICAgICAgICdBNDAwJzogJzFERTlCNicsXHJcbiAgICAgICAgICAgICdBNzAwJzogJzAwQkZBNScsXHJcbiAgICAgICAgICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsICAgIC8vIHdoZXRoZXIsIGJ5IGRlZmF1bHQsIHRleHQgKGNvbnRyYXN0KVxyXG4gICAgICAgICAgICAvLyBvbiB0aGlzIHBhbGV0dGUgc2hvdWxkIGJlIGRhcmsgb3IgbGlnaHRcclxuICAgICAgICAgICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6IFsnNTAnLCAnMTAwJywgLy9odWVzIHdoaWNoIGNvbnRyYXN0IHNob3VsZCBiZSAnZGFyaycgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgJzIwMCcsICczMDAnLCAnNDAwJywgJ0ExMDAnXSxcclxuICAgICAgICAgICAgJ2NvbnRyYXN0TGlnaHRDb2xvcnMnOiB1bmRlZmluZWRcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGNvbG9yIHBhbGV0dGUgbWFwIHdpdGggdGhlIG5hbWUgPGNvZGU+bmVvblJlZDwvY29kZT5cclxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgndGVhbCcsIG5lb25SZWRNYXApO1xyXG4gICAgICAgIC8vIFVzZSB0aGF0IHRoZW1lIGZvciB0aGUgcHJpbWFyeSBpbnRlbnRpb25zXHJcbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcclxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCd0ZWFsJylcclxuICAgICAgICAgICAgLmFjY2VudFBhbGV0dGUoJ2dyZWVuJyk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn0pKCk7IiwiXHJcbihmdW5jdGlvbigpe1xyXG5cclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXV0aFNlcnZpY2UnLCBbXSlcclxuXHRcdC5mYWN0b3J5KCdBdXRoJywgZnVuY3Rpb24oJGh0dHAsICRxLCBBdXRoVG9rZW4pIHtcclxuXHRcdFx0dmFyIGF1dGhGYWN0b3J5ID0ge307XHJcblx0XHRcdGF1dGhGYWN0b3J5LmxvZ2luID0gZnVuY3Rpb24oZW1haWwsIHBhc3N3b3JkKSB7XHJcblx0XHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvbG9naW4nLCB7XHJcblx0XHRcdFx0XHRlbWFpbDogZW1haWwsXHJcblx0XHRcdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG5cdFx0XHRcdFx0XHRBdXRoVG9rZW4uc2V0VG9rZW4oZGF0YS50b2tlbik7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRhdXRoRmFjdG9yeS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRBdXRoVG9rZW4uc2V0VG9rZW4oKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGF1dGhGYWN0b3J5LmlzTG9nZ2VkSW4gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZihBdXRoVG9rZW4uZ2V0VG9rZW4oKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGF1dGhGYWN0b3J5LmdldFVzZXIgPSBmdW5jdGlvbihpZCkge1xyXG5cdFx0XHRcdGlmKEF1dGhUb2tlbi5nZXRUb2tlbigpKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL21lLz91c2VyaWQ9JyArIGlkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJHEucmVqZWN0KHttZXNzYWdlOiBcIlVzZXIgaGFzIG5vIHRva2VuXCJ9KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9O1xyXG5cdFx0XHRyZXR1cm4gYXV0aEZhY3Rvcnk7XHJcblx0XHR9KVxyXG5cdFx0LmZhY3RvcnkoJ0F1dGhUb2tlbicsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcclxuXHJcblx0XHRcdHZhciBhdXRoVG9rZW5GYWN0b3J5ID0ge307XHJcblxyXG5cdFx0XHRhdXRoVG9rZW5GYWN0b3J5LmdldFRva2VuID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRhdXRoVG9rZW5GYWN0b3J5LnNldFRva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcclxuXHJcblx0XHRcdFx0aWYgKHRva2VuKSB7XHJcblx0XHRcdFx0XHQkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHRva2VuKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdCR3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rva2VuJyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fTtcclxuXHRcdFx0cmV0dXJuIGF1dGhUb2tlbkZhY3Rvcnk7XHJcblx0XHR9KVxyXG5cdFx0LmZhY3RvcnkoJ0F1dGhJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKCRxLCAkbG9jYXRpb24sIEF1dGhUb2tlbikge1xyXG5cdFx0XHR2YXIgaW50ZXJjZXB0b3JGYWN0b3J5ID0ge307XHJcblx0XHRcdGludGVyY2VwdG9yRmFjdG9yeS5yZXF1ZXN0ID0gZnVuY3Rpb24oY29uZmlnKSB7XHJcblx0XHRcdFx0dmFyIHRva2VuID0gQXV0aFRva2VuLmdldFRva2VuKCk7XHJcblx0XHRcdFx0aWYodG9rZW4pIHtcclxuXHRcdFx0XHRcdGNvbmZpZy5oZWFkZXJzWyd4LWFjY2Vzcy10b2tlbiddID0gdG9rZW47XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBjb25maWc7XHJcblx0XHRcdH07XHJcblx0XHRcdHJldHVybiBpbnRlcmNlcHRvckZhY3Rvcnk7XHJcblx0XHR9KTtcclxufSkoKTsiLCJcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdEcm9wRFNDJyxbXSlcclxuICAgIC5kaXJlY3RpdmUoJ2RyYWdnYWJsZScsIGZ1bmN0aW9uKCRkb2N1bWVudCxTb2NrZXQsJHdpbmRvdykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xyXG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYoZXZlbnQudGFyZ2V0LmlkLnN1YnN0cmluZygwLDExKSA9PSBcInN0YWtlaG9sZGVyXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LmJpbmQoJ21vdXNlbW92ZScsIG1vdXNlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LmJpbmQoJ21vdXNldXAnLCBtb3VzZXVwKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50LnRhcmdldC5pZC5zdWJzdHJpbmcoMCw2KSA9PSBcInBvc3RpdFwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LmJpbmQoJ21vdXNlbW92ZScsIG1vdXNlbW92ZVBvc3RJdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5iaW5kKCdtb3VzZXVwJywgbW91c2V1cFBvc3RJdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiBtb3VzZW1vdmUoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBpZF9kaXYgPSBldmVudC50YXJnZXQuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaWRfZGl2ID09ICdzdmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWRfZGl2ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnN0YWtlaG9sZGVyLm9uaW9ubGF5ZXIgPSBpZF9kaXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICB5ID0gZXZlbnQucGFnZVk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB4ID0gZXZlbnQucGFnZVg7XHJcbiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB5ICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAgeCArICdweCdcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3Rha2Vob2xkZXIueCA9IHggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3Rha2Vob2xkZXIueSA9IHkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1vdXNlbW92ZVBvc3RJdChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZF9kaXYgPSBldmVudC50YXJnZXQuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkX2RpdiA9PSAnc3ZnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZF9kaXYgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIHNjb3BlLnBvc3RpdC5sYXllciA9IGlkX2RpdjtcclxuICAgICAgICAgICAgICAgICAgICB5ID0gZXZlbnQucGFnZVk7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IGV2ZW50LnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB5ICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogIHggKyAncHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucG9zdGl0LnggPSB4ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS5wb3N0aXQueSA9IHkgKyAncHgnO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1vdXNldXAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LnVuYmluZCgnbW91c2Vtb3ZlJywgbW91c2Vtb3ZlKTtcclxuICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQudW5iaW5kKCdtb3VzZXVwJywgbW91c2V1cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE1vdmUnLCBzY29wZS5zdGFrZWhvbGRlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtb3VzZXVwUG9zdEl0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC51bmJpbmQoJ21vdXNlbW92ZScsIG1vdXNlbW92ZVBvc3RJdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LnVuYmluZCgnbW91c2V1cCcsIG1vdXNldXBQb3N0SXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFNvY2tldC5lbWl0KCdicm9hZGNhc3RPbmlvbjNMYXllck1vdmUnLCBzY29wZS5wb3N0aXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9KTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgamVzdXMgb24gMjEvMDMvMjAxNi5cclxuICovXHJcbjsoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcFJ4RHJhZycsIFsncngnXSlcclxuICAgICAgICAuZGlyZWN0aXZlKCdyeGRyYWdnYWJsZScsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHdpbmRvdywgcngsIFNvY2tldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRocmVlIG1ham9yIGV2ZW50c1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsY29kZSA9ICAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsb2NhbGNvZGUnKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb3VzZXVwICAgPSByeC5PYnNlcnZhYmxlLmZyb21FdmVudChlbGVtZW50LCAgICdtb3VzZXVwJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW91c2Vtb3ZlID0gcnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoJGRvY3VtZW50LCAnbW91c2Vtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW91c2Vkb3duID0gcnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZWxlbWVudCwgICAnbW91c2Vkb3duJykubWFwKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBvZmZzZXRzIHdoZW4gbW91c2UgZG93blxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogZXZlbnQuY2xpZW50WCAtIGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAgZXZlbnQuY2xpZW50WSAtIGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb21iaW5lIG1vdXNlIGRvd24gd2l0aCBtb3VzZSBtb3ZlIHVudGlsIG1vdXNlIHVwXHJcbiAgICAgICAgICAgICAgICB2YXIgbW91c2VkcmFnID0gbW91c2Vkb3duLnNlbGVjdE1hbnkoZnVuY3Rpb24oaW1hZ2VPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW91c2Vtb3ZlLm1hcChmdW5jdGlvbiAocG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBvZmZzZXRzIGZyb20gbW91c2UgZG93biB0byBtb3VzZSBtb3Zlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcG9zLmNsaWVudFggLSBpbWFnZU9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAgcG9zLmNsaWVudFkgLSBpbWFnZU9mZnNldC50b3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50YWtlVW50aWwobW91c2V1cCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBtb3VzZWRyYWcuc3Vic2NyaWJlIChmdW5jdGlvbiAocG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jc3Moe3RvcDogcG9zLnRvcCArICdweCcsIGxlZnQ6IHBvcy5sZWZ0ICsgJ3B4J30pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcy5sb2NhbGNvZGUgPSBsb2NhbGNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgU29ja2V0LmVtaXQoJ2Jyb2FkY2FzdE1vdmUnLHBvcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG5cclxufS5jYWxsKHRoaXMpKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDI1LzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignbG9naW5Db250cm9sbGVyJyxsb2dpbkNvbnRyb2xsZXIpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsb2dpbkNvbnRyb2xsZXIoU29ja2V0LCAkdHJhbnNsYXRlLCAkcm9vdFNjb3BlLCAkc3RhdGUsIEF1dGgsICR3aW5kb3csICRmaWx0ZXIsIHRvYXN0QXBwKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5zZXRMYW5nID0gc2V0TGFuZztcclxuICAgICAgICAgICAgc2VsZi5kb0xvZ291dCA9IGRvTG9nb3V0O1xyXG4gICAgICAgICAgICBzZWxmLmRvTG9naW4gPSBkb0xvZ2luO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0TGFuZyhsYW5nS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgJHRyYW5zbGF0ZS51c2UobGFuZ0tleSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExvY2FsQ29kZSgpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgc2VsZi5sb2dnZWRJbiA9IEF1dGguaXNMb2dnZWRJbigpO1xyXG5cclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJyRyb3V0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlZEluID0gQXV0aC5pc0xvZ2dlZEluKCk7XHJcbiAgICAgICAgICAgICAgICBBdXRoLmdldFVzZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51c2VyID0gZGF0YS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRvTG9naW4odXNlcikge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pblByb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5lcnJvciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgQXV0aC5sb2dpbih1c2VyLmVtYWlsLCB1c2VyLnBhc3N3b3JkKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXJlbWFpbFwiLGRhdGEuZW1haWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidXNlcmlkXCIsZGF0YS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJsb2NhbGNvZGVcIixkYXRhLmlkICsgJy0nICsgZ2V0TG9jYWxDb2RlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibmlja25hbWVcIixkYXRhLm5pY2tuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRMYW5nKGRhdGEubGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluUHJvY2Vzc2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBdXRoLmdldFVzZXIoZGF0YS5pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXJEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKCRmaWx0ZXIoJ3RyYW5zbGF0ZScpKCdXRUxDT01FX1NZU1RFTScpICsgXCI6IFwiICsgZGF0YS5uaWNrbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBob3RvXCIsdXNlckRhdGEuZGF0YS5waG90byk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3N0YXJ0cHJvYmxlbScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RBcHAuZXJyb3JNZXNzYWdlKFwiVXN1w6FyaW8gZSBzZW5oYSBuw6NvIGNvbmZlcmVtLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRvTG9nb3V0KCkge1xyXG4gICAgICAgICAgICAgICAgQXV0aC5sb2dvdXQoKTtcclxuICAgICAgICAgICAgICAgICRzdGF0ZSgnaW5pdCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKT1NFVkFMREVSTEVJIG9uIDIxLzA2LzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5zZXJ2aWNlKCdTb2NrZXQnLFxyXG4gICAgICAgIFsnJGxvY2F0aW9uJywgJyR0aW1lb3V0JyxcclxuICAgIGZ1bmN0aW9uKCRsb2NhdGlvbiwgJHRpbWVvdXQpIHtcclxuICAgICAgICBpZiAodHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNvY2tldCA9IGlvKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub24gPSBmdW5jdGlvbihldmVudE5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNvY2tldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQub24oZXZlbnROYW1lLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmVtaXQgPSBmdW5jdGlvbihldmVudE5hbWUsIGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5lbWl0KGV2ZW50TmFtZSwgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNvY2tldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbl0pXHJcblxyXG59KSgpO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
